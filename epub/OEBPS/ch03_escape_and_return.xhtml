<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru"></p>

<p><body>
\chapter{Переходы и возвраты: продолжения}\label{chapter:escape}</p>

<p>\initial{0.25ex}{0.0ex}{К}{аждое вычисление} в конечном счёте
приводит к возврату результата сущности, которая называется <em class="term">продолжением</em>.
В данной главе разбирается эта идея и её исторические предпосылки. Мы также
создадим ещё один интерпретатор, призванный явно оперировать продолжениями.
В процессе разработки будут рассмотрены различные варианты реализации
продолжений в Лиспе и Scheme, а также своеобразный «стиль передачи
продолжений». Одним из отличий Лиспа от других языков является большое
количество механизмов управления ходом вычислений. Это в некотором смысле
превращает данную главу в каталог <span class="cite">[<a href="z1_bibliography.xhtml#moz87">moz87</a>]</span>, где представлена тысяча и одна
управляющая конструкция. С другой стороны, мы не будем вдаваться в подробности
о продолжениях; по крайней мере, о том, как физически реализуется их захват и
сохранение. Наш интерпретатор будет использовать объекты для представления
продолжений в виде <em class="term">стека вызовов</em>.</p>

<div class="bigskip"/>


<!--\indexR{переходы (escapes)}-->
<p>Интерпретаторам, построенным нами ранее, было необходимо только окружение, чтобы
вычислить значение переданного выражения. К сожалению, они не в состоянии
проводить вычисления, в которых есть <em class="term">переходы</em> (escapes): полезная
управляющая конструкция, позволяющая покинуть текущий контекст исполнения, чтобы
перейти в другой, более подходящий. Обычно они используются для обработки
исключительных ситуаций, когда мы указываем, куда нам следует перейти для
обработки события или ошибки, прервавшей нормальный ход вычислений.</p>


<!--\indexC{prog}-->
<!--\indexC{goto}-->
<p>История переходов в Лиспе восходит ко временам <span class="logo">Lisp 1.5</span> и формы <code><span class="func">prog</span></code>.
Сейчас эта форма считается устаревшей, но раньше на неё возлагались большие
надежды по переманиванию программистов на Алголе в ряды лисперов, так как
считалось, что для них было более привычным использование <code><span class="func">goto</span></code>. Вместо
этого оказалось, что данная форма больше влияет на самих лисперов, сталкивая их
с праведного пути хвостовой рекурсии.\footnote*{Например, сравните стили
изложения первого и третьего изданий <span class="cite">[<a href="z1_bibliography.xhtml#wh89">wh89</a>]</span>.} Тем не менее, форма <code><span class="func">prog</span></code>
достойна рассмотрения, потому как обладает несколькими интересными свойствами.
Например, вот так с её помощью записывается факториал:</p>


<!--\indexC{fact}-->
<pre>(defun fact (n)     |\dialect<span class="logo">Common Lisp</span>|
  (prog (r)
            (setq r 1)
       loop (cond ((= n 1) (return r)))
            (setq r (* n r))
            (setq n (- n 1))
            (go loop) ) )</pre>

<p>Специальная форма <code><span class="func">prog</span></code> сначала объявляет все используемые локальные
переменные (в данном случае это <code><span class="func">r</span></code>). Далее следуют инструкции
(представляемые списками) и метки (представляемые символами). Инструкции
последовательно вычисляются, как в <code><span class="func">progn</span></code>. Результатом вычисления формы
<code><span class="func">prog</span></code> по умолчанию является <code><span class="func">nil</span></code>. Но внутри <code><span class="func">prog</span></code> можно использовать
специальные инструкции. Безусловные переходы выполняются с помощью <code><span class="func">go</span></code>
(которая принимает символ — имя метки), а вернуть определённое значение из
<code><span class="func">prog</span></code> можно с помощью <code><span class="func">return</span></code>. В <span class="logo">Lisp 1.5</span> было лишь одно ограничение:
формы <code><span class="func">go</span></code> и <code><span class="func">return</span></code> могли появляться только на первом уровне вложенности
или внутри <code><span class="func">cond</span></code> на том же первом уровне.</p>

<p>Форма <code><span class="func">return</span></code> позволяла выйти из <code><span class="func">prog</span></code>, забрав с собой результат
вычислений. Ограничение <span class="logo">Lisp 1.5</span> допускало лишь простые переходы, в более
поздних версиях оно было снято, что позволило реализовать более изощрённые
варианты поведения. Переходы стали обычным способом обработки ошибок. Если
происходила ошибка, то выполнение переходило из ошибочного контекста исполнения
в безопасный для обработки возникшей ситуации. Теперь можно переписать факториал
следующим образом, поместив <code><span class="func">return</span></code> глубже:</p>

<pre>(defun fact2 (n)     |\dialect<span class="logo">Common Lisp</span>|
  (prog (r)
            (setq r 1)
       loop (setq r (* (cond ((= n 1) (return r))
                             ('else n) )
                       r ))
            (setq n (- n 1))
            (go loop) ) )</pre>


<!--\indexR{управляющие конструкции}-->
<p>Если рассматривать формы <code><span class="func">prog</span></code> и <code><span class="func">return</span></code> только как управляющие
конструкции, то становится ясно, что они влияют на последовательность вычислений
подобно функциям: выполнение функции начинается переходом в её тело и
заканчивается возвратом результата в то место, откуда функция была вызвана.
Только в нашем случае внутри формы <code><span class="func">prog</span></code> известно, куда требуется вернуть
значение, — она сама связывает <code><span class="func">return</span></code> с этим местом. Для перехода
не требуется знать, откуда мы уходим, но необходимо знать, куда мы хотим
попасть.</p>

<p>Если такой <em class="term">прыжок</em> будет эффективно реализован, то это порождает
жизнеспособную парадигму программирования. Например, пусть стоит задача
проверить вхождение элемента в двоичное дерево. В лоб эта задача решается
примерно таким способом:</p>


<!--\indexCS{find-symbol}{обычная}-->
<pre>(define (find-symbol id tree)
  (if (pair? tree)
      (or (find-symbol id (car tree))
          (find-symbol id (cdr tree)) )
      (eq? tree id) ) )</pre>

<p>Допустим, мы ищем <code><span class="func">foo</span></code> в следующем дереве: <code><span class="func">(((a . b) . (foo . c))
. (d . e))</span></code>. Так как поиск идёт слева направо и в глубину, то после того, как
нужный символ будет найден, нам ещё предстоит подниматься обратно по
вложенным <code><span class="func">or</span></code>, неся с собой вожделенную <code><span class="func">\#t</span></code>, которая в конце концов
станет результатом вычислений. Вот так это происходит:</p>

<pre>(find-symbol 'foo '(((a . b) . (foo . c)) . (d . e)))
|\Equals|   (or (find-symbol 'foo '((a . b) . (foo . c)))
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or (find-symbol 'foo '(a . b))
           (find-symbol 'foo '(foo . c)) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or (or (find-symbol 'foo 'a)
               (find-symbol 'foo 'b) )
           (find-symbol 'foo '(foo . c)) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or (find-symbol 'foo 'b)
           (find-symbol 'foo '(foo . c)) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (find-symbol 'foo '(foo . c))
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or (find-symbol 'foo 'foo)
           (find-symbol 'foo 'c) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or #t
           (find-symbol 'foo 'c) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or #t
       (find-symbol 'foo '(d . e)) )
|\is| #t</pre>

<p>Как раз здесь бы не помешал эффективно реализованный переход к последней строке.
Как только мы находим нужный символ, то не продираемся через <code><span class="func">or</span></code> и уж тем
более не смотрим в другие ветки, а сразу же возвращаем результат.</p>


<!--\indexR{исключения}-->
<p>Другим примером может быть так называемое программирование исключениями. Суть
подхода: пусть в цикле выполняются какие-то действия. Данный цикл продолжает
выполняться до тех пор, пока не возникает исключительная ситуация и
не происходит выход из цикла, который иначе бы продолжался вечно.
Нечто подобное реализует функция <code><span class="func">better-map</span></code>, рассматриваемая позже.
\seePage[escape/forms/catch-vs-block/p:better-map]</p>


<!--\indexR{продолжения (continuations)}-->
<p>Размышляя дальше над природой сущности, представляющей точку входа в функцию,
можно прийти к выводу, что понятие вычислений подразумевает не только выражение,
которое необходимо вычислить, и окружение, в котором будут проходить вычисления,
но и нечто, куда необходимо вернуть полученный результат. Это нечто и называется
<em class="term">продолжением</em> (continuation). Это всё, что ещё осталось вычислить.</p>

<p>У любого вычисления есть продолжение. Например, в выражении <code><span class="func">(+ 3 (* 2 4))</span></code>
продолжением подвыражения <code><span class="func">(* 2 4)</span></code> будет сложение, где первый аргумент
это <code><span class="func">3</span></code>, а второй ожидается в результате вычислений. Здесь можно заметить
параллели и представить продолжения в более привычной форме — как функции.
Ведь продолжения тоже представляют некоторые вычисления и, как и функции, тоже
требуют, чтобы сначала были вычислены все необходимые параметры. Для предыдущего
примера продолжением <code><span class="func">(* 2 4)</span></code> будет функция \ic{(lambda (\ii{x}) (+ 3
\ii{x}))}, подчёркивающая тот факт, что вычисление ожидает второй аргумент для
сложения.</p>

<p>Продолжения можно записывать и проще, в духе λ-исчисления. Мы будем
записывать предыдущее продолжение как <code><span class="func">(+ 3 [])</span></code>, где <code><span class="func">[]</span></code> означает место,
куда необходимо подставить результат вычислений.</p>

<p>Действительно, у всего есть продолжение. Вычисление условного выражения в формах
ветвления проводится для продолжения, которое ожидает это значение, чтобы
выбрать ту или иную ветку условной формы. В выражении <code><span class="func">(if (foo) 1 2)</span></code>
продолжением вызова <code><span class="func">(foo)</span></code> является \ic{(lambda (\ii{x}) (if \ii{x} 1 2))}
или <code><span class="func">(if [] 1 2)</span></code>.</p>

<p>Переходы, исключения и тому подобные механизмы — это лишь частные случаи
манипуляции продолжениями. Имея это в виду, давайте рассмотрим в деталях
различные варианты использования продолжений, которые были придуманы за
последние тридцать с лишним лет.</p>

<h2 id="escape/sect:handling">Формы, манипулирующие продолжениями</h2>

<p>Явное использование продолжений даёт нам возможность управлять ходом исполнения
программы. Форма <code><span class="func">prog</span></code> имеет схожие возможности, но при этом обладает
излишним функционалом <code><span class="func">let</span></code>. Оставив только функционал управления потоком
исполнения, мы получим то, для чего (в первую очередь) были придуманы формы
<code><span class="func">catch</span></code> и <code><span class="func">throw</span></code>.</p>

<p>
\subsection{\texorpdfstring%
{Пара \protect<code><span class="func">catch</span></code>/\protect<code><span class="func">throw</span></code>}%
{Пара catch/throw}}%
\label{escape/handling/ssect:catch-throw}</p>


<!--\indexC{catch}-->
<!--\indexE{catch@\protect<code><span class="func">catch</span></code>|seealso{\protect<code><span class="func">throw</span></code>}}-->
<!--\indexR{специальные формы!catch@\protect<code><span class="func">catch</span></code>}-->
<!--\indexR{переходы (escapes)!динамические}-->
<p>Специальная форма <code><span class="func">catch</span></code> имеет следующий синтаксис:</p>

<pre>(catch |\ii{метка}| |\ii{формы}|...)</pre>

<p>\ii{Метка} вычисляется и с ней связывается продолжение формы <code><span class="func">catch</span></code>. Раз
связывается, то это значит, что нам необходимо новое пространство имён —
<em>динамическое окружение меток</em>, — в котором и будут храниться эти связи.
Это не совсем пространство <em>имён</em>, так как метки не обязательно являются
идентификаторами, но вполне на него похоже по смыслу. Правда, произвольность
значений меток может вызвать проблемы с определением их равенства и,
следовательно, с поиском в этом окружении, так как не все значения можно легко
и однозначно сравнивать. К этому вопросу мы ещё вернёмся.</p>

<p>Оставшиеся \ii{формы} являются телом <code><span class="func">catch</span></code> и вычисляются последовательно,
как в <code><span class="func">progn</span></code> или <code><span class="func">begin</span></code>. Если ничего не произошло, то значением
<code><span class="func">catch</span></code> является значение последней вычисленной формы. Но мы можем вмешаться
в это поведение с помощью <code><span class="func">throw</span></code>.</p>


<!--\indexC{throw}-->
<!--\indexE{throw@\protect<code><span class="func">throw</span></code>|seealso{\protect<code><span class="func">catch</span></code>}}-->
<p>Форма <code><span class="func">throw</span></code> имеет следующий синтаксис:</p>

<pre>(throw |\ii{метка}| |\ii{форма}|)</pre>

<p>\noindent
Первый аргумент должен вычисляться в значение, с которым <code><span class="func">catch</span></code> динамически
связала продолжение. Если это так, то исполнение переходит в соответствующее
продолжение, а вместо значения <code><span class="func">catch</span></code> подставляется значение \ii{формы}
из <code><span class="func">throw</span></code>.</p>

<p>Вернёмся к примеру с поиском в двоичном дереве и перепишем его с использованием
<code><span class="func">catch</span></code> и <code><span class="func">throw</span></code>. Мы не будем здесь бессмысленно передавать по
рекурсивным вызовам значение <code><span class="func">id</span></code>, так как оно лексически видимо отовсюду;
такое поведение реализовано с помощью вспомогательной функции.</p>


<!--\indexCS{find-symbol}{с переходами}-->
<pre>(define (find-symbol id tree)
  (define (find tree)
    (if (pair? tree)
        (or (find (car tree))
            (find (cdr tree)) )
        (if (eq? tree id)
            (throw 'find #t)
            #f ) ) )
  (catch 'find
    (find tree) ) )</pre>

<p>Форма <code><span class="func">catch</span></code>, оправдывая своё название, ловит значение, которое бросает ей
<code><span class="func">throw</span></code>. Переход в данном случае обеспечивается явным указанием значения,
связанного с сохранённым продолжением. То есть <code><span class="func">catch</span></code> — это связывающая
форма, которая ассоциирует метку с текущим продолжением. Тогда форма <code><span class="func">throw</span></code>
фактически ссылается на это продолжение, используя его для управления потоком
вычислений. Сама по себе она не возвращает значения, <code><span class="func">throw</span></code> лишь заставляет
<code><span class="func">catch</span></code> вернуть указанное значение. Здесь <code><span class="func">catch</span></code> захватывает продолжение
вызова <code><span class="func">find-symbol</span></code>, а <code><span class="func">throw</span></code> выполняет прямой переход к дальнейшим
вычислениям, которые должны выполняться после вызова <code><span class="func">find-symbol</span></code>.</p>

<p>\ForLayout{display}{\clearpage}</p>


<!--\indexR{динамическое окружение!окружение меток}-->
<p>Динамическое окружение меток описывается следующей таблицей свойств:</p>

<p>\begin{envtable}
Ссылка      & \ic{(throw \ii{метка} ...)}             \\
Значение    & отсутствует, это объекты второго класса \\
Изменение   & запрещено                               \\
Расширение  & \ic{(catch \ii{метка} ...)}             \\
Определение & запрещено                               \\
\end{envtable}</p>

<p>Как мы уже говорили, <code><span class="func">catch</span></code> это не функция, а специальная форма, вычисляющая
свой первый аргумент (метку), затем связывающая с ней в динамическом окружении
своё продолжение, после чего вычисляющая оставшиеся формы подобно <code><span class="func">begin</span></code>.
Не обязательно все они будут вычислены. Когда <code><span class="func">catch</span></code> возвращает значение или
мы выходим из неё с помощью <code><span class="func">throw</span></code>, связь между меткой и продолжением
автоматически удаляется.</p>


<!--\indexCS{throw}{варианты реализации}-->
<p>Форму <code><span class="func">throw</span></code> же можно реализовать и как функцию, и как специальную форму.
Если это специальная форма, как в <span class="logo">Common Lisp</span>, то она вычисляет метку, затем
ищет соответствующее продолжение <code><span class="func">catch</span></code>, и, если находит, то вычисляет
значение для передачи и выполняет переход. Если же <code><span class="func">throw</span></code> реализована как
функция, то всё происходит немного в другом порядке: сначала вычисляются оба
аргумента, затем ищется <code><span class="func">catch</span></code>, после чего выполняется переход.</p>

<p>Эти семантические различия хорошо показывают неточность описания поведения этих
форм естественным языком. И на этом они не заканчиваются, можно придумать ещё
множество вопросов, на которые будет сложно дать однозначный ответ. Например,
что делать, если соответствующей <code><span class="func">catch</span></code>-формы нет? Как именно всё же
сравнивать метки? Что будет, если написать <code><span class="func">(throw $\alpha$ (throw $\beta$
$\pi$))</span></code>? Мы попытаемся ответить на эти вопросы немного позже.</p>

<p>
\subsection{\texorpdfstring%
{Пара \protect<code><span class="func">block</span></code>/\protect<code><span class="func">return-from</span></code>}%
{Пара block/return-from}}%
\label{escape/forms/ssect:block-return}</p>


<!--\indexR{переходы (escapes)!лексические}-->
<!--\indexR{специальные формы!block@\protect<code><span class="func">block</span></code>}-->
<p>Переходы, которые реализуют <code><span class="func">catch</span></code> и <code><span class="func">throw</span></code>, выполняются динамически.
Когда <code><span class="func">throw</span></code> запрашивает переход, она должна во время исполнения программы
отыскать соответствующую <code><span class="func">catch</span></code>-форму и её продолжение. Естественно, это
требует времени, которое можно попытаться сократить, использовав
<em>лексические</em> метки, как их называют в <span class="logo">Common Lisp</span>. Специальные формы
<code><span class="func">block</span></code> и <code><span class="func">return-from</span></code> слегка напоминают <code><span class="func">catch</span></code> и <code><span class="func">throw</span></code>.</p>


<!--\indexC{block}-->
<!--\indexE{block@\protect<code><span class="func">block</span></code>|seealso{\protect<code><span class="func">return-from</span></code>}}-->
<p>Форма <code><span class="func">block</span></code> имеет следующий синтаксис:</p>

<pre>(block |\ii{метка}| |\ii{формы}|...)</pre>


<!--\indexR{лексическое окружение!окружение меток}-->
<p>\noindent
Первый аргумент не вычисляется и должен быть идентификатором. Форма <code><span class="func">block</span></code>
связывает текущее продолжение с \ii{меткой} в <em>лексическом окружении
меток</em>. Далее вычисляется тело <code><span class="func">block</span></code> как в <code><span class="func">progn</span></code> и последнее
полученное значение становится значением всей формы <code><span class="func">block</span></code>.
Последовательность можно прервать с помощью <code><span class="func">return-from</span></code>.</p>

<p>\ForLayout{display}{\clearpage}</p>


<!--\indexC{return-from}-->
<!--\indexE{return-from@\protect<code><span class="func">return-from</span></code>|seealso{\protect<code><span class="func">block</span></code>}}-->
<p>Форма <code><span class="func">return-from</span></code> имеет следующий синтаксис:</p>

<pre>(return-from |\ii{метка}| |\ii{форма}|)</pre>

<p>\noindent
Первый аргумент не вычисляется и должен быть именем лексически видимой метки;
читай: <code><span class="func">return-from</span></code> может находиться только внутри <code><span class="func">block</span></code>
с одноимённой меткой, как переменная может использоваться только внутри
соответствующей <code><span class="func">lambda</span></code>-формы. При вычислении <code><span class="func">return-from</span></code>
соответствующий <code><span class="func">block</span></code> прерывается и возвращает значение \ii{формы}.</p>

<p>Лексические метки образуют новое пространство имён, чьи свойства описываются
следующей таблицей:</p>

<p>\begin{envtable}
Ссылка      & \ic{(return-from \ii{метка} ...)}       \\
Значение    & отсутствует, это объекты второго класса \\
Изменение   & запрещено                               \\
Расширение  & \ic{(block \ii{метка} ...)}             \\
Определение & запрещено                               \\
\end{envtable}</p>

<p>Перепишем\footnote{Нам пришлось воспользоваться <code><span class="func">letrec</span></code>, так как в Scheme
запрещено располагать <code><span class="func">define</span></code> сразу внутри <code><span class="func">block</span></code>, а <code><span class="func">(let ()
(define ...))</span></code> писать тоже нельзя из-за <code><span class="func">()</span></code>.} наш пример с деревом на новый
лад:</p>


<!--\indexCS{find-symbol}{с переходами}-->
<pre>(define (find-symbol id tree)
  (block find
    (letrec ((find (lambda (tree)
                     (if (pair? tree)
                         (or (find (car tree))
                             (find (cdr tree)) )
                         (if (eq? id tree)
                             (return-from find #t)
                             #f ) ) )))
      (find tree) ) ) )</pre>

<p>Заметьте, мы не просто поменяли все "`<code><span class="func">catch 'find</span></code>"' на "`<code><span class="func">block find</span></code>"';
нам потребовалось переместить тело функции внутрь <code><span class="func">block</span></code>, иначе
<code><span class="func">return-from</span></code> не находилась бы в лексической области видимости
метки <code><span class="func">find</span></code>.</p>


<!--\indexCS{block}{эффективность}-->
<p>Компилятор может генерировать для <code><span class="func">block</span></code> очень эффективный код. Грубо
говоря, всё, что надо сделать <code><span class="func">block</span></code>, — это сохранить высоту стека
вызовов в соответствующей метке. А <code><span class="func">return-from</span></code> надо лишь положить
возвращаемое значение <code><span class="func">\#t</span></code> туда, где его ждут (в регистр, например), после
чего вернуть указатель верхушки стека в положение, сохранённое в метке
<code><span class="func">find</span></code>. Это всего лишь пара-тройка инструкций, а не поиск среди всех
доступных меток, который устраивает <code><span class="func">catch</span></code>. Отличие станет более заметным,
когда мы попробуем реализовать <code><span class="func">catch</span></code>\footnote{Этот вариант <code><span class="func">catch</span></code>
использует <code><span class="func">block</span></code> с меткой <code><span class="func">label</span></code>. Естественно, система макросов должна
обеспечивать гигиеничность имён (гарантировать отсутствие коллизий) и для
окружения меток.} с помощью <code><span class="func">block</span></code>:</p>


<!--\indexC*{active-catchers}{*active-catchers*}-->
<!--\indexCS{catch}{с лексическими метками}-->
<!--\indexCS{throw}{c лексическими метками}-->
<pre>(define *active-catchers* '())</p>

<p>(define-syntax throw
  (syntax-rules ()
    ((throw tag value)
     (let* ((label tag)   ; вычисляется единожды
            (escape (assv label *active-catchers*)) ) ; узкое место
       (if (pair? escape)
           ((cdr escape) value)
           (wrong "No associated catch to" label) ) ) ) ) )</p>

<p>(define-syntax catch
  (syntax-rules ()
    ((catch tag . body)
     (let* ((saved-catchers *active-catchers*)
            (result (block label
                      (set! *active-catchers*
                            (cons (cons tag
                                        (lambda (x)
                                          (return-from label x) ) )
                                  *active-catchers* ) )
                      . body )) )
      (set! *active-catchers* saved-catchers)
      result ) ) ) )</pre>

<p>Здесь практически вся стоимость использования <code><span class="func">catch</span></code>\slash<code><span class="func">throw</span></code>
сосредоточена в вызове <code><span class="func">assv</span></code>\footnote{Кстати, в этом случае равенство меток
устанавливается предикатом <code><span class="func">eqv?</span></code>.} при раскрытии макроса <code><span class="func">throw</span></code>.
Рассмотрим, как работает эта реализация. Глобальная переменная (тут она названа
<code><span class="func">*active-catchers*</span></code>) хранит все активные <code><span class="func">catch</span></code>-формы (выполнение которых
ещё не завершилось). Переменная обновляется при выходе из <code><span class="func">catch</span></code> (как
нормальном, так и при помощи <code><span class="func">throw</span></code>). Значением <code><span class="func">*active-catchers*</span></code>
является А-список пар «метка — продолжение». Этот список фактически
соответствует динамическому окружению, которым пользовались исходные <code><span class="func">catch</span></code>
и <code><span class="func">throw</span></code> для обмена информацией о метках.</p>

<p>
\subsection{Метки с динамическим временем жизни}%
\label{escape/forms/ssect:dynamic}</p>

<p>Однако, эта эмуляция не совсем хороша, так как если <code><span class="func">catch</span></code> окажется внутри
<code><span class="func">block</span></code>, то значение переменной <code><span class="func">*active-catchers*</span></code> может быть искажено.
Эмулировать неестественный для языка синтаксис непросто \cite{fel90,bak92c}, так
как это часто требует сложных архитектурных решений, которым необходимы ресурсы
в единоличное пользование (вроде <code><span class="func">*active-catchers*</span></code>). Позже мы покажем, как
подружить <code><span class="func">catch</span></code> и <code><span class="func">block</span></code>, но уже с помощью специального приспособления:
<code><span class="func">unwind-protect</span></code>.\footnote*{Альтернативное решение: эмулировать <code><span class="func">block</span></code>
и <code><span class="func">return-from</span></code> с помощью самих себя таким образом, чтобы они учитывали
<code><span class="func">catch</span></code> и <code><span class="func">throw</span></code>. Это сложновато реализовать прямиком в интерпретаторе,
но вполне возможно.}</p>


<!--\indexR{динамическое связывание}-->
<!--\indexR{продолжения (continuations)!время жизни!динамическое}-->
<p>Как и все объекты Лиспа, продолжения тоже имеют своё время жизни. В эмуляции
<code><span class="func">catch</span></code> с помощью <code><span class="func">block</span></code> видно, что продолжение, захватываемое
<code><span class="func">catch</span></code>, живёт только во время вычислений внутри тела <code><span class="func">catch</span></code>. Это
называется <em class="term">динамическим</em> временем жизни. Такое поведение напоминает
динамические переменные, которые тоже существуют только во время вычислений
внутри связывающей формы, что их создала. Поэтому давайте сделаем список
<code><span class="func">*active-catchers*</span></code> динамической переменной, что позволит использовать
<code><span class="func">catch</span></code> и <code><span class="func">block</span></code> одновременно, так как задача поддержания целостности
списка будет передана механизму динамических переменных.</p>


<!--\indexCS{catch}{с динамическими метками}-->
<!--\indexCS{throw}{с динамическими метками}-->
<pre>(define-syntax throw
  (syntax-rules ()
    ((throw tag value)
     (let* ((label tag)
            (escape (assv label (dynamic *active-catchers*))) )
       (if (pair? escape)
           ((cdr escape) value)
           (wrong "No associated catch to" label) ) ) ) ) )</p>

<p>(define-syntax catch
  (syntax-rules ()
    ((catch tag . body)
     (block label
       (dynamic-let ((*active-catchers*
                      (cons (cons tag (lambda (x)
                                        (return-from label x) ))
                            (dynamic *active-catchers) ) ))
        . body ) ) ) ) )</pre>


<!--\indexR{переходы (escapes)!допустимость}-->
<p>Время жизни метки, создаваемой <code><span class="func">block</span></code> в <span class="logo">Common Lisp</span>, динамическое, так что
на метку можно перейти только внутри тела <code><span class="func">block</span></code>. Точно такая же ситуация
и с <code><span class="func">catch</span></code>. Однако, лексический характер привязки, создаваемой <code><span class="func">block</span></code>,
является источником проблемы, которая не возникает с <code><span class="func">catch</span></code>: если <code><span class="func">throw</span></code>
и <code><span class="func">return-from</span></code> позволяют отбросить оставшиеся вычисления, то эти вычисления
должны существовать в момент совершения перехода. Рассмотрим следующую
программу:</p>

<pre>((block foo
   (lambda (x) (return-from foo x)) )
 33 )</pre>


<!--\indexR{замыкания (closures)!и переходы}-->
<p>Здесь функция-переход на <code><span class="func">foo</span></code> применяется к числу 33, но ведь в момент
применения этой функции уже нет никакой метки <code><span class="func">foo</span></code>, так что мы получаем
ошибку. При создании замыкания оно честно захватило своё окружение, в частности,
метку <code><span class="func">foo</span></code>. Потом это замыкание возвращается как значение <code><span class="func">block</span></code> и мы
выходим из этой формы. Нельзя выйти оттуда ещё раз, перейдя на <code><span class="func">foo</span></code>, так как
вычисления уже завершены. Поэтому во время вызова подобных функций необходимо
проверять, не стало ли сохранённое продолжение уже неактуальным, и выполнять
переход только при соблюдении этого условия. Кроме того, не стоит забывать и
о другом аспекте лексических меток, создаваемых <code><span class="func">block</span></code>. Например:</p>

<pre>(block foo
  (let ((f1 (lambda (x) (return-from foo x))))
    (* 2 (block foo
           (f1 1) )) ) ) |\is| 1</pre>

<p>Сравните это с результатом, который мы получим, сменив "`<code><span class="func">block foo</span></code>"' на
"`<code><span class="func">catch 'foo</span></code>"':</p>

<pre>(catch 'foo
  (let ((f1 (lambda (x) (throw 'foo x))))
    (* 2 (catch 'foo
           (f1 1) )) ) ) |\is| 2</pre>

<p>Функция <code><span class="func">f1</span></code> в данном случае вызовет выход из ближайшей формы <code><span class="func">catch</span></code>,
ожидающей <code><span class="func">foo</span></code>, а не той, которая была видна ей при определении;
соответственно, умножение будет выполнено и верхняя форма <code><span class="func">catch</span></code> получит
значение <code><span class="func">2</span></code>.</p>

<p>
\subsection{\texorpdfstring%
{Сравнение \protect<code><span class="func">catch</span></code> и \protect<code><span class="func">block</span></code>}%
{Сравнение catch и block}}%
\label{escape/forms/ssect:catch-vs-block}</p>


<!--\indexCS{catch}{в сравнении с <code><span class="func">block</span></code>}-->
<!--\indexCS{block}{в сравнении с <code><span class="func">catch</span></code>}-->
<p>С одной стороны, <code><span class="func">catch</span></code> и <code><span class="func">block</span></code> похожи: захватываемые ими продолжения
имеют динамическое время жизни — ими можно пользоваться только внутри
соответствующих блоков. С другой стороны, <code><span class="func">return-from</span></code> всегда обращается
к нужному продолжению, тогда как <code><span class="func">throw</span></code> может их перепутать. Форма
<code><span class="func">block</span></code> более эффективна, так как <code><span class="func">return-from</span></code> не требуется проверять,
действительно ли существует парный ему <code><span class="func">block</span></code>, — это гарантируется
синтаксисом. Тем не менее, ей приходится проверять, можно ли воспользоваться
сохранённым продолжением, хотя чаще всего это тоже можно гарантировать по
исходному коду. Видна явная параллель между динамическими и лексическими метками
с одной стороны и динамическими и лексическими переменными с другой: возникающие
проблемы схожи в обоих случаях.</p>


<!--\indexR{конфликт имён}-->
<!--\indexR{область видимости!конфликт имён}-->
<p>Динамические метки могут конфликтовать между собой — лексические же
в принципе не могут мешать друг другу. Взять хотя бы возможность использовать
динамические метки где угодно: одна функция может случайно перехватить то, что
предназначалось другой. Например:</p>

<pre>(define (foo)
  (catch 'foo (* 2 (bar))) )</p>

<p>(define (bar)
  (+ 1 (throw 'foo 5)) )</p>

<p>(foo) |\is| 5</pre>

<p><code><span class="func">block</span></code> ограничивает область видимости метки лишь своим телом, тогда как
<code><span class="func">catch</span></code> отзывается на подходящий <code><span class="func">throw</span></code> из любого уголка программы.
Поэтому можно будет сделать <code><span class="func">(throw 'foo ...)</span></code> где угодно в процессе
вычисления <code><span class="func">(* 2 (bar))</span></code> и это сработает. Использование "`<code><span class="func">catch 'foo</span></code>"'
вместо "`<code><span class="func">block foo</span></code>"' естественно приведёт к ошибке, так как
<code><span class="func">return-from</span></code> понятия не имеет о <code><span class="func">(block foo ...)</span></code> в функциях, которые
вызывают <code><span class="func">bar</span></code>. Но это ещё безобидный пример. Рассмотрим следующую ситуацию.</p>

<p>\begin{code:lisp}[label=escape/forms/catch-vs-block/p:better-map]
(catch 'not-a-pair
  (better-map (lambda (x)
                (or (pair? x)
                    (throw 'not-a-pair x) ) )
              (hack-and-return-list) ) )</pre>

<p>Предположим, мы услышали от бабушек на лавочке, что <code><span class="func">better-map</span></code> гораздо
лучше <code><span class="func">map</span></code>; далее допустим, что мы рискнём использовать именно её, чтобы
быстро проверить, действительно ли <code><span class="func">(hack-and-return-list)</span></code> возвращает
список, состоящий из пар; наконец предположим, что мы не знаем, как реализована
<code><span class="func">better-map</span></code>, хотя на самом деле она выглядит вот так:</p>


<!--\indexC{better-map}-->
<pre>(define (better-map f L)
  (define (loop L1 L2 flag)
    (if (pair? L1)
        (if (eq? L1 L2)
            (throw 'not-a-pair L)
            (cons (F (car L1))
                  (loop (cdr L1)
                        (if flag (cdr L2) L2)
                        (not flag) ) ) ) ) )
  (loop L (cons 'ignore L) #t) )</pre>

<p>Функция <code><span class="func">better-map</span></code> интересна тем, что в отличие от <code><span class="func">map</span></code> она не зависает
намертво на замкнутых списках (при правильном использовании). Если
<code><span class="func">(hack-and-return-list)</span></code> возвращает следующий список: <code><span class="func">\#1=((foo . hack)
. \#1\#)</span></code>,\footnote*{Здесь используется нотация <span class="logo">Common Lisp</span> для рекурсивных
структур данных. Такой список в Scheme возвращает выражение <code><span class="func">(let ((p (list
(cons 'foo 'hack)))) (set-cdr! p p) p)</span></code>.} то <code><span class="func">better-map</span></code> прыгнет на
ближайшую метку <code><span class="func">not-a-pair</span></code> и таким образом избежит бесконечного цикла. Но
вот незадача: замыканию, переданному в <code><span class="func">better-map</span></code>, эта метка тоже нужна.
Конечно, если в документации к <code><span class="func">better-map</span></code> будет написано, что она
использует такую метку, то конфликт имён можно устранить, использовав
какое-нибудь другое имя для своих целей. Благо, в случае <code><span class="func">catch</span></code> можно
использовать что угодно в качестве метки, в частности, список, собранный
специально для этого случая:</p>

<pre>(let ((tag (list 'not-a-pair)))
  (catch tag
    (better-map (lambda (x)
                  (or (pair? x)
                      (throw tag x) ) )
                (hack-and-return-list) ) ) )</pre>

<div class="bigskip"/>

<p>Наконец, рассмотрим, как можно проэмулировать <code><span class="func">block</span></code> с помощью <code><span class="func">catch</span></code>
(естественно, выигрыша в производительности мы не получим). Для этого достаточно
обеспечить лексичность используемых меток.</p>


<!--\indexCS{block}{определение через <code><span class="func">catch</span></code>}-->
<!--\indexCS{return-from}{определение через <code><span class="func">throw</span></code>}-->
<pre>(define-syntax block
  (syntax-rules ()
    ((block label . body)
     (let ((label (list 'label)))
       (catch label . body) ) ) ) )
(define-syntax return-from
  (syntax-rules ()
    ((return-from label value)
     (throw label value) ) ) )</pre>

<p>Макрос <code><span class="func">block</span></code> создаёт уникальную метку и лексически связывает её
с одноимённой переменной. Этим мы гарантируем, что нужную метку будут видеть
только те <code><span class="func">return-from</span></code>, которые лексически находятся внутри формы
<code><span class="func">block</span></code>. Правда, для этого используется имя <code><span class="func">label</span></code>, что опять может
вызвать конфликты. Конечно, можно воспользоваться чем-то вроде <code><span class="func">gensym</span></code>,
достаточно лишь удостовериться, что <code><span class="func">catch</span></code> и <code><span class="func">throw</span></code> используют
одинаковые метки.</p>

<p>
\subsection{Метки с неограниченным временем жизни}%
\label{escape/forms/ssect:immortal}</p>


<!--\indexR{переходы (escapes)!неограниченные}-->
<!--\indexR{оператор $J$}-->
<!--\indexE{J, оператор@$J$, оператор}-->
<p>Диалект Scheme, появившийся около 1975 года, предложил дать продолжениям,
захватываемым <code><span class="func">catch</span></code> и <code><span class="func">block</span></code>, неограниченное время жизни. Это свойство
открыло поразительные возможности их использования. Позже, в соответствии
с догматом о минимальном количестве специальных форм, были предприняты попытки
выразить захват продолжений и сами продолжения как функции. В <span class="cite">[<a href="z1_bibliography.xhtml#lan65">lan65</a>]</span>
Питер Лэндин предложил оператор $J$\!, прямым потомком которого является
функция <code><span class="func">call/cc</span></code> в Scheme.</p>


<!--\indexCS{call/cc}{определение}-->
<!--\indexR{продолжения (continuations)!захват}-->
<p>Мы попробуем объяснить её синтаксис настолько просто, насколько это возможно.
Во-первых, она захватывает продолжения, так что это должна быть форма, где
доступно продолжение её вызова:</p>

<pre>|\cont*{k}|(...)</pre>

<p>Далее, это должна быть функция. Назовём её <code><span class="func">call/cc</span></code>:</p>

<pre>|\cont*{k}|(call/cc ...)</pre>

<p>Теперь, когда мы захватили \ii{k}, его нужно как-то передать пользователю.
Но как? Очевидно, нельзя вернуть \ii{k} как значение <code><span class="func">call/cc</span></code>, потому что
это бессмысленно. Оно ожидается внутри какого-то вычисления, так что можно это
вычисление обернуть в унарную функцию,\footnote*{В Scheme достаточно, чтобы
функция могла принять как минимум один аргумент. То есть с <code><span class="func">(call/cc list)</span></code>
никаких проблем нет.} принимающую \ii{k}, которую и передать внутрь
<code><span class="func">call/cc</span></code>:</p>

<pre>|\cont*{k}|(call/cc (lambda (k) ...))</pre>


<!--\indexR{полноценные объекты!продолжения}-->
<!--\indexR{продолжения (continuations)!как полноценные объекты}-->
<!--\indexR{продолжения (continuations)!как замыкания}-->
<!--\indexR{реификация}-->
<p>Продолжение \ii{k} становится объектом первого класса, к которому применяется
функция-аргумент <code><span class="func">call/cc</span></code>. Аналогично, само продолжение \ii{k} тоже является
унарной функцией, которая неотличима от замыканий, создаваемых <code><span class="func">lambda</span></code>.
Функция <code><span class="func">call/cc</span></code> <em class="term">реифицирует</em> продолжение \ii{k} в полноценный объект,
который становится значением переменной <code><span class="func">k</span></code>. Достаточно вызвать
функцию <code><span class="func">k</span></code>, чтобы передать её аргумент форме, вызвавшей <code><span class="func">call/cc</span></code>:</p>

<pre>|\cont*{k}|(call/cc (lambda (k) (+ 1 (k 2)))) |\is| 2</pre>


<!--\indexC{continue}-->
<p>Можно было бы создать особый объект «продолжение». Тогда их уже не получится
вызывать как функции, для этого необходимо специальное средство передачи
управления: функция <code><span class="func">continue</span></code>. Пример выше записывался бы тогда так:</p>

<pre>|\cont*{k}|(call/cc (lambda (k) (+ 1 (continue k 2)))) |\is| 2</pre>

<p>Тем не менее, даже в этом случае можно легко сделать продолжение функцией,
обернув его в \ic{(lambda (v) (continue \ii{k} v))}. Некоторым людям нравится
использовать развёрнутую форму, так как она делает переход более заметным.</p>

<p>Вот и всё. Осталось только самое сложное — запомнить полное имя этой функции:
<code><span class="func">call-with-current-continuation</span></code>. А теперь давайте перепишем наш пример
с двоичным деревом, используя <code><span class="func">call/cc</span></code>:</p>


<!--\indexCS{find-symbol}{с переходами}-->
<pre>(define (find-symbol id tree)
  (call/cc
   (lambda (exit)
     (define (find tree)
       (if (pair? tree)
           (or (find (car tree))
               (find (cdr tree)) )
           (if (eq? tree id) (exit #t) #f) ) )
     (find tree) ) ) )</pre>

<p>Продолжение вызова функции <code><span class="func">find-symbol</span></code> захватывается и превращается
в унарную функцию, связываемую с переменной <code><span class="func">exit</span></code>. Как только мы находим
нужный символ, поиск прерывается вызовом <code><span class="func">exit</span></code>, после чего мы никогда уже
не возвращаемся внутрь <code><span class="func">find-symbol</span></code>, так как дальше продолжаются вычисления,
следующие после вызова <code><span class="func">find-symbol</span></code>.</p>

<p>\phantomlabel{escape/forms/immortal/par:reincarnate}
<!--\indexR{продолжения (continuations)!время жизни!неограниченное}-->
<!--\indexR{присваивание!роль для продолжений}-->
В этом примере не очевидна неограниченность времени жизни продолжения, потому
что оно используется исключительно внутри самой же формы <code><span class="func">call/cc</span></code>. Но теперь
мы можем сохранить продолжение в любой переменной, чего нельзя сделать с меткой
<code><span class="func">block</span></code>/<code><span class="func">catch</span></code>.</p>


<!--\indexC{fact}-->
<pre>(define (fact n)
  (let ((r 1) (k 'void))
    (call/cc (lambda (c) (set! k c) 'void))
    (set! r (* r n))
    (set! n (- n 1))
    (if (= n 1) r (k 'recurse)) ) )</pre>

<p>\noindent
Продолжение, которое передаётся через <code><span class="func">c</span></code> и сохраняется в <code><span class="func">k</span></code>, выглядит
так:</p>

<pre>|\ii{k}| = (lambda (|\ii{u}|)
      (set! r (* r n))
      (set! n (- n 1))
      (if (= n 1) r (k 'recurse)) )|\begin{where}
                                    \- r {\is} 1
                                    \- k {\is} \ii{k}
                                    \- n
                                    \end{where}|</pre>

<p>Это же продолжение \ii{k} связано с переменной <code><span class="func">k</span></code> внутри самого себя.
Рекурсия, как мы знаем, всегда означает какой-то цикл; в данном случае <code><span class="func">k</span></code>
вызывается до тех пор, пока <code><span class="func">n</span></code> не достигнет желаемого значения. Всё это
вместе, естественно, вычисляет факториал.</p>

<p>В этом примере продолжение \ii{k} используется вне создавшей его формы
<code><span class="func">call/cc</span></code>. Кстати, можно избавиться от избыточных переменных и аргументов,
просто возвращая это продолжение:</p>

<pre>(define (fact n)
  (let ((r 1) (k (call/cc (lambda (c) c))))
    (set! r (* r n))
    (set! n (- n 1))
    (if (= n 1) r (k k)) ) )</pre>

<p><em class="term">Самоприменение</em> <code><span class="func">(k k)</span></code> необходимо, так как нам необходимо поддерживать
правильное значение <code><span class="func">k</span></code>. Это продолжение можно записать так:</p>

<pre>(lambda (|\ii{u}|)
  (let ((k |\ii{u}|))
    (set! r (* r n))
    (set! n (- n 1))
    (if (= n 1) r (k k)) ) )|\begin{where}
                             \- r {\is} 1
                             \- n
                             \end{where}|</pre>


<!--\indexR{продолжения (continuations)!сложность реализации}-->
<!--\indexR{стек!и продолжения}-->
<p>Неограниченность времени жизни усложняет реализацию продолжений и в общем случае
увеличивает стоимость их использования. (См. \cite{cho88,hdb90,mat92}.) Почему?
Потому, что в таком случае вложенные вычисления уже нельзя представлять в виде
стека, здесь требуется дерево. Если продолжения имеют исключительно динамическое
время жизни, то это просто переходы: с их помощью можно покинуть текущие
вычисления, но только один раз. В этом случае легко понять, когда вычисление
формы начинается и заканчивается: начинается при входе в неё, а заканчивается
с последним выражением или первым встреченным переходом.</p>


<!--\indexR{возвращаемые значения!многократно}-->
<!--\indexR{продолжения (continuations)!множественные возвраты}-->
<p>Если же продолжения живут неограниченно долго, то всё гораздо усложняется.
Вспомните форму <code><span class="func">(call/cc ...)</span></code> в примере с факториалом: она фактически
возвращает результат несколько раз. Если допускать такую возможность
(многократного возврата значений\footnote{Здесь ударение стоит на слове
«<em>возврат</em>», а не «значений». Функция <code><span class="func">values</span></code> не имеет никакого
отношения к <code><span class="func">call/cc</span></code>.}), то уже не получится считать, что выполнение
функции окончено, когда она вернула значение.</p>


<!--\indexR{память!и \protect<code><span class="func">call/cc</span></code>}-->
<p><code><span class="func">call/cc</span></code> могущественна и в некотором смысле может манипулировать временем.
Программа прожила какой-то промежуток времени, наделала ошибок и решила взять
вторую попытку, перепрыгнув назад в прошлое (при этом она заранее предусмотрела
такой исход и оставила метку в нужном ей моменте времени). При этом она забирает
с собой весь прожитый опыт (свою память), так что вычисления после прыжка пойдут
уже другим путём. Естественно, ничто не запрещает ей сделать и третью попытку
или использовать эту силу не только для исправления ошибок, но и для собственной
выгоды.</p>


<!--\indexC{goto}-->
<p>С другой стороны, форма <code><span class="func">call/cc</span></code> очень похожа на оператор <code><span class="func">goto</span></code>, который
\english{considered harmful}. Однако <code><span class="func">call/cc</span></code> более ограничена, так как
позволяет лишь <em>вернуться</em> в те места программы, где мы уже были, но
<em>не отправиться</em> туда, где нас никогда не было.</p>

<p>Вначале бывает нелегко научиться пользоваться <code><span class="func">call/cc</span></code>, так как и её
аргумент, и продолжение являются унарными функциями. Возможно, в таком случае
вам поможет понимание <code><span class="func">call/cc</span></code> следующим образом:</p>

<pre>|\cont*{k}|(call/cc |$\phi$|) |\is| |\cont*{k}|(|$\phi$| |\ii{k}|)</pre>

<p>\noindent
где \ii{k} является продолжением вызова <code><span class="func">call/cc</span></code>, а $\phi$ — какой-то
унарной функцией. Вызов <code><span class="func">call/cc</span></code> лишь превращает \ii{k} в объект языка,
который можно передать как аргумент. Заметьте, что продолжением вызова $\phi$
является всё так же \ii{k}, поэтому для того, чтобы просто вернуть результат,
не обязательно пользоваться переданным продолжением:</p>

<pre>(call/cc (lambda (k) 1515)) |\is| 1515</pre>

<p>Кого-то такое умолчательное поведение может расстраивать. В некоторых языках
<code><span class="func">call/cc</span></code> изымает захватываемое продолжение \ii{k} из хода вычислений: \ii{k}
больше не является её собственным продолжением, и для возврата значения
последующим вычислениям его надо обязательно явно передать правильному
продолжению:</p>

<pre>(call/cc (lambda (k) (k 1615))) |\is| 1615</pre>


<!--\indexR{продолжения (continuations)!терминальное продолжение}-->
<!--\indexR{терминальное продолжение}-->
<p>Если этого не сделать, то продолжением формы <code><span class="func">call/cc</span></code> будет нечто, подобное
чёрной дыре: $\lambda u.\bullet$. Оно поглощает все вычисления вместе
с передаваемым значением. Ничто и никогда не возвращается назад, попав в чёрную
дыру. Исполнение программы состоит из вызовов функций, а они похожи на дыхание:
вдох-выдох — вход-выход. Необходимым условием жизни является
<em>продолжение</em> дыхания. Используя <code><span class="func">call/cc</span></code>, мы вмешиваемся в нормальный
ход исполнения, так что без определённых предосторожностей можно всерьёз забыть,
как дышать, и умереть.</p>

<h3 id="escape/forms/ssect:protection">Защитные формы</h3>


<!--\indexC{unwind-protect}-->
<!--\indexC{car}-->
<!--\indexC{cdr}-->
<p>Осталось рассмотреть ещё один эффект, относящийся к продолжениям. Связан он
со специальной формой <code><span class="func">unwind-protect</span></code>. Названием она обязана принципу первой
реализации\footnote{Тут та же ситуация, что и с <code><span class="func">car</span></code> и <code><span class="func">cdr</span></code>, которые
являются акронимами от «\english{contents of the address register}» и
«\english{contents of the decrement register}» — с помощью данных
примитивов обрабатывались точечные пары в оригинальной реализации Лиспа для
IBM 704. Это не имеет ничего общего с текущими реализациями, но названия
приклеились.} и задуманному функциональному назначению. Вот синтаксис этой
формы:</p>

<pre>(unwind-protect |\ii{форма}|
  |\ii{формы-уборщики}|... )</pre>

<p>Сначала вычисляется \ii{форма}, её значение станет значением всей формы
<code><span class="func">unwind-protect</span></code>. Как только значение \ii{формы} получено, вычисляются
\ii{формы-уборщики}, и только потом <code><span class="func">unwind-protect</span></code> возвращает ранее
вычисленное значение. Она похожа на <code><span class="func">prog1</span></code> из <span class="logo">Common Lisp</span> или <code><span class="func">begin0</span></code>
из некоторых версий Scheme, которые последовательно вычисляют формы подобно
<code><span class="func">begin</span></code>, но возвращают значение первой из них, а не последней. Вот только
<code><span class="func">unwind-protect</span></code> гарантирует выполнение \ii{уборщиков} даже в случае, если
вычисление \ii{формы} было прервано переходом. Поэтому:</p>

<pre>(let ((a 'on))          |\dialect<span class="logo">Common Lisp</span>|
  (cons (unwind-protect (list a)
          (setq a 'off) )
        a ) ) |\is| ((on) . off)</p>

<p>(block foo
  (unwind-protect (return-from foo 1)
    (print 2) ) ) |\is| 1 ; и печатает <code><span class="func">2</span></code></pre>

<p>Данная форма полезна, когда состояние системы должно быть восстановлено вне
зависимости от результата производимых действий. Например, когда мы читаем файл,
то в конце он должен быть закрыт в любом случае. Другим примером является
эмуляция <code><span class="func">catch</span></code> с помощью <code><span class="func">block</span></code>. Если данные формы используются
одновременно, то возможна рассинхронизация состояния <code><span class="func">*active-catchers*</span></code>.
Этот недостаток можно исправить с помощью <code><span class="func">unwind-protect</span></code>, гарантируя
восстановление <code><span class="func">*active-catchers*</span></code>:</p>


<!--\indexCS{catch}{с помощью <code><span class="func">unwind-protect</span></code>}-->
<pre>(define-syntax catch
  (syntax-rules ()
    ((catch tag . body)
     (let ((saved-catchers *active-catchers*))
       (unwind-protect
         (block label
           (set! *active-catchers*
                 (cons (cons tag (lambda (x) (return-from label x)))
                       *active-catchers*) )
           . body )
         (set! *active-catchers* saved-catchers) ) ) ) ) )</pre>

<p>Что бы ни случилось, теперь <code><span class="func">*active-catchers*</span></code> будет иметь корректное
состояние при выходе из тела формы. Форму <code><span class="func">block</span></code> можно использовать внутри
<code><span class="func">catch</span></code> не опасаясь, что <code><span class="func">catch</span></code> не удалится из <code><span class="func">*active-catchers*</span></code>,
так как теперь за этим следит <code><span class="func">unwind-protect</span></code>. Это гораздо лучше, хотя всё
ещё не идеально: <code><span class="func">*active-catchers*</span></code> доступна не только <code><span class="func">catch</span></code> и
<code><span class="func">throw</span></code>, так что её состояние всё равно можно исказить (случайно или
намеренно).</p>

<p>Форма <code><span class="func">unwind-protect</span></code> обеспечивает защиту системы от противоречий, выполняя
определённые действия после завершения вычислений. Следовательно, эта форма
обязана знать, когда именно они завершаются. Но в присутствии продолжений
с неограниченным временем жизни <code><span class="func">unwind-protect</span></code> не может легко ответить на
этот вопрос.\footnote*{Правильно работающий аналог <code><span class="func">unwind-protect</span></code> для
Scheme — <code><span class="func">dynamic-wind</span></code>, — был описан ещё в <span class="cite">[<a href="z1_bibliography.xhtml#fwh92">fwh92</a>]</span>;
см. также <span class="cite">[<a href="z1_bibliography.xhtml#que93c">que93c</a>]</span>.}</p>

<p>Как мы уже не раз говорили, семантика управляющих структур далека от точного
определения. Рассмотрим лишь несколько примеров, где нельзя однозначно сказать,
какой мы получим результат:</p>

<pre>(block foo
  (unwind-protect (return-from foo 1)
    (return-from foo 2) ) )                          |\is| |\ii{?}|</p>

<p>(catch 'bar
  (block foo
    (unwind-protect (return-from foo (throw 'bar 1))
      (throw 'something (return-from foo 2)) ) ) )   |\is| |\ii{?}|</pre>


<!--\indexCS{unwind-protect}{проблемы семантики}-->
<p>Конечно, стремление к более точным определениям управляющих структур
естественно, однако нельзя игнорировать очевидную неопределённость, привносимую
продолжениями в понятие «после вычислений». Не всё можно выяснить только по
исходному коду. Продолжения по определению <em>динамичны</em>, так как являются
воплощением потока исполнения. Рассмотрим следующий пример:</p>

<pre>(block bar
  (unwind-protect (return-from bar 1)
    (block foo |$\pi$|) ) )</pre>

<p>\phantomlabel{escape/forms/protection/p:discard}
<code><span class="func">unwind-protect</span></code> вклинивается в поток исполнения и не даёт завершить переход,
который выполняется в охраняемой ей форме. Вместо этого данный переход
становится продолжением формы <code><span class="func">(block foo ...)</span></code>. Если она просто вернёт
результат, то это продолжение активируется и форма <code><span class="func">(block bar ...)</span></code>
передаст <code><span class="func">1</span></code> своему продолжению. Если же внутри $\pi$ будет выполнен переход,
то данное продолжение должно быть отброшено и заменено продолжением перехода.
В этом случае из-за <code><span class="func">unwind-protect</span></code> «после вычислений <code><span class="func">(return-from
bar 1)</span></code>» не наступает вообще. (Мы обсудим этот феномен позже вместе деталями
реализации данной формы.)</p>

<div class="bigskip"/>

<p>Конечно же, есть и другие управляющие формы. Особенно их жалует <span class="logo">Common Lisp</span>,
в котором реализована даже старая <code><span class="func">prog</span></code>, только под названием <code><span class="func">tagbody</span></code>.
Её можно легко проэмулировать с помощью <code><span class="func">labels</span></code> и <code><span class="func">block</span></code>.
\seeEx[escape/ex:tagbody] Интересным фактом является то, что если продолжения
имеют исключительно динамическое время жизни, то для реализации любого
управления потоком исполнения достаточно форм <code><span class="func">block</span></code>, <code><span class="func">return-from</span></code> и
<code><span class="func">unwind-protect</span></code>. Аналогично, для продолжений с неограниченным временем жизни
достаточно одной <code><span class="func">call/cc</span></code>. Очевидно, что мы не сможем легко реализовать
<code><span class="func">call/cc</span></code>, имея лишь продолжения с динамическим временем жизни. Обратное
вполне возможно, хотя это и стрельба из пушки по воробьям. Способ станет вполне
очевидным после рассмотрения реализации интерпретатора с явными продолжениями.</p>

<p>
\subsubsection{Защита и динамические переменные}</p>


<!--\indexC{fluid-let}-->
<!--\indexCS{unwind-protect}{динамические переменные}-->
<!--\indexR{динамические переменные!\protect<code><span class="func">unwind-protect</span></code>}-->
<p>Некоторые реализации Scheme обеспечивают динамическое время жизни переменных
не так, как мы показывали ранее. Они делают это с помощью <code><span class="func">unwind-protect</span></code>
или аналогичного механизма. Идея состоит в том, чтобы «одолжить» нужную
лексическую переменную, восстановив впоследствии её значение обратно. Подобные
динамические переменные реализуются с помощью формы <code><span class="func">fluid-let</span></code>:</p>

<p>{\def\A{\hbox to 0pt{$\alpha$}}
\def\B{\hbox to 0pt{$\beta$}}
\def\E{\hbox to 0pt{\kern0.15em$\equiv$}}
\def\T{\hbox to 0pt{\ii{tmp}}}
\begin{code:lisp}
(fluid-let ((x |$\alpha$|)) |\E|   (let ((|\T|    x))
  |\B| ... )                (set! x |\A| )
                        (unwind-protect
                          (begin |\B| ...)
                          (set! x |\T|   ) ) )
\end{code:lisp}}</p>

<p>В процессе вычисления $\beta$ будет видна переменная <code><span class="func">x</span></code>
со значением $\alpha$; предыдущее значение <code><span class="func">x</span></code> сохраняется на время
вычислений в локальной переменной \ii{tmp} и восстанавливается после их
завершения. Это подразумевает, что есть такая лексическая переменная <code><span class="func">x</span></code>,
которой можно воспользоваться. Обычно она глобальная, чтобы её было видно
отовсюду. Если она будет локальной, то её поведение будет (значительно)
отличаться от должного поведения динамической переменной в <span class="logo">Common Lisp</span>: ведь
тогда она будет правильно работать внутри <code><span class="func">fluid-let</span></code>, но не в связывающих
формах, вложенных во <code><span class="func">fluid-let</span></code>. Далее, очевидно, что такие переменные тоже
не дружат с <code><span class="func">call/cc</span></code>. В итоге получается нечто ещё более хитрое, нежели
обычные динамические переменные <span class="logo">Common Lisp</span>.</p>

<h2 id="escape/sect:actors">Участники вычислений</h2>


<!--\indexR{вычисления!контекст}-->
<!--\indexR{контекст вычислений}-->
<p>Сейчас мы считаем, что для проведения вычислений необходимы три вещи: выражение,
окружение и продолжение. Тактическая цель вычислений: определить значение
выражения в окружении. Стратегическая — передать это значение продолжению.</p>


<!--\indexR{записи активации}-->
<!--\indexR{фреймы стека}-->
<!--\indexR{стековые фреймы}-->
<p>Мы определим новый интерпретатор, чтобы показать, какие продолжения нужны на
каждом этапе вычислений. Так как обычно продолжения представляются снимками
фреймов стека (или записей активаций), то мы будем использовать объекты для
представления этих сущностей внутри разрабатываемого интерпретатора.</p>

<h3 id="escape/actors/ssect:review">Краткий обзор объектов</h3>


<!--\indexR{объекты}-->
<!--\indexE{Meroon@\protect\MeroonMeroonet!вводное описание}-->
<p>В этом разделе мы не будем детально разбирать устройство объектной системы,
отложив эту задачу до одиннадцатой главы. Здесь рассматриваются лишь три макроса
и несколько правил именования. Такие макросы выражают суть объектов и в том
или ином виде присутствуют в любой объектной системе любого языка. Объекты же
используются для того, чтобы подсказать удобный вариант реализации продолжений.
Уж очень хорошо понятие записи активации, инкапсулирующей различные данные,
связанные с вызовами подпрограмм, укладывается в концепцию объектов с полями.
Также у нас будет в распоряжении наследование, которое поможет вынести общие
части реализации за скобки, уменьшая таким образом размер интерпретатора.</p>

<p>Я полагаю, что вы знакомы с философией, терминологией и подходами
объектно-ориентированного программирования, так что будет достаточно показать,
как здесь записываются известные вам идиомы, которые мы будем использовать.</p>


<!--\indexR{классы}-->
<!--\indexR{методы}-->
<!--\indexR{обобщённые функции}-->
<!--\indexR{функции!обобщённые}-->
<p>Объекты группируются в <em class="term">классы</em>; объекты одного класса имеют одинаковые
<em class="term">методы</em>; сообщения посылаются с помощью <em class="term">обобщённых функций</em>,
популяризованных Common Loops <span class="cite">[<a href="z1_bibliography.xhtml#bkk+86">bkk+86</a>]</span>, CLOS <span class="cite">[<a href="z1_bibliography.xhtml#bdg+88">bdg+88</a>]</span> и
\TELOS <span class="cite">[<a href="z1_bibliography.xhtml#pnb93">pnb93</a>]</span>. Для нас важнейшей возможностью объектно-ориентированного
программирования является отделение обработки различных специальных форм и
примитивных функций от ядра интерпретатора. Но всё имеет свою цену: в этом
случае будет сложнее увидеть картину целиком, так как обработка будет размазана
по нескольким местам.</p>

<p>
\subsubsection{Определение классов}</p>


<!--\indexC{define-class}-->
<p>Классы определяется с помощью <code><span class="func">define-class</span></code> следующим образом:</p>

<pre>(define-class |\ii{класс}| |\ii{суперкласс}|
  (|\ii{поля}|...) )</pre>


<!--\indexR{поля}-->
<!--\indexR{аксессоры}-->
<p>Эта форма определяет класс с именем \ii{класс}, который наследует поля и методы
\ii{суперкласса}, а также имеет свои собственные \ii{поля}. Вместе с классом
создаётся набор вспомогательных функций. Функция \ic{make-\ii{класс}} создаёт
объекты этого класса; количество и порядок её аргументов соответствуют порядку
указания полей при определении класса. Названия аксессоров чтения состоят из
имени класса и имени поля, разделённых дефисом. Названия аксессоров записи
аналогичны аксессорам чтения, только с <code><span class="func">set-</span></code> в начале и восклицательным
знаком в конце. Возвращаемое значение аксессоров записи не определено. Предикат
\ic{\ii{класс}?} проверяет, является ли объект экземпляром данного класса.</p>


<!--\indexC{Object}-->
<p>Корнем иерархии наследования является класс <code><span class="func">Object</span></code>, не имеющий полей.</p>

<p>Например, определение</p>

<pre>(define-class continuation Object (k))</pre>

<p>\noindent
создаст следующие функции:</p>

<pre>(make-continuation k)         ; конструктор
(continuation-k c)            ; аксессор чтения
(set-continuation-k! c k)     ; аксессор записи
(continuation? k)             ; предикат принадлежности</pre>

<p>
\subsubsection{Определение обобщённых функций}</p>


<!--\indexC{define-generic}-->
<!--\indexR{обобщённые функции}-->
<p>Обобщённые функции определяются следующим образом:</p>

<pre>(define-generic (|\ii{функция}| |\ii{аргументы}|)
  |\textrm{$[$\ic{\ii{трактовка-по-умолчанию}...}$]$}|)</pre>


<!--\indexR{дискриминант}-->
<!--\indexR{обобщённые функции!дискриминант}-->
<p>Эта форма определяет обобщённую \ii{функцию}; формы
\ii{трак\-товки-по-умол\-чанию} станут её телом, если при вызове функции
не найдётся подходящего специализированного варианта. Список аргументов
указывается как обычно, за исключением того, что один из них является
<em class="term">дискриминантом</em>; дискриминант записывается в скобках:</p>

<pre>(define-generic (invoke (f) v* r k)
  (wrong "Not a function" f r k) )</pre>

<p>Таким образом определяется обобщённая функция <code><span class="func">invoke</span></code>, для которой можно
в последующем задать специализированные варианты. Данная функция имеет четыре
аргумента, первый из них — <code><span class="func">f</span></code> — это дискриминант. Если для
класса <code><span class="func">f</span></code> не найдётся специализированного варианта функции (метода
класса <code><span class="func">f</span></code>), то будет выбран вариант по умолчанию: вызов <code><span class="func">wrong</span></code>.</p>

<p>
\subsubsection{Определение методов}</p>


<!--\indexC{define-method}-->
<p>Форма <code><span class="func">define-method</span></code> используется для специализации обобщённых функций
конкретными методами.</p>

<pre>(define-method (|\ii{функция}| |\ii{аргументы}|)
  |\ii{тело}|... )</pre>

<p>Аргументы указываются аналогично <code><span class="func">define-generic</span></code>. Класс дискриминанта, для
которого создаётся метод, указывается после него. Например, мы можем создать
метод <code><span class="func">invoke</span></code> для класса <code><span class="func">primitive</span></code> следующим образом:</p>

<pre>(define-method (invoke (f primitive) v* r k)
  ((primitive-address f) v* r k) )</pre>

<p>На этом мы заканчиваем обзор объектной системы и переходим к написанию
интерпретатора. Детали реализации, а также другие возможности объектов будут
рассмотрены в одиннадцатой главе. Здесь мы ограничимся наиболее простыми и
известными из них, чтобы облегчить понимание и уменьшить количество возможных
проблем.</p>

<h3 id="escape/actors/ssect:interpreter">Интерпретатор</h3>


<!--\indexR{соглашения именования}-->
<!--\indexE{e @\protect<code><span class="func">e</span></code> (выражения)}-->
<!--\indexE{r @\protect<code><span class="func">r</span></code> (лексическое окружение)}-->
<!--\indexE{k @\protect<code><span class="func">k</span></code> (продолжения)}-->
<!--\indexE{v @\protect<code><span class="func">v</span></code> (значения)}-->
<!--\indexE{f @\protect<code><span class="func">f</span></code> (функции)}-->
<!--\indexE{n @\protect<code><span class="func">n</span></code> (идентификаторы)}-->
<p>Функция <code><span class="func">evaluate</span></code> имеет три аргумента: выражение, окружение и продолжение.
Начинает она свою работу с выяснения смысла выражения, чтобы выбрать правильный
метод его вычисления, который хранится в специализированной функции. Перед тем,
как продолжить, давайте договоримся о правилах именования переменных, которых
теперь будет довольно много. Первое правило: сущность «список \ii{x}» будем
называть \ic{\ii{x}*}. Второе: сущности интерпретатора будем называть
одной-двумя буквами для краткости:</p>

<p>\begin{center}\begin{tabular}{>{\raggedleft}p{0.3\textwidth}p{0.6\textwidth}}
<code><span class="func">e</span></code>, <code><span class="func">et</span></code>, <code><span class="func">ec</span></code>, <code><span class="func">ef</span></code> & выражения, формы                          \\
                           <code><span class="func">r</span></code> & окружения                                 \\
                  <code><span class="func">k</span></code>, <code><span class="func">kk</span></code> & продолжения                               \\
                           <code><span class="func">v</span></code> & значения (числа, пары, замыкания и т. д.)\\
                           <code><span class="func">f</span></code> & функции                                   \\
                           <code><span class="func">n</span></code> & идентификаторы
\end{tabular}\end{center}</p>

<p>
Всё, теперь принимаемся за интерпретатор. Для простоты он считает все атомы,
кроме переменных, автоцитированными значениями.</p>


<!--\indexC{evaluate}-->
<pre>(define (evaluate e r k)
  (if (atom? e)
      (cond ((symbol? e) (evaluate-variable e r k))
            (else        (evaluate-quote e r k)) )
      (case (car e)
        ((quote)  (evaluate-quote (cadr e) r k))
        ((if)     (evaluate-if (cadr e) (caddr e) (cadddr e) r k))
        ((begin)  (evaluate-begin (cdr e) r k))
        ((set!)   (evaluate-set! (cadr e) (caddr e) r k))
        ((lambda) (evaluate-lambda (cadr e) (cddr e) r k))
        (else     (evaluate-application (car e) (cdr e) r k)) ) ) )</pre>

<p>Собственно интерпретатор состоит из трёх функций: <code><span class="func">evaluate</span></code>, <code><span class="func">invoke</span></code> и
<code><span class="func">resume</span></code>. Две последние являются обобщёнными и знают, как вызывать вызываемое
и продолжать продолжаемое. Все вычисления в конечном счёте сводятся к обмену
значениями между этими функциями. Вдобавок мы введём ещё две полезные обобщённые
функции для работы с переменными: <code><span class="func">lookup</span></code> и <code><span class="func">update!</span></code>.</p>


<!--\indexC{invoke}-->
<!--\indexC{resume}-->
<!--\indexC{lookup}-->
<!--\indexC{update"!}-->
<pre>(define-generic (invoke (f) v* r k)
  (wrong "Not a function" f r k) )</p>

<p>(define-generic (resume (k continuation) v)
  (wrong "Unknown continuation" k) )</p>

<p>(define-generic (lookup (r environment) n k)
  (wrong "Not an environment" r n k) )</p>

<p>(define-generic (update! (r environment) n k v)
  (wrong "Not an environment" r n k) )</pre>

<p>Все сущности, которыми мы будем оперировать, наследуются от трёх базовых
классов:</p>


<!--\indexC{value}-->
<!--\indexC{environment}-->
<!--\indexC{continuation}-->
<pre>(define-class value        Object ())
(define-class environment  Object ())
(define-class continuation Object (k))</pre>

<p>Классы значений являются наследниками <code><span class="func">value</span></code>, классы окружений —
наследники <code><span class="func">environment</span></code>, классы продолжений — <code><span class="func">continuation</span></code>.</p>

<h3 id="escape/actors/ssect:quoting">Цитирование</h3>

<p>Специальная форма цитирования всё так же является наиболее простой, её задача
сводится к передаче значения в неизменной форме текущему продолжению:</p>


<!--\indexC{evaluate-quotation}-->
<pre>(define (evaluate-quotation v r k)
  (resume k v) )</pre>

<h3 id="escape/actors/ssect:alternatives">Ветвление</h3>

<p>Условный оператор использует два продолжения: текущее и продолжение вычисления
условия, которое выберет и вычислит необходимую ветку. Для этого продолжения мы
создадим отдельный класс. После вычисления условия ещё остаётся вычисление той
или иной ветки, а значит, в продолжении необходимо хранить сами ветки и
окружение для их вычисления. Результат вычисления одной из веток надо будет
передать продолжению условной формы, которое тоже надо где-то хранить. Таким
образом, мы пишем:</p>


<!--\indexC{if-cont}-->
<!--\indexC{evaluate-if}-->
<!--\indexCS{resume}{<code><span class="func">if-cont</span></code>}-->
<pre>(define-class if-cont continuation (et ef r))</p>

<p>(define (evaluate-if ec et ef r k)
  (evaluate ec r (make-if-cont k et ef r)) )</p>

<p>(define-method (resume (k if-cont) v)
  (evaluate (if v (if-cont-et k) (if-cont-ef k))
            (if-cont-r k)
            (if-cont-k k) ) )</pre>

<p>Форма вначале вычисляет условие <code><span class="func">ec</span></code> в своём окружении <code><span class="func">r</span></code>, но с новым
продолжением. Как только мы заканчиваем вычислять условие, результат передаётся
<code><span class="func">resume</span></code>, которая вызывает специализацию для нашего класса продолжений.
В этом продолжении мы выполняем собственно выбор, вычисляем одну их сохранённых
веток в сохранённом окружении и передаём результат сохранённому продолжению всей
условной формы.\footnote*{С точки зрения реализации можно считать, что
<code><span class="func">make-if-cont</span></code> кладёт в стек <code><span class="func">et</span></code> и <code><span class="func">ef</span></code>, а также <code><span class="func">r</span></code>; под ними
в стеке лежат аналогичные группы выражений и окружений, которые фактически и
есть ничем иным, как продолжением <code><span class="func">k</span></code>. А вызовы вроде <code><span class="func">(if-cont-et k)</span></code>
лишь снимают с верхушки стека нужные данные.}</p>

<h3 id="escape/actors/ssect:sequence">Последовательность</h3>

<p>Здесь нам тоже потребуются два продолжения: текущее и продолжение вычисления
оставшихся форм.</p>


<!--\indexC{begin-cont}-->
<!--\indexC{evaluate-begin}-->
<!--\indexCS{resume}{<code><span class="func">begin-cont</span></code>}-->
<pre>(define-class begin-cont continuation (e* r))</p>

<p>(define (evaluate-begin e* r k)
  (if (pair? e*)
    (if (pair? (cdr e*))
        (evaluate (car e*) r (make-begin-cont k e* r))
        (evaluate (car e*) r k) )
    (resume k empty-begin-value) ) )</p>

<p>(define-method (resume (k begin-cont) v)
  (evaluate-begin (cdr (begin-cont-e* k))
                  (begin-cont-r k)
                  (begin-cont-k k) ) )</pre>

<p>Случаи <code><span class="func">(begin)</span></code> и <code><span class="func">(begin $\pi$)</span></code> тривиальны. Если же <code><span class="func">begin</span></code>
передано больше выражений, то вычисление первого из них продолжается
<code><span class="func">(make-begin-cont k e* r)</span></code>. Это продолжение принимает значение <code><span class="func">v</span></code>
с помощью <code><span class="func">resume</span></code>, игнорирует его и продолжает оставшиеся вычисления
в том же окружении и с тем же продолжением.\footnote*{Внимательный читатель
наверняка заметил странную форму <code><span class="func">(cdr (begin-cont-e* k))</span></code> в методе
<code><span class="func">resume</span></code>. Конечно, мы могли бы отбросить уже вычисленное выражение ещё
в <code><span class="func">evaluate-begin</span></code>: <code><span class="func">(make-begin-cont k (cdr e*) r)</span></code>, и получить тот же
результат. Причина такого решения в том, что если случится ошибка, то у нас
будет на руках её источник.}</p>

<h3 id="escape/actors/ssect:variables">Окружения</h3>

<p>Значения переменных хранятся в окружениях. Они тоже представляются объектами:</p>


<!--\indexC{null-env}-->
<!--\indexC{full-env}-->
<!--\indexC{variable-env}-->
<pre>(define-class null-env environment ())
(define-class full-env environment (others name))
(define-class variable-env full-env (value))</pre>

<p>Нам потребуются два типа окружений: пустое начальное окружение <code><span class="func">null-env</span></code> и
окружения с переменными <code><span class="func">variable-env</span></code>. Последние хранят одну привязку имени
<code><span class="func">name</span></code> к значению <code><span class="func">value</span></code>, а также ссылку на остальные привязки этого
окружения в поле <code><span class="func">others</span></code>. То есть это обычный А-список, разве что для
хранения каждой привязки используется объект с тремя полями, а не две точечных
пары.</p>

<p>Для нахождения значения переменной мы делаем следующее:</p>


<!--\indexC{evaluate-variable}-->
<pre>(define (evaluate-variable n r k)
  (lookup r n k) )</p>

<p>(define-method (lookup (r null-env) n k)
  (wrong "Unknown variable" n r k) )</p>

<p>(define-method (lookup (r full-env) n k)
  (lookup (full-env-others r) n k) )</p>

<p>(define-method (lookup (r variable-env) n k)
  (if (eqv? n (variable-env-name r))
      (resume k (variable-env-value r))
      (lookup (variable-env-others r) n k) ) )</pre>

<p>Обобщённая функция <code><span class="func">lookup</span></code> проходит по окружению, пока не найдёт подходящую
привязку: с совпадающим именем и хранящую значение переменной. Найденное
значение передаётся исходному продолжению с помощью <code><span class="func">resume</span></code>.</p>

<p>Изменение значения происходит похожим образом:</p>


<!--\indexC{set"!-cont}-->
<!--\indexC{evaluate-set"!}-->
<!--\indexCS{resume}{<code><span class="func">set"!-cont</span></code>}-->
<!--\indexCS{update"!}{<code><span class="func">null-env</span></code>}-->
<!--\indexCS{update"!}{<code><span class="func">full-env</span></code>}-->
<!--\indexCS{update"!}{<code><span class="func">variable-env</span></code>}-->
<pre>(define-class set!-cont continuation (n r))</p>

<p>(define (evaluate-set! n e r k)
  (evaluate e r (make-set!-cont k n r)) )</p>

<p>(define-method (resume (k set!-cont) v)
  (update! (set!-cont-r k) (set!-cont-n k) (set!-cont-k k) v) )</p>

<p>(define-method (update! (r null-env) n k v)
  (wrong "Unknown variable" n r k) )</p>

<p>(define-method (update! (r full-env) n k v)
  (update! (full-env-others r) n k v) )</p>

<p>(define-method (update! (r variable-env) n k v)
  (if (eqv? n (variable-env-name r))
      (begin (set-variable-env-value! r v)
             (resume k v) )
      (update! (variable-env-others r) n k v) ) )</pre>

<p>Нам потребовалось вспомогательное продолжение, так как присваивание проходит
в два этапа: сначала надо вычислить присваиваемое значение, потом присвоить его
переменной. Класс <code><span class="func">set!-cont</span></code> представляет необходимые продолжения, его метод
<code><span class="func">resume</span></code> лишь вызывает <code><span class="func">update!</span></code> для установки значения, после чего
продолжает дальнейшие вычисления.</p>

<h3 id="escape/actors/ssect:functions">Функции</h3>

<p>Создать функцию легко, с этим справится <code><span class="func">make-function</span></code>:</p>


<!--\indexC{function}-->
<!--\indexC{evaluate-lambda}-->
<pre>(define-class function value (variables body env))</p>

<p>(define (evaluate-lambda n* e* r k)
  (resume k (make-function n* e* r)) )</pre>

<p>Чуть сложнее будет вызвать созданную функцию. Обратите внимание на неявное
использование <code><span class="func">progn</span></code>/<code><span class="func">begin</span></code> для тела функций.</p>


<!--\indexCS{invoke}{<code><span class="func">function</span></code>}-->
<pre>(define-method (invoke (f function) v* r k)
  (let ((env (extend-env (function-env f)
                         (function-variables f)
                         v* )))
    (evaluate-begin (function-body f) env k) ) )</pre>

<p>Может показаться странным, что функция принимает текущее окружение <code><span class="func">r</span></code>, но
никак не использует его. Это сделано по нескольким причинам. Во-первых, обычно
при компиляции текущие окружение и продолжение считаются чем-то вроде
глобальных динамических переменных и передаются через жёстко заданные регистры,
которые никак не выкинуть из реализации. Во-вторых, некоторые функции (о них
поговорим позже, когда будем рассматривать рефлексию) могут изменять текущее
окружение; например, отладочные функции по запросу пользователя могут изменять
значения произвольных переменных.</p>

<p>Следующая функция расширяет окружение переменных. И выполняет проверку
согласованности количества имён и связываемых с ними значений.</p>


<!--\indexC{extend-env}-->
<pre>(define (extend-env env names values)
  (cond ((and (pair? names) (pair? values))
         (make-variable-env
          (extend-env env (cdr names) (cdr values))
          (car names)
          (car values) ) )
        ((and (null? names) (null? values)) env)
        ((symbol? names) (make-variable-env env names values))
        (else (wrong "Arity mismatch")) ) )</pre>

<p>Осталось только определить собственно применение функций. Здесь надо помнить
о том, что функция применяется к списку аргументов.</p>


<!--\indexC{evfun-cont}-->
<!--\indexC{apply-cont}-->
<!--\indexC{argument-cont}-->
<!--\indexC{gather-cont}-->
<!--\indexC{evaluate-application}-->
<!--\indexCS{resume}{<code><span class="func">evfun-cont</span></code>}-->
<!--\indexC{no-more-arguments}-->
<!--\indexC{evaluate-arguments}-->
<!--\indexCS{resume}{<code><span class="func">argument-cont</span></code>}-->
<!--\indexCS{resume}{<code><span class="func">gather-cont</span></code>}-->
<!--\indexCS{resume}{<code><span class="func">apply-cont</span></code>}-->
<pre>(define-class evfun-cont    continuation (e* r))
(define-class apply-cont    continuation (f  r))
(define-class argument-cont continuation (e* r))
(define-class gather-cont   continuation (v))</p>

<p>(define (evaluate-application e e* r k)
  (evaluate e r (make-evfun-cont k e* r)) )</p>

<p>(define-method (resume (k evfun-cont) f)
  (evaluate-arguments (evfun-cont-e* k)
                      (evfun-cont-r k)
                      (make-apply-cont (evfun-cont-k k) f
                                       (evfun-cont-r k) ) ) )
(define no-more-arguments '())</p>

<p>(define (evaluate-arguments e* r k)
  (if (pair? e*)
      (evaluate (car e*) r (make-argument-cont k e* r))
      (resume k no-more-arguments) ) )</p>

<p>(define-method (resume (k argument-cont) v)
  (evaluate-arguments (cdr (argument-cont-e* k))
                      (argument-cont-r k)
                      (make-gather-cont (argument-cont-k k) v) ) )</p>

<p>(define-method (resume (k gather-cont) v*)
  (resume (gather-cont-k k) (cons (gather-cont-v k) v*)) )</p>

<p>(define-method (resume (k apply-cont) v)
  (invoke (apply-cont-f k) v
          (apply-cont-r k)
          (apply-cont-k k) ) )</pre>

<p>На первый взгляд, здесь всё слишком сложно, но только на первый. Вычисления
проводятся слева направо, так что первой вычисляется сама функция с продолжением
<code><span class="func">evfun-cont</span></code>. Это продолжение должно вычислить аргументы функции и передать
их продолжению, которое применит функцию к списку значений аргументов.
В процессе вычисления аргументов мы обращаемся к продолжениям <code><span class="func">gather-cont</span></code>,
которые последовательно собирают вычисленные аргументы в список.</p>


<!--\indexR{продолжения (continuations)!иллюстрация стека}-->
<p>Давайте рассмотрим на примере, что происходит при вычислении <code><span class="func">(cons
foo bar)</span></code>. Пусть переменная <code><span class="func">foo</span></code> имеет значение $33$, а <code><span class="func">bar</span></code>
равна $-77$. Стек продолжений показан справа, а вычисляемое выражение слева.
\ii{k} — это текущее продолжение, \ii{r} — текущее окружение.
Функция-значение переменной <code><span class="func">cons</span></code> записывается как \ii{cons}.</p>

<p>{\def\EV{\ii{evaluate}} \def\RE{\ii{resume}} \def\IV{\ii{invoke}}
 \def\EA{\ii{evaluate-arguments}}
 \def\EC{\icc{evfun-cont}}
 \def\PC{\icc{apply-cont}}
 \def\GC{\icc{gather-cont}}
 \def\AC{\icc{argument-cont}}
 \def\iv#1{\textsf{#1}}
 \def\X{\kern0.75em}
%
\begin{eval-stack}
  {\EV} (cons foo bar) \ii{r} \-                                        \ii{k}\\
  {\EV} cons \ii{r}           \-                 {\EC} (foo bar) \ii{r} \ii{k}\\
  {\RE} \ii{cons}             \-                 {\EC} (foo bar) \ii{r} \ii{k}\\
  {\EA} (foo bar) \ii{r}      \-                        {\PC} \ii{cons} \ii{k}\\
  {\EV} foo \ii{r}            \- {\AC} (foo bar) \ii{r} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{33}               \- {\AC} (foo bar) \ii{r} {\PC} \ii{cons} \ii{k}\\
  {\EA} (bar) \ii{r}         \-           {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\EV} bar \ii{r}      \-{\AC} () \ii{r} {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{--77}      \- {\AC} () \ii{r} {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\EA} () \ii{r}      \- {\GC} \iv{--77} {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{(\,)}       \-{\GC} \iv{--77} {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{(--77)}        \-             {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{(33\X--77)}      \-                         {\PC} \ii{cons} \ii{k}\\
  {\IV} \ii{cons} \iv{(33\X--77)}\-                                     \ii{k}
\end{eval-stack}}</p>

<h2 id="escape/sect:init">Инициализация интерпретатора</h2>

<p>Перед погружением в сокровенные тайны устройства управляющих форм, давайте
сначала подготовим наш интерпретатор к запуску. Этот раздел похож на
раздел \ref{basics/sect:global-environment}.
\seePage[basics/sect:global-environment] Неплохо было бы вначале научить наш
интерпретатор нескольким полезным вещам вроде <code><span class="func">car</span></code>, поэтому объявим
пару макросов, которые помогут нам наполнить его глобальное окружение.</p>


<!--\indexC{definitial}-->
<!--\indexC{defprimitive}-->
<!--\indexC{primitive}-->
<!--\indexC{r.init}-->
<!--\indexC{cons}-->
<!--\indexC{car}-->
<pre>(define-syntax definitial
  (syntax-rules ()
    ((definitial name)
     (definitial name 'void) )
    ((definitial name value)
     (begin (set! r.init (make-variable-env r.init 'name value))
            'name ) ) ) )</p>

<p>(define-class primitive value (name address))</p>

<p>(define-syntax defprimitive
  (syntax-rules ()
    ((defprimitive name value arity)
     (definitial name
       (make-primitive
        'name (lambda (v* r k)
                (if (= arity (length v*))
                    (resume k (apply value v*))
                    (wrong "Incorrect arity" 'name v*) ) ) ) ) ) ) )</p>

<p>(define r.init (make-null-env))</p>

<p>(defprimitive cons cons 2)
(defprimitive car car 1)</pre>

<p>Создаваемые примитивные функции должны вызываться той же функцией <code><span class="func">invoke</span></code>,
которая обрабатывает обычные функции. Каждый примитив имеет два поля. Первое из
них служит для упрощения отладки: оно хранит имя примитива. Естественно, это
лишь подсказка, так как ничто не мешает в дальнейшем связать один и тот же
примитив с разными именами.\footnote*{Эта подсказка позволяет также копировать
примитивы по значению: выражение <code><span class="func">(begin (set! foo car) (set! car 3) foo)</span></code>
возвращает <code><span class="func">\#<car></span></code> — собственное имя примитива, связанного с глобальной
переменной.} Второе поле хранит «адрес» примитива, ссылку на соответствующую
функцию языка реализации интерпретатора. В итоге примитивы вызываются с помощью
<code><span class="func">invoke</span></code> следующим образом:</p>


<!--\indexCS{invoke}{<code><span class="func">primitive</span></code>}-->
<pre>(define-method (invoke (f primitive) v* r k)
  ((primitive-address f) v* r k) )</pre>

<p>Для запуска нашего прекрасного интерпретатора остаётся лишь определить начальное
продолжение-заглушку. Это продолжение будет печатать на экран всё, что ему
передают.</p>


<!--\indexC{bottom-cont}-->
<!--\indexCS{resume}{<code><span class="func">bottom-cont</span></code>}-->
<!--\indexC{chapter3-interpreter}-->
<pre>(define-class bottom-cont continuation (f))</p>

<p>(define-method (resume (k bottom-cont) v)
  ((bottom-cont-f k) v) )</p>

<p>(define (chapter3-interpreter)
  (define (toplevel)
    (evaluate (read)
              r.init
              (make-bottom-cont 'void display) )
    (toplevel) )
  (toplevel) )</pre>

<p>Заметьте, что мы могли бы легко написать похожий интерпретатор на истинно
объектно-ориентированном языке, например на Smalltalk <span class="cite">[<a href="z1_bibliography.xhtml#gr83">gr83</a>]</span>, получив
заодно доступ к его хвалёному отладчику и среде разработки. Для полного счастья
останется только добавить те несколько строчек, что открывают гору маленьких
окошек с контекстными подсказками.</p>

<h2 id="escape/sect:implementation">Реализация управляющих форм</h2>

<p>Начнём с самой мощной формы — <code><span class="func">call/cc</span></code>. Парадоксально, но факт: это самая
простая форма, если смотреть на количество кода. Благодаря используемому нами
объектному подходу и явному присутствию продолжений в интерпретаторе,
преобразование их в полноценные объекты языка становится тривиальным.</p>

<p>
\subsection{\texorpdfstring%
{Реализация \protect<code><span class="func">call/cc</span></code>}%
{Реализация call/cc}}%
\label{escape/implementation/ssect:call/cc}</p>


<!--\indexCS{call/cc}{реализация}-->
<p>Функция <code><span class="func">call/cc</span></code> берёт текущее продолжение \ii{k}, превращает его в объект,
понятный <code><span class="func">invoke</span></code>, и применяет к нему свой аргумент — унарную функцию.
Следующий код чуть ли не буквально записывает это определение:</p>


<!--\indexC{call/cc}-->
<pre>(definitial call/cc
  (make-primitive
   'call/cc
   (lambda (v* r k)
     (if (= 1 (length v*))
         (invoke (car v*) (list k) r k)
         (wrong "Incorrect arity" 'call/cc v*) ) ) ) )</pre>

<p>Хоть тут и немного строчек, всё же стоит кое-что объяснить. <code><span class="func">call/cc</span></code> это
функция, но мы определяем её с помощью <code><span class="func">defprimitive</span></code>, так как это
единственный способ для функции добраться до <code><span class="func">k</span></code>. Переменная <code><span class="func">call/cc</span></code>
(это всё же Lisp<sub>1</sub>) связывается с объектом класса <code><span class="func">primitive</span></code>. Для вызова
объектов этого класса необходим «адрес» функции, которому у нас соответствуют
функции языка определения вида <code><span class="func">(lambda (v* r k) ...)</span></code>. После проверки на
арность первый аргумент <code><span class="func">call/cc</span></code> применяется к захваченному продолжению.
Само продолжение мы никак не трогаем, оно остаётся объектом языка определения.
Так как сохранённые «сырые» продолжения могут быть впоследствии переданы
<code><span class="func">invoke</span></code> напрямую, то её надо научить обращаться с ними:</p>


<!--\indexCS{invoke}{<code><span class="func">continuation</span></code>}-->
<pre>(define-method (invoke (f continuation) v* r k)
  (if (= 1 (length v*))
      (resume f (car v*))
      (wrong "Continuations expect one argument" v* r k) ) )</pre>

<p>
\subsection{\texorpdfstring{Реализация \protect<code><span class="func">catch</span></code>}{Реализация catch}}%
\label{escape/implementation/ssect:catch}</p>


<!--\indexCS{catch}{реализация}-->
<!--\indexCS{throw}{реализация}-->
<p>Форма <code><span class="func">catch</span></code> по-своему интересна, так как требует разительно иного подхода,
нежели форма <code><span class="func">block</span></code>, которую мы рассмотрим чуть позже. Как обычно, начнём
с добавления анализа <code><span class="func">catch</span></code> и <code><span class="func">throw</span></code> в <code><span class="func">evaluate</span></code>:</p>

<pre>...
((catch) (evaluate-catch (cadr e) (cddr e) r k))
((throw) (evaluate-throw (cadr e) (caddr e) r k))
...</pre>

<p>Здесь решено сделать <code><span class="func">throw</span></code> специальной формой, а не функцией. В первую
очередь с целью походить на <span class="logo">Common Lisp</span>. Далее определим правила обработки
формы <code><span class="func">catch</span></code>:</p>


<!--\indexC{catch-cont}-->
<!--\indexC{labeled-cont}-->
<!--\indexC{evaluate-catch}-->
<!--\indexCS{resume}{<code><span class="func">catch-cont</span></code>}-->
<pre>(define-class catch-cont   continuation (body r))
(define-class labeled-cont continuation (tag))</p>

<p>(define (evaluate-catch tag body r k)
  (evaluate tag r (make-catch-cont k body r)) )</p>

<p>(define-method (resume (k catch-cont) v)
  (evaluate-begin (catch-cont-body k)
                  (catch-cont-r k)
                  (make-labeled-cont (catch-cont-k k) v) ) )</pre>

<p>Как видите, <code><span class="func">catch</span></code> вычисляет первый аргумент (метку), связывает с ней своё
продолжение, создавая таким образом помеченный блок, и, наконец, последовательно
вычисляет формы, составляющие её тело. Когда продолжение этого блока получает
значение, оно просто перебрасывает его сохранённому продолжению самой формы
<code><span class="func">catch</span></code>. Форма <code><span class="func">throw</span></code> чуть более сложная:</p>


<!--\indexC{throw-cont}-->
<!--\indexC{throwing-cont}-->
<!--\indexC{evaluate-throw}-->
<!--\indexCS{resume}{<code><span class="func">throw-cont</span></code>}-->
<!--\indexC{catch-lookup}-->
<!--\indexCS{resume}{<code><span class="func">throwing-cont</span></code>}-->
<!--\indexC{eqv"?}-->
<pre>(define-class throw-cont    continuation (form r))
(define-class throwing-cont continuation (tag cont))</p>

<p>(define (evaluate-throw tag form r k)
  (evaluate tag r (make-throw-cont k form r)) )</p>

<p>(define-method (resume (k throw-cont) tag)
  (catch-lookup k tag k) )</p>

<p>(define-generic (catch-lookup (k) tag kk)
  (wrong "Not a continuation" k tag kk) )</p>

<p>(define-method (catch-lookup (k continuation) tag kk)
  (catch-lookup (continuation-k k) tag kk) )</p>

<p>(define-method (catch-lookup (k bottom-cont) tag kk)
  (wrong "No associated catch" k tag kk) )</p>

<p>(define-method (catch-lookup (k labeled-cont) tag kk)
  (if (eqv? tag (labeled-cont-tag k))  ; внимание на компаратор
      (evaluate (throw-cont-form kk)
                (throw-cont-r kk)
                (make-throwing-cont kk tag k) )
      (catch-lookup (labeled-cont-k k) tag kk) ) )</p>

<p>(define-method (resume (k throwing-cont) v)
  (resume (throwing-cont-cont k) v) )</pre>


<!--\indexR{переходы (escapes)!вложенные}-->
<p>Форма <code><span class="func">throw</span></code> вычисляет первый аргумент и пытается найти продолжение
с совпадающей меткой. Если в процессе поиска она добирается до начального
продолжения, то сигнализирует об ошибке. Если же нет, то вычисляется второй
аргумент <code><span class="func">throw</span></code> и его значение передаётся найденному продолжению. Но
передаётся оно по-хитрому: через <code><span class="func">throwing-cont</span></code>. Дело в том, что в процессе
вычисления этого значения тоже может возникнуть переход. Если бы продолжением
данного вычисления было продолжение, сохранённое в метке внешней формы
<code><span class="func">throw</span></code>, то вложенная форма <code><span class="func">throw</span></code> начинала бы поиски <code><span class="func">catch</span></code> так, как
будто бы переход на внешнюю метку уже произошёл. Но это не так, так что поиск
следует вести от текущей формы <code><span class="func">throw</span></code>, потому и создаётся специальное
промежуточное продолжение. В итоге, когда мы пишем:</p>

<pre>(catch 2
  (* 7 (catch 1
         (* 3 (catch 2
                (throw 1 (throw 2 5)) )) )) )</pre>

<p>\noindent
то получаем <code><span class="func">(* 7 3 5)</span></code>, а не <code><span class="func">5</span></code>.</p>

<p>Кроме того, реализация <code><span class="func">throw</span></code> как специальной формы позволяет отлавливать
больше ошибок.</p>

<pre>(catch 2 (* 7 (throw 1 (throw 2 3))))</pre>

<p>\noindent
Эта форма гарантированно вернёт не <code><span class="func">3</span></code>, а ошибку <code><span class="func">"No associated catch"</span></code>,
так как действительно нет <code><span class="func">catch</span></code> с меткой <code><span class="func">1</span></code> и не важно, что она
вроде бы как не используется.</p>

<p>
\subsection{\texorpdfstring{Реализация \protect<code><span class="func">block</span></code>}{Реализация block}}%
\label{escape/implementation/ssect:block}</p>


<!--\indexCS{block}{реализация}-->
<!--\indexCS{return-from}{реализация}-->
<p>Для реализации лексических меток переходов необходимо решить две проблемы.
Первая: гарантировать динамическое время жизни продолжений. Вторая: обеспечить
лексическую видимость меток. Для решения второй задачи мы, естественно,
воспользуемся лексическими окружениями, где лексическая область видимости есть
«из коробки». Над первой же придётся немного поработать самостоятельно. Чтобы
не было путаницы, у <code><span class="func">block</span></code> будет личный класс окружений для хранения
привязок меток к продолжениям.</p>

<p>Начинаем как обычно: добавляем распознавание формы <code><span class="func">block</span></code> в <code><span class="func">evaluate</span></code> и
описываем необходимые функции-обработчики.</p>


<!--\indexC{block-cont}-->
<!--\indexC{block-env}-->
<!--\indexC{evaluate-block}-->
<!--\indexCS{resume}{<code><span class="func">block-cont</span></code>}-->
<pre>(define-class block-cont continuation (label))
(define-class block-env full-env (cont))</p>

<p>(define (evaluate-block label body r k)
  (let ((k (make-block-cont k label)))
    (evaluate-begin body
                    (make-block-env r label k)
                    k ) ) )</p>

<p>(define-method (resume (k block-cont) v)
  (resume (block-cont-k k) v) )</pre>

<p>С нормальным поведением закончили, переходим к <code><span class="func">return-from</span></code>. Сначала
добавляем её в <code><span class="func">evaluate</span></code>:</p>

<pre>...
((block)       (evaluate-block (cadr e) (cddr e) r k))
((return-from) (evaluate-return-from (cadr e) (caddr e) r k))
...</pre>

<p>\noindent
Затем описываем обработку:</p>


<!--\indexC{return-from-cont}-->
<!--\indexC{evaluate-return-from}-->
<!--\indexCS{resume}{<code><span class="func">return-from-cont</span></code>}-->
<!--\indexC{block-lookup}-->
<!--\indexC{unwind}-->
<!--\indexCS{unwind}{<code><span class="func">continuation</span></code>}-->
<!--\indexCS{unwind}{<code><span class="func">bottom-cont</span></code>}-->
<pre>(define-class return-from-cont continuation (r label))</p>

<p>(define (evaluate-return-from label form r k)
  (evaluate form r (make-return-from-cont k r label)) )</p>

<p>(define-method (resume (k return-from-cont) v)
  (block-lookup (return-from-cont-r k)
                (return-from-cont-label k)
                (return-from-cont-k k)
                v ) )</p>

<p>(define-generic (block-lookup (r) n k v)
  (wrong "Not an environment" r n k v) )</p>

<p>(define-method (block-lookup (r block-env) n k v)
  (if (eq? n (block-env-name r))
      (unwind k v (block-env-cont r))
      (block-lookup (block-env-others r) n k v) ) )</p>

<p>(define-method (block-lookup (r full-env) n k v)
  (block-lookup (variable-env-others r) n k v) )</p>

<p>(define-method (block-lookup (r null-env) n k v)
  (wrong "Unknown block label" n r k v) )</p>

<p>(define-generic (unwind (k) v ktarget))</p>

<p>(define-method (unwind (k continuation) v ktarget)
  (if (eq? k ktarget)
      (resume k v)
      (unwind (continuation-k k) v ktarget) ) )</p>

<p>(define-method (unwind (k bottom-cont) v ktarget)
  (wrong "Obsolete continuation" v) )</pre>

<p>После вычисления необходимого значения функция <code><span class="func">block-lookup</span></code> отправляется
на поиски продолжения, связанного с меткой <code><span class="func">tag</span></code> в лексическом окружении
формы <code><span class="func">return-from</span></code>. Если такое продолжение существует, то дальше с помощью
<code><span class="func">unwind</span></code> она убеждается в том, что оно является частью текущего продолжения.</p>

<p>Поиск именованного блока, хранящего нужное продолжение, реализуется обобщённой
функцией <code><span class="func">block-lookup</span></code>. Она обучена пропускать ненужные окружения с обычными
переменными, останавливаясь только на экземплярах <code><span class="func">block-env</span></code>, хранящих
нужные нам <code><span class="func">block-cont</span></code>. Аналогично и <code><span class="func">lookup</span></code> пропускает экземпляры
<code><span class="func">block-env</span></code>, останавливаясь лишь на <code><span class="func">variable-env</span></code>. Именно с этой целью
данные классы наследуются от общего предка: <code><span class="func">full-env</span></code>. Это позволяет
безболезненно добавлять новые классы окружений, которые не будут мешать уже
существующим.</p>

<p>Наконец, обобщённая функция <code><span class="func">unwind</span></code> передаёт вычисленное значение найденному
продолжению, но только если оно ещё актуально — то есть доступно из текущего
продолжения.</p>

<p>
\subsection{\texorpdfstring%
{Реализация \protect<code><span class="func">unwind-protect</span></code>}%
{Реализация unwind-protect}}%
\label{escape/implementation/ssect:unwind-protect}</p>


<!--\indexCS{unwind-protect}{реализация}-->
<p>Форма <code><span class="func">unwind-protect</span></code> является самой сложной для реализации; нам понадобится
изменить определения форм <code><span class="func">catch</span></code> и <code><span class="func">block</span></code>, чтобы они вели себя
правильно, когда находятся внутри <code><span class="func">unwind-protect</span></code>. Это хороший пример
возможности, чьё введение требует переработки всего, что уже написано до этого.
Но отсутствие <code><span class="func">unwind-protect</span></code> приводит к другим сложностям в будущем, так
что оно того стоит.</p>

<p>Начнём с определения поведения самой формы <code><span class="func">unwind-protect</span></code> (которая, как мы
уже говорили, мало чем отличается от <code><span class="func">prog1</span></code>):</p>


<!--\indexC{unwind-protect-cont}-->
<!--\indexC{protect-return-cont}-->
<!--\indexC{evaluate-unwind-protect}-->
<!--\indexCS{resume}{<code><span class="func">unwind-protect-cont</span></code>}-->
<!--\indexCS{resume}{<code><span class="func">protect-return-cont</span></code>}-->
<pre>(define-class unwind-protect-cont continuation (cleanup r))
(define-class protect-return-cont continuation (value))</p>

<p>(define (evaluate-unwind-protect form cleanup r k)
  (evaluate form r
            (make-unwind-protect-cont k cleanup r) ) )</p>

<p>(define-method (resume (k unwind-protect-cont) v)
  (evaluate-begin (unwind-protect-cont-cleanup k)
                  (unwind-protect-cont-r k)
                  (make-protect-return-cont
                   (unwind-protect-cont-k k) v ) ) )</p>

<p>(define-method (resume (k protect-return-cont) v)
  (resume (protect-return-cont-k k) (protect-return-cont-value k)) )</pre>

<p>Далее необходимо доработать <code><span class="func">catch</span></code> и <code><span class="func">block</span></code>, чтобы они выполняли
действия, предписанные <code><span class="func">unwind-protect</span></code>, даже в случае выхода из них
с помощью <code><span class="func">throw</span></code> или <code><span class="func">return-from</span></code>. Для <code><span class="func">catch</span></code> необходимо изменить
обработку <code><span class="func">throwing-cont</span></code>:</p>


<!--\indexCS{resume}{<code><span class="func">throwing-cont</span></code>}-->
<pre>(define-method (resume (k throwing-cont) v)
  (unwind (throwing-cont-k k) v (throwing-cont-cont k)) )</pre>

<p>\noindent
И научить <code><span class="func">unwind</span></code> выполнять сохранённые действия в процессе обхода стека:</p>


<!--\indexC{unwind-cont}-->
<!--\indexCS{unwind}{<code><span class="func">unwind-protect-cont</span></code>}-->
<!--\indexCS{resume}{<code><span class="func">unwind-cont</span></code>}-->
<pre>(define-class unwind-cont continuation (value target))</p>

<p>(define-method (unwind (k unwind-protect-cont) v target)
  (evaluate-begin (unwind-protect-cont-cleanup k)
                  (unwind-protect-cont-r k)
                  (make-unwind-cont
                   (unwind-protect-cont-k k) v target ) ) )</p>

<p>(define-method (resume (k unwind-cont) v)
  (unwind (unwind-cont-k k)
          (unwind-cont-value k)
          (unwind-cont-target k) ) )</pre>


<!--\indexR{раскрутка стека (unwinding)}-->
<p>Теперь, чтобы передать значение при переходе, нам недостаточно просто его отдать
нужному продолжению. Нам необходимо подняться по стеку продолжений с помощью
<code><span class="func">unwind</span></code> (<em class="term">раскрутить</em> стек) от текущего до целевого продолжения,
выполняя по пути соответствующую уборку. Продолжения форм-уборщиков имеют тип
<code><span class="func">unwind-cont</span></code>. Их обработка с помощью <code><span class="func">resume</span></code> вызывает продолжение уборки
до достижения цели на случай вложенных форм <code><span class="func">unwind-protect</span></code>, а также
устанавливает правильное продолжение на случай переходов внутри самих
форм-уборщиков (тот самый процесс отбрасывания продолжений, который
рассматривался на странице \pageref{escape/forms/protection/p:discard}).</p>

<p>Что касается <code><span class="func">block</span></code>, то тут даже делать ничего не надо. Как вы помните,
<code><span class="func">block-lookup</span></code> уже вызывает <code><span class="func">unwind</span></code> для раскрутки стека с целью проверки
актуальности перехода:</p>

<pre>(define-method (block-lookup (r block-env) n k v)
  (if (eq? n (block-env-name r))
      (unwind k v (block-env-cont r))
      (block-lookup (block-env-others r) n k v) ) )</pre>

<p>\noindent
Так что остаётся только сказать спасибо обобщённым функциям.</p>


<!--\indexCS{block}{и <code><span class="func">unwind-protect</span></code>}-->
<p>Может показаться, что с появлением <code><span class="func">unwind-protect</span></code> форма <code><span class="func">block</span></code>
перестала быть быстрее <code><span class="func">catch</span></code>, ведь они обе вынуждены пользоваться медленной
<code><span class="func">unwind</span></code>. В общем случае, конечно, да, но в частностях, коих большинство, это
не так: <code><span class="func">unwind-protect</span></code> является специальной формой, так что она не может
быть спутана с обычной функцией, её всегда надо использовать явно. А если
<code><span class="func">return-from</span></code> прямо видит метку соответствующего <code><span class="func">block</span></code> (то есть когда
между ними нет <code><span class="func">lambda</span></code>- или <code><span class="func">unwind-protect</span></code>-форм), то <code><span class="func">unwind</span></code> будет
работать так же быстро, как и раньше.</p>

<div class="bigskip"/>


<!--\indexCS{unwind-protect}{ограничения \CommonLisp}-->
<p>В <span class="logo">Common Lisp</span> (CLtL2 <span class="cite">[<a href="z1_bibliography.xhtml#ste90">ste90</a>]</span>) присутствует ещё одно интересное
ограничение, касающееся переходов из форм-уборщиков. Эти переходы не могут вести
внутрь той формы, из которой в теле <code><span class="func">unwind-protect</span></code> был вызван выход.
Введено такое ограничение с целью недопущения бесконечных циклов из переходов,
любые попытки выбраться из которых пресекаются <code><span class="func">unwind-protect</span></code>.
\seeEx[escape/ex:eternal] Следовательно, следующая программа выдаст ошибку, так
как форма-уборщик хочет прыгнуть ближе, чем прыжок на <code><span class="func">1</span></code>, который уже
в процессе.</p>

<pre>(catch 1                  |\dialect<span class="logo">Common Lisp</span>|
  (catch 2
    (unwind-protect (throw 1 'foo)
      (throw 2 'bar) ) ) )         |\is| |\ii{ошибка!}|</pre>

<p>
\section{\texorpdfstring%
{Сравнение \protect<code><span class="func">call/cc</span></code> и \protect<code><span class="func">catch</span></code>}%
{Сравнение call/cc и catch}}%
\label{escape/sect:comparing}</p>

<p>Благодаря объектам, продолжения можно представлять связным списком блоков.
Некоторые из этих блоков доступны прямо в лексическом окружении; до других
необходимо пробираться, проходя через несколько промежуточных продолжений;
третьи вызывают выполнение определённых действий, когда через них проходят.</p>


<!--\indexR{продолжения (continuations)!время жизни!динамическое}-->
<p>В языках вроде Лиспа, где есть продолжения с динамическим временем жизни, стек
вызовов и продолжения являются синонимами. Когда мы пишем <code><span class="func">(evaluate ec r
(make-if-cont k et ef r))</span></code>, мы явно кладём в стек блок кода, который будет
обрабатывать значение, которое вернёт условие <code><span class="func">if</span></code>-формы. И наоборот, когда
мы пишем <code><span class="func">(evaluate-begin (cdr (begin-cont-e* k)) (begin-cont-r k)
(begin-cont-k k))</span></code>, то это значит, что текущий блок <code><span class="func">k</span></code> надо выбросить и
поставить на его место <code><span class="func">(begin-cont-k k)</span></code>. Можно легко убедиться в том, что
такие блоки действительно выбрасываются, в стеке не остаются недовыполненные
куски продолжений. Таким образом, когда мы выходим из блока, все продолжения,
указывающие на него и, возможно, сохранённые в других блоках, становятся
недействительными. Обычно продолжения неявно хранятся в стеке или даже
в нескольких стеках, согласованных между собой, а переходы между ними
компилируются в примитивы языка Си: <code><span class="func">setjmp</span></code>/<code><span class="func">longjmp</span></code>.
\seePage[cc/sect:call/cc]</p>


<!--\indexC{let/cc}-->
<p>В диалекте <span class="logo">EuLisp</span> <span class="cite">[<a href="z1_bibliography.xhtml#pe92">pe92</a>]</span> есть специальная форма <code><span class="func">let/cc</span></code> со следующим
синтаксисом:</p>

<pre>(let/cc |\ii{переменная}| |\ii{формы}|...)  |\dialect<span class="logo">EuLisp</span>|</pre>

<p>\phantomlabel{escape/comparing/par:bind-exit}
<!--\indexC{bind-exit}-->
В диалекте Dylan <span class="cite">[<a href="z1_bibliography.xhtml#app92b">app92b</a>]</span> тоже есть подобная форма:</p>

<pre>(bind-exit (|\ii{переменная}|) |\ii{формы}|...)  |\dialect{Dylan}|</pre>

<p>\noindent
Эта форма связывает текущее продолжение с \ii{переменной}, имеющей область
видимости, ограниченную телом <code><span class="func">let/cc</span></code> или <code><span class="func">bind-exit</span></code>. В этом случае
продолжение несомненно является полноценным объектом, имеющим интерфейс унарной
функции. Но его <em>полезное</em> время жизни динамическое, его можно использовать
лишь во время вычисления тела формы <code><span class="func">let/cc</span></code> или <code><span class="func">bind-exit</span></code>. Точнее, само
продолжение, хранящееся в \ii{переменной}, имеет неограниченное время жизни, но
становится бесполезным при выходе из связывающей формы. Это характерная для
<span class="logo">EuLisp</span> и Dylan черта, но её нет как в Scheme (где продолжения истинно
неограниченны), так и в <span class="logo">Common Lisp</span> (где они вообще объекты второго класса).
Тем не менее, такое поведение можно проэмулировать в Scheme:</p>

<pre>(define-syntax let/cc
  (syntax-rules ()
    ((let/cc variable . body)
     (block variable
       (let ((variable (lambda (x) (return-from variable x))))
         . body ) ) ) ) )</pre>


<!--\indexR{продолжения (continuations)!варианты представления}-->
<p>В мире Scheme продолжения больше нельзя считать неявной частью стека, так как
они могут храниться во внешних структурах данных. Поэтому приходится применять
другую модель: древовидную, которую иногда называют <em class="term">стек-кактус</em> или
<em class="term">спагетти-стек</em>. Наиболее простой способ её реализовать: вообще
не пользоваться аппаратным стеком, размещая все фреймы в куче.</p>

<p>Такой подход унифицирует выделение памяти под структуры данных и, по
мнению <span class="cite">[<a href="z1_bibliography.xhtml#as94">as94</a>]</span>, облегчает портирование. Тем не менее, он приводит
к фрагментации, что вынуждает явно хранить ссылки между продолжениями. (Хотя
в <span class="cite">[<a href="z1_bibliography.xhtml#mb93">mb93</a>]</span> приведено несколько вариантов решения этих проблем.) Как правило,
ради эффективности в аппаратный стек стараются поместить максимум данных о ходе
исполнения программы, так что каноническая реализация <code><span class="func">call/cc</span></code> делает снимки
стека и сохраняет в куче именно их; таким образом, продолжения — это как раз
такие снимки стека. Конечно, существуют и другие варианты реализации,
рассмотренные, например, в \cite{cho88, hdb90}, где используются разделяемые
копии, отложенное копирование, частичное копирование и т. д. Естественно,
каждый из этих вариантов даёт свои преимущества, но за определённую плату.</p>

<p>Форма <code><span class="func">call/cc</span></code> больше похожа на <code><span class="func">block</span></code>, нежели на <code><span class="func">catch</span></code>. Оба типа
продолжений имеют лексическую область видимости, они различаются только временем
жизни. В некоторых диалектах, вроде <span class="cite">[<a href="z1_bibliography.xhtml#im89">im89</a>]</span>, есть урезанный вариант
<code><span class="func">call/cc</span></code>. Называется он <code><span class="func">call/ep</span></code> (от <em class="term">call with exit procedure</em>);
эта <em>процедура выхода</em> хорошо видна в <code><span class="func">block</span></code>/<code><span class="func">return-from</span></code>, равно
как и в <code><span class="func">let/cc</span></code>. Интерфейс у <code><span class="func">call/ep</span></code> такой же, как и у <code><span class="func">call/cc</span></code>:</p>


<!--\indexC{call/ep}-->
<pre>(call/ep (lambda (exit) ...))</pre>


<!--\indexR{объекты!второго класса}-->
<p>Переменная <code><span class="func">exit</span></code> унарной функции-аргумента связывается с продолжением формы
<code><span class="func">call/ep</span></code> на время вычисления тела этой функции. Схожесть с <code><span class="func">block</span></code>
налицо, разве что мы используем обычное окружение переменных, а не отдельное
окружение лексических меток. Основное их отличие в том, что <code><span class="func">call/ep</span></code> делает
продолжение полноценным объектом, который можно использовать так же, как любой
другой объект вроде чисел, замыканий или списков. Имея <code><span class="func">block</span></code>, мы тоже можем
создать функционально аналогичный объект, написав \ic{(lambda (x) (return-from
\ii{метка} x))}. Но все возможные места выхода из <code><span class="func">block</span></code> известны статически
(это соответствующие формы <code><span class="func">return-from</span></code>), тогда как в <code><span class="func">call/ep</span></code> совсем
по-другому: например, по выражению <code><span class="func">(call/ep foo)</span></code> нельзя понять, может ли
произойти переход или нет. Единственный способ это узнать — проанализировать
<code><span class="func">foo</span></code>, но эта функция может быть определена в совершенно другом месте, а то и
вовсе генерироваться динамически. Следовательно, функция <code><span class="func">call/ep</span></code> более
сложна для компилятора, чем специальная форма <code><span class="func">block</span></code>, но вместе с тем имеет
и больше возможностей.</p>

<p>Продолжая сравнивать <code><span class="func">call/ep</span></code> и <code><span class="func">block</span></code>, мы замечаем больше отличий.
Например, для формы <code><span class="func">call/ep</span></code>, в которой аргумент записан в виде явной
<code><span class="func">lambda</span></code>-формы, можно не создавать замыкание. Следовательно, эффективный
компилятор должен отделять случай <code><span class="func">(call/ep (lambda ...))</span></code> от остальных. Это
похоже на специальные формы, так как они тоже трактуются по-особенному. В Scheme
принято использовать функции как основной инструмент построения абстракций,
тогда как специальные формы являются чем-то вроде подсказок компилятору. Они
часто одинаково мощны, вопрос лишь в балансе сложности — кому важнее
облегчить жизнь: пользователю или, наоборот, разработчику языка.</p>

<div class="bigskip"/>

<p>Подводя итог, если вам нужна мощь за адекватную цену, то <code><span class="func">call/cc</span></code> к вашим
услугам, так как она позволяет реализовать все мыслимые управляющие конструкции:
переходы, сопрограммы, частичные продолжения и так далее. Если же вам нужны
только «нормальные» вещи (а Лисп уже не раз показывал, что можно писать
удивительные программы и без <code><span class="func">call/cc</span></code>), то используйте управляющие формы
<span class="logo">Common Lisp</span>, простые и компилирующиеся в эффективный машинный код.</p>

<h2 id="escape/sect:pr-cont">Продолжения в программировании</h2>


<!--\indexE{CPS}-->
<!--\indexR{стиль передачи продолжений (CPS)}-->
<!--\indexR{продолжения (continuations)|seealso{стиль передачи продолжений (CPS)}}-->
<p>Существует стиль программирования, называемый «<em class="term">стилем передачи
продолжений</em>» (\english{continuation passing style}, CPS). В нём во главу угла
ставится явное указание не только того, что возвращать в качестве результата
функции, но и кому. После завершения вычислений функция не возвращает результат
абстрактному получателю куда-то «наверх», а применяет конкретного получателя,
представленного продолжением, к результату. В общем, если у нас есть вычисление
<code><span class="func">(foo (bar))</span></code>, то оно выворачивается наизнанку, преобразуясь в следующий вид:
<code><span class="func">(new-bar foo)</span></code>, где <code><span class="func">foo</span></code> и является продолжением, которому <code><span class="func">new-bar</span></code>
передаст результат вычислений. Давайте рассмотрим данное преобразование
на примере многострадального факториала. Пусть мы хотим вычислить $n(n!)$:</p>


<!--\indexC{fact}-->
<pre>(define (fact n k)
  (if (= n 0) (k 1)
      (fact (- n 1) (lambda (r) (k (* n r)))) ) )</p>

<p>(fact n (lambda (r) (* n r))) |\is| |$n(n!)$|</pre>

<p>Факториал теперь принимает дополнительный аргумент <code><span class="func">k</span></code>: получателя
вычисленного факториала. Если результат равен единице, то к ней просто
применяется <code><span class="func">k</span></code>. Если же результат сразу сказать нельзя, то следует ожидаемый
рекурсивный вызов. Проблема состоит в том, что хорошо было бы сначала умножить
факториал $(<code><span class="func">n</span></code> - 1)$ на <code><span class="func">n</span></code> и только потом уже передавать произведение
получателю, а форма <code><span class="func">(k (* n (fact (- n 1) k)))</span></code> делает всё наоборот! Поэтому
и мы всё сделаем шиворот-навыворот: пусть получатель сам умножает результат
на <code><span class="func">n</span></code>. Настоящий получатель оборачивается в функцию: <code><span class="func">(lambda (r) (k
(* n r)))</span></code>, и передаётся следующему рекурсивному вызову.</p>

<p>Такое определение факториала даёт возможность вычислять различные величины
с помощью одного и того же определения. Например, обычный факториал: \ic{(fact
\ii{n} (lambda (x) x))}, или удвоенный: \ic{(fact \ii{n} (lambda (x) (* 2 x)))},
или что-то более сложное.</p>

<h3 id="escape/pr-cont/ssect:multiple">Составные значения</h3>


<!--\indexR{возвращаемые значения!множественные}-->
<!--\indexR{множественные значения}-->
<p>Продолжения очень удобно использовать для обработки составных величин.
Существуют вычисления, результатом которых является не одна величина, а
несколько. Например, в <span class="logo">Common Lisp</span> целочисленное деление (<code><span class="func">truncate</span></code>)
одновременно возвращает частное и остаток. Пусть у нас тоже есть подобная
функция — назовём её <code><span class="func">divide</span></code>, — которая принимает два числа и
продолжение, вычисляет частное и остаток от деления, а затем применяет
переданное продолжение к этим величинам. Например, вот так можно проверить
правильность выполнения деления этой функцией:</p>

<pre>(let* ((p (read)) (q (read)))
  (divide p q (lambda (quotient remainder)
                (= p (+ (* quotient q) remainder)) )) )</pre>

<p>Менее тривиальный пример — вычисление коэффициентов Безу.\footnote*{Фух!
Наконец-то мне удалось опубликовать эту функцию! Она с 1981 года валяется
у меня без дела.} Соотношение Безу утверждает, что для любых целых чисел $n$
и $p$ можно найти такую пару целых $u$ и $v$, что $un + vp = \NOD(n, p)$. Для
вычисления коэффициентов $u$ и $v$ можно использовать расширенный алгоритм
Евклида.</p>


<!--\indexC{bezout}-->
<pre>(define (bezout n p k)  ; пусть $n > p$
  (divide
   n p (lambda (q r)
         (if (= r 0)
             (k 0 1)    ; т.\,к. $0 \cdot qp + 1 \cdot p = p$
             (bezout
              p r (lambda (u v)
                    (k v (- u (* v q))) ) ) ) ) ) )</pre>

<p>Функция <code><span class="func">bezout</span></code> использует <code><span class="func">divide</span></code>, чтобы сохранить в <code><span class="func">q</span></code> и <code><span class="func">r</span></code>
частное и остаток от деления <code><span class="func">n</span></code> на <code><span class="func">p</span></code>. Если $n$ делится нацело на $p$,
то очевидно, что их наибольший общий делитель равен $p$ и есть тривиальное
решение: $0$ и $1$. Если остаток не равен нулю, то\textdots\ попробуйте доказать
правильность этого алгоритма самостоятельно; для этого не надо быть экспертом
в теории чисел, достаточно знать свойства НОД. А здесь мы ограничимся простой
проверкой:</p>

<pre>(bezout 1991 1960 list) |\is| (-569 578)</pre>

<h3 id="escape/pr-cont/ssect:tail-recusion">Хвостовая рекурсия</h3>

<p>В примере с вычислением факториала с помощью продолжений вызов <code><span class="func">fact</span></code> в конце
концов приводил к ещё одному вызову <code><span class="func">fact</span></code>. Если мы проследим за вычислением
<code><span class="func">(fact 3 list)</span></code>, то, отбрасывая очевидные шаги, получим следующую картину:</p>

<pre>(fact 3 list)
|\eq| (fact 2 (lambda (r) (k (* n r))))|\begin{where}
                                        \- n {\is} 3
                                        \- k {\eq} list
                                        \end{where}|
|\eq| (fact 1 (lambda (r) (k (* n r))))|\begin{where}
                                \- n {\is} 2
                                \- k {\is} (lambda (r) (k (* n r)))\begin{where}
                                                                  \- n {\is} 3
                                                                  \- k {\eq} list
                                                                  \end{where}
                                        \end{where}|
|\eq| (k (* n 1))|\begin{where}
                  \- n {\is} 2
                  \- k {\is} (lambda (r) (k (* n r)))\begin{where}
                                                    \- n {\is} 3
                                                    \- k {\eq} list
                                                    \end{where}
                  \end{where}|
|\eq| (k (* n 2))|\begin{where}
                  \- n {\is} 3
                  \- k {\eq} list
                  \end{where}|
|\is| (6)</pre>


<!--\indexR{рекурсия!хвостовая}-->
<!--\indexR{хвостовые вызовы!рекурсивные}-->
<!--\indexR{вызов!хвостовой}-->
<p>Когда <code><span class="func">fact</span></code> вызывает <code><span class="func">fact</span></code>, вторая функция вычисляется с тем же
продолжением, что и первая. Такое явление называется <em class="term">хвостовой рекурсией</em>
— почему рекурсия, понятно, а хвостовая, потому что этот вызов выполняется
в «хвосте» вычислений: сразу же после него следует выход из функции. Хвостовая
рекурсия — это частный случай хвостового вызова. Хвостовой вызов происходит
тогда, когда текущее вычисление может быть полностью заменено вызываемым.
То есть вызов происходит из <em class="term">хвостовой позиции</em>, если он выполняется
с <em>неизменным продолжением</em>.</p>

<p>В примере с вычислением коэффициентов Безу функция <code><span class="func">bezout</span></code> вызывает
<code><span class="func">divide</span></code> из хвостовой позиции. Функция <code><span class="func">divide</span></code> вызывает своё продолжение
из хвостовой позиции. Это продолжение рекурсивно вызывает <code><span class="func">bezout</span></code> опять-таки
из хвостовой позиции.</p>

<p>Но в классическом факториале <code><span class="func">(* n (fact (- n 1)))</span></code> рекурсивный вызов
<code><span class="func">fact</span></code> происходит не из хвостовой позиции. Он <em>завёрнут</em> в продолжение,
так как значение <code><span class="func">(fact (- n 1))</span></code> ещё ожидается для умножения на <code><span class="func">n</span></code>;
вызов тут не является последней необходимой операцией, всё вычисление нельзя
свести к нему.</p>

<p>Хвостовые вызовы позволяют отбрасывать ненужные окружения и фреймы стека, так
как при таких вызовах они больше никогда не будут использоваться. Следовательно,
их можно не сохранять, экономя таким образом драгоценную стековую память.
Подобные оптимизации были детально изучены французским лисп-сообществом, что
позволило существенно ускорить интерпретацию \cite{gre77,cha80,sj87};
см. также <span class="cite">[<a href="z1_bibliography.xhtml#han90">han90</a>]</span>.</p>

<div class="bigskip"/>


<!--\indexCS{evaluate-begin}{хвостовая рекурсия}-->
<p>Оптимизация хвостовой рекурсии — это очень желанное свойство интерпретатора;
не только для пользователя, но и для самого интерпретатора. Самое очевидное
место, где она была бы полезной, — это форма <code><span class="func">begin</span></code>. До сих пор она
определялась следующим образом:</p>

<pre>(define (evaluate-begin e* r k)
  (if (pair? e)
      (if (pair? (cdr e*))
          (evaluate (car e*) r (make-begin-cont k e* r))
          (evaluate (car e*) r k) )
      (resume k empty-begin-value) ) )</p>

<p>(define-method (resume (k begin-cont) v)
  (evaluate-begin (cdr (begin-cont-e* k))
                  (begin-cont-r k)
                  (begin-cont-k k) ) )</pre>

<p>Заметьте, здесь каждый вызов является хвостовым. Также здесь используется одна
небольшая оптимизация. Можно определить эту форму проще:</p>

<pre>(define (evaluate-begin e* r k)
  (if (pair? e*)
      (evaluate (car e*) r (make-begin-cont k e* r))
      (resume k empty-begin-value) ) )</p>

<p>(define-method (resume (k begin-cont) v)
  (let ((e* (cdr (begin-cond-e* k))))
    (if (pair? e*)
        (evaluate-begin e* (begin-cont-r k) (begin-cont-k k))
        (resume (begin-cont-k k) v) ) ) )</pre>

<p>Но первый вариант предпочтительнее, так как в этом случае при вычислении
последнего оставшегося выражения мы не тратим время на создание лишнего
продолжения <code><span class="func">(make-begin-cont k e* r)</span></code>, которое фактически равно <code><span class="func">k</span></code>, а
сразу же переходим в нужное продолжение. Конечно, в Лиспе есть сборка мусора, но
это не означает, что можно мусорить ненужными объектами на каждом шагу. Это
небольшая, но важная оптимизация, ведь каждый <code><span class="func">begin</span></code> когда-нибудь
заканчивается!</p>


<!--\indexCS{evaluate-arguments}{хвостовая рекурсия}-->
<p>Аналогично можно оптимизировать и вычисление аргументов функции, переписав его
следующим образом:</p>

<pre>(define-class no-more-argument-cont continuation ())</p>

<p>(define (evaluate-arguments e* r k)
  (if (pair? e*)
      (if (pair? (cdr e*))
          (evaluate (car e*) r (make-argument-cont k e* r))
          (evaluate (car e*) r (make-no-more-argument-cont k)) )
      (resume k no-more-arguments) ) )</p>

<p>(define-method (resume k (make-no-more-argument-cont) v)
  (resume (no-more-argument-cont-k k) (list v)) )</pre>

<p>Это новое продолжение, хранящее список из последнего вычисленного значения,
избавляет нас от необходимости передавать окружение <code><span class="func">r</span></code> целиком. Данный приём
впервые использован Митчеллом Уондом и Дэниелом Фридманом в <span class="cite">[<a href="z1_bibliography.xhtml#wan80b">wan80b</a>]</span>.</p>

<h2 id="escape/sect:partial">Частичные продолжения</h2>


<!--\indexR{продолжения (continuations)!частичные продолжения}-->
<p>Среди прочих вопросов, поднимаемых продолжениями, есть ещё один довольно
интересный: что именно случается с отбрасываемым при переходе кодом? Другими
словами, с тем куском продолжения (или стека), который находится между
положениями до прыжка и после. Мы говорили, что такой <em class="term">срез</em> стека
не сохраняется при переходе. Но он вовсе не является бесполезным: ведь если бы
через него не перешагнули, то он бы принял какое-то значение, выполнил
определённые действия и передал бы полученное значение своему продолжению.
То есть вёл бы себя как обычная функция. Во многих работах, вроде
\cite{ffdm87,ff87,fel88,df90,hd90,qs91,mq94}, приводятся способы сохранения и
приёмы использования этих срезов — <em class="term">частичных продолжений</em>
(\english{partial/delimited continuations}).</p>

<p>Рассмотрим следующий простой пример:</p>

<pre>(+ 1 (call/cc (lambda (k) (set! foo k) 2))) |\is| 3
(foo 3)                                     |\is| 4</pre>

<p>\noindent
Какое именно продолжение хранится в <code><span class="func">foo</span></code>? Казалось бы $\lambda u . 1 + u$,
но чему тогда равно <code><span class="func">(foo (foo 4))</span></code>?</p>

<pre>(foo (foo 4))                               |\is| 5</pre>


<!--\indexR{композициональность!продолжений}-->
<!--\indexR{продолжения (continuations)!композициональность}-->
<p>Получается <code><span class="func">5</span></code>, а не ожидаемое значение <code><span class="func">6</span></code>, которое бы получилось при
правильной композиции функций. Дело в том, что вызов продолжения означает
отбрасывание всех последующих вычислений ради продолжения других вычислений.
Таким образом, вызов продолжения внутри <code><span class="func">foo</span></code> приводит к вычислению значения
$\lambda u. 1 + u$ при $u = 4$, которое становится значением всего выражения, и
второй вызов <code><span class="func">foo</span></code> вообще не происходит — он не нужен, ведь значение
выражения уже вычислено и передано продолжению! Именно в этом проблема: мы
захватили обычное продолжение, а не частичное. Обычные продолжения
<em class="term">активируются</em> и полностью заменяют стек собой, а <em>не вызываются</em>
как функции.</p>

<p>Возможно, так будет понятнее. В <code><span class="func">foo</span></code> мы сохранили <code><span class="func">(+ 1 [])</span></code>. Это всё,
что ещё осталось вычислить. Так как аргументы передаются по значению, то
вычисление аргумента-продолжения в <code><span class="func">(foo (foo 4))</span></code> фактически завершает
вычисления, отбрасывает <code><span class="func">(foo [])</span></code> и возвращает значение формы <code><span class="func">(+ 1 4)</span></code>,
которое, очевидно, равно <code><span class="func">5</span></code>.</p>


<!--\indexR{продолжения (continuations)!и интерактивная сессия}-->
<!--\indexR{интерактивная сессия (REPL)!продолжения}-->
<!--\indexE{REPL!продолжения}-->
<p>Частичные продолжения представляют собой лишь часть оставшихся вычислений, тогда
как обычные продолжения — это <em>все</em> оставшиеся вычисления.
В статьях \cite{fwfd88,df90,hd90,qs91} приводятся способы захвата частичных и,
следовательно, поддающихся композиции продолжений. Предположим, теперь
с <code><span class="func">foo</span></code> связано продолжение <code><span class="func">[(+ 1 [])]</span></code>, где внешние квадратные скобки
означают, что оно ведёт себя как функция. Тогда <code><span class="func">(foo (foo 4))</span></code> будет
эквивалентно уже <code><span class="func">(foo [(+ 1 [4])])</span></code>, что превращается в <code><span class="func">(+ 1 5)</span></code>,
которое в итоге даёт <code><span class="func">6</span></code>. Захваченное продолжение <code><span class="func">[(+ 1 [])]</span></code> определяет
не все последующие вычисления, которые когда-либо произойдут, а только их часть
вплоть до момента возврата значения. Для интерактивной сессии продолжением
обычных продолжений является <em class="term">главный цикл</em> (он же <code><span class="func">toplevel</span></code>), именно
ему продолжения передают своё значение, а он выводит его на экран, читает
следующее выражение из входного потока, вычисляет его и так далее. Продолжение
частичных продолжений неизвестно, именно поэтому они конечны и ведут себя как
обычные функции — ведь функции тоже не знают, кому они вернут значение.</p>

<p>Давайте взглянем на наш пример с <code><span class="func">(set! foo k)</span></code> с другой стороны. Оставим всё
по-прежнему, но объединим эти два выражения в явную последовательность:</p>

<pre>(begin (+ 1 (call/cc (lambda (k) (set! foo k) 2)))
       (foo 3) )</pre>

<p>Бабах! Мы получили бесконечный цикл, так как <code><span class="func">foo</span></code> оказывается теперь
связанной с <code><span class="func">(begin (+ 1 []) (foo 3))</span></code>, что приводит к рекурсии. Как видим,
главный цикл — это не только последовательное вычисление выражений. Если мы
хотим правильно его проэмулировать, то вдобавок необходимо изменять продолжение
каждого вычисляемого в главном цикле выражения:</p>

<pre>(let (foo sequel print?)
  (define-syntax toplevel
    (syntax-rules ()
      ((toplevel e) (toplevel-eval (lambda () e))) ) )
  (define (toplevel-eval thunk)
    (call/cc (lambda (k)
               (set! print? #t)
               (set! sequel k)
               (let ((v (thunk)))
                 (when print? (display v) (set! print? #f))
                 (sequel v) ) )) )
  (toplevel (+ 1 (call/cc (lambda (k) (set! foo k) 2))))
  (toplevel (foo 3))
  (toplevel (foo (foo 4))) )</pre>

<p>Каждый раз, когда мы хотим вычислить выражение с помощью <code><span class="func">toplevel</span></code>, его
продолжение — <em>продолжение</em> работы <code><span class="func">toplevel</span></code> — сохраняется
в переменной <code><span class="func">sequel</span></code>. Любое продолжение, захватываемое внутри <code><span class="func">thunk</span></code>,
теперь будет ограничено текущей вычисляемой формой. Аналогичным образом применяя
присваивание, можно сохранить любой срез стека в виде частичного продолжения.
Как видим, все продолжения с неограниченным временем жизни для своего создания
требуют побочных эффектов.</p>


<!--\indexR{присваивание!роль для продолжений}-->
<p>Частичные продолжения явно указывают, когда необходимо остановить вычисления.
Этот эффект может быть полезен в некоторых случаях, а также интересен сам по
себе. Мы вполне можем даже переписать нашу <code><span class="func">call/cc</span></code> так, чтобы она
захватывала именно частичные продолжения вплоть до <code><span class="func">toplevel</span></code>. Естественно,
кроме них потребуются также и переходы на тот случай, когда мы действительно
не заинтересованы в сохранении срезов стека. Но, с другой стороны, частичные
продолжения в реальности используются довольно редко; сложно привести пример
программы, где частичные продолжения были бы действительно полезны, но при этом
не усложняли бы её сильнее обычных. Тем не менее, они важны как ещё один пример
управляющей формы, которую можно реализовать на Scheme с помощью <code><span class="func">call/cc</span></code>
и присваивания.</p>

<h2 id="escape/sect:conclusions">Заключение</h2>

<p>Продолжения вездесущи. Если вы понимаете продолжения, вы одновременно овладели
ещё одним стилем программирования, получили широчайшие возможности управления
ходом вычислений и знаете, во что вам обойдётся это управление. Продолжения
тесно связаны с потоком исполнения, так как они динамически определяют всё, что
ещё осталось сделать. Поэтому они так важны и полезны для обработки исключений.</p>

<p>Интерпретатор, определённый в этой главе, довольно мощный, но легко понятный
только по частям. Это обычное дело для объектно-ориентированного стиля: есть
много маленьких и простых кусочков, но не так просто составить понимание цельной
картины того, как они работают вместе. Интерпретатор модульный и легко
расширяется новыми возможностями. Он не особо быстрый, так как в процессе работы
создаёт целую гору объектов, которые удаляются тут же после использования.
Конечно, это является одной из задач компилятора: выяснить, какие из объектов
действительно стоит создавать и сохранять.</p>


<h2 id="escape/sect:exercises">Упражнения</h2>

<h5 class="exercise" id="escape/ex:cc-cc">Упражнение <span class="seq">0.0</span></h5>
<p>Что вернёт <code><span class="func">(call/cc call/cc)</span></code>? Зависит ли ответ от порядка вычислений?</p>


<h5 class="exercise" id="escape/ex:cc-cc-cc-cc">Упражнение <span class="seq">0.0</span></h5>
<p>А что вернёт <code><span class="func">((call/cc call/cc) (call/cc call/cc))</span></code>?</p>


<h5 class="exercise" id="escape/ex:tagbody">Упражнение <span class="seq">0.0</span></h5>
<!--\indexC{tagbody}-->
<!--\indexC{go}-->
<p>Реализуйте пару <code><span class="func">tagbody</span></code>/<code><span class="func">go</span></code> с помощью <code><span class="func">block</span></code>, <code><span class="func">catch</span></code> и
<code><span class="func">labels</span></code>. Напомним синтаксис этой формы из <span class="logo">Common Lisp</span>:</p>

<pre>(tagbody
          |\ii{выражения\sub{0}}|...
  |\hbox to 0pt{\ii{метка\sub{1}}}|        |\ii{выражения\sub{1}}|...
          ...
  |\hbox to 0pt{\ii{метка\sub{i}}}|        |\ii{выражения\sub{i}}|...
          ... )</pre>

<p>Все \ii{выражения\sub{i}} (и только они) могут содержать безусловные переходы
\ic{(go \ii{метка})} и возвраты \ic{(return \ii{значение})}. Если <code><span class="func">return</span></code>
не будет, то форма <code><span class="func">tagbody</span></code> возвращает <code><span class="func">nil</span></code>.</p>


<h5 class="exercise" id="escape/ex:arity-optimize">Упражнение <span class="seq">0.0</span></h5>
<p>Вы скорее всего заметили, что функции при вызове проверяют фактическую арность:
количество переданных им аргументов. Измените механизм создания функций так,
чтобы правильная арность рассчитывалась только один раз. Можете считать, что
функции бывают только фиксированной арности.</p>


<h5 class="exercise" id="escape/ex:apply">Упражнение <span class="seq">0.0</span></h5>
<p>Определите функцию <code><span class="func">apply</span></code> для интерпретатора из этой главы.</p>


<h5 class="exercise" id="escape/ex:dotted">Упражнение <span class="seq">0.0</span></h5>
<p>Реализуйте поддержку функций переменной арности для интерпретатора из этой
главы.</p>


<h5 class="exercise" id="escape/ex:evaluate">Упражнение <span class="seq">0.0</span></h5>
<p>Измените функцию запуска интерпретатора так, чтобы она вызывала <code><span class="func">evaluate</span></code>
только единожды.</p>


<h5 class="exercise" id="escape/ex:cc-value">Упражнение <span class="seq">0.0</span></h5>
<p>Способ реализации продолжений из
раздела \ref{escape/implementation/ssect:call/cc} отделяет продолжения от других
значений. Поэтому мы вынуждены реализовывать метод <code><span class="func">invoke</span></code> лично для класса
продолжений, представляемых функциями языка определения. Переопределите
<code><span class="func">call/cc</span></code> так, чтобы она возвращала объекты определяемого языка, являющиеся
экземплярами класса-наследника <code><span class="func">value</span></code>, соответствующего продолжениям.</p>


<h5 class="exercise" id="escape/ex:eternal">Упражнение <span class="seq">0.0</span></h5>
<!--\indexR{бесконечный цикл}-->
<p>Напишите на <span class="logo">Common Lisp</span> функцию <code><span class="func">eternal-return</span></code>, принимающую замыкание и
вызывающую его в бесконечном цикле. Этот цикл должен быть истинно бесконечным:
перекройте абсолютно все выходы из него.</p>


<h5 class="exercise" id="escape/ex:crazy-cc">Упражнение <span class="seq">0.0</span></h5>
<p>Рассмотрим следующую хитроумную функцию (спасибо за неё Алану Бодену):</p>


<!--\indexR{коробки}-->
<!--\indexC{make-box}-->
<pre>(define (make-box value)
  (let ((box
         (call/cc
          (lambda (exit)
            (letrec
             ((behavior
               (call/cc
                (lambda (store)
                  (exit (lambda (msg . new)
                          (call/cc
                           (lambda (caller)
                             (case msg
                               ((get) (store (cons (car behavior)
                                                   caller )))
                               ((set)
                                (store
                                 (cons (car new)
                                       caller ) ) ) ) ) ) )) ) ) ))
             ((cdr behavior) (car behavior)) ) ) ) ))
    (box 'set value)
    box ) )</pre>

<p>Предположим, в <code><span class="func">box1</span></code> лежит значение <code><span class="func">(make-box 33)</span></code>, тогда что получится
в результате следующих вычислений?</p>

<pre>(box1 'get)
(begin (box1 'set 44) (box1 'get))
\end{code:lisp}</p>


<h5 class="exercise" id="escape/ex:generic-evaluate">Упражнение <span class="seq">0.0</span></h5>
<p>Среди всех наших функций только <code><span class="func">evaluate</span></code> не является обобщённой. Можно
создать класс программ, от которого будут наследоваться подклассы программ
с различным синтаксисом. Правда, в этом случае мы не сможем хранить программы
как S-выражения, они должны быть объектами. Соответственно, функция
<code><span class="func">evaluate</span></code> уже должна быть обобщённой. Это позволит легко вводить новые
специальные формы (возможно, даже прямо из определяемого языка). Воплотите эту
идею в жизнь.</p>


<h5 class="exercise" id="escape/ex:throw">Упражнение <span class="seq">0.0</span></h5>
<p>Реализуйте оператор <code><span class="func">throw</span></code> как функцию, а не специальную форму.</p>


<h5 class="exercise" id="escape/ex:cps-speed">Упражнение <span class="seq">0.0</span></h5>
<p>Сравните скорость выполнения обычного кода и переписанного в стиле передачи
продолжений.</p>


<h5 class="exercise" id="escape/ex:the-current-cc">Упражнение <span class="seq">0.0</span></h5>
<!--\indexC{the-current-continuation}-->
<p>Реализуйте <code><span class="func">call/cc</span></code> с помощью функции <code><span class="func">the-current-continuation</span></code>, которая
определяется следующим образом:</p>

<pre>(define (the-current-continuation)
  (call/cc (lambda (k) k)) )
\end{code:lisp}</p>

<p>
\section*{Рекомендуемая литература}\label{escape/sect:recommended-reading}</p>

<p>Годный, нетривиальный пример использования продолжений приведён в
<span class="cite">[<a href="z1_bibliography.xhtml#wan80a">wan80a</a>]</span>. Также стоит почитать <span class="cite">[<a href="z1_bibliography.xhtml#hfw84">hfw84</a>]</span> об эмуляции сопрограмм.
В <span class="cite">[<a href="z1_bibliography.xhtml#dr87">dr87</a>]</span> прекрасно рассказано о развитии понимания важности рефлексии
для управляющих форм.</p>

<p></body>
</html>
