<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru"></p>

<p><body>
\chapter{Переходы~и~возвраты: продолжения}\label{chapter:escape}</p>

<p>\initial{0.25ex}{0.0ex}{К}{аждое вычисление} в~конечном счёте
приводит к~возврату результата сущности, которая называется \term{продолжением}.
В~данной главе разбирается эта идея и её исторические предпосылки. Мы также
создадим ещё один интерпретатор, призванный явно оперировать продолжениями.
В~процессе разработки будут рассмотрены различные варианты реализации
продолжений в~Лиспе и Scheme, а также своеобразный «стиль передачи
продолжений». Одним из отличий Лиспа от других языков является большое
количество механизмов управления ходом вычислений. Это в~некотором смысле
превращает данную главу в~каталог \cite{moz87}, где представлена тысяча~и~одна
управляющая конструкция. С~другой стороны, мы не~будем вдаваться в~подробности
о~продолжениях; по крайней мере, о~том, как физически реализуется их захват и
сохранение. Наш интерпретатор будет использовать объекты для представления
продолжений в~виде \term{стека вызовов}.</p>

<p>\bigskip</p>

<p>\indexR{переходы (escapes)}
Интерпретаторам, построенным нами ранее, было необходимо только окружение, чтобы
вычислить значение переданного выражения. К~сожалению, они не~в~состоянии
проводить вычисления, в~которых есть \term{переходы} (escapes): полезная
управляющая конструкция, позволяющая покинуть текущий контекст исполнения, чтобы
перейти в~другой, более подходящий. Обычно они используются для обработки
исключительных ситуаций, когда мы указываем, куда нам следует перейти для
обработки события или ошибки, прервавшей нормальный ход вычислений.</p>

<p>\indexC{prog}
\indexC{goto}
История переходов в~Лиспе восходит ко~временам \LISP~1.5 и формы~\ic{prog}.
Сейчас эта форма считается устаревшей, но раньше на неё возлагались большие
надежды по переманиванию программистов на~Алголе в~ряды лисперов, так как
считалось, что для них было более привычным использование \ic{goto}. Вместо
этого оказалось, что данная форма больше влияет на самих лисперов, сталкивая их
с~праведного пути хвостовой рекурсии.\footnote*{Например, сравните стили
изложения первого и третьего изданий~\cite{wh89}.} Тем не~менее, форма \ic{prog}
достойна рассмотрения, потому как обладает несколькими интересными свойствами.
Например, вот так с~её помощью записывается факториал:</p>

<p>\indexC{fact}
\begin{code:lisp}
(defun fact (n)     |\dialect{\CommonLisp}|
  (prog (r)
            (setq r 1)
       loop (cond ((= n 1) (return r)))
            (setq r (* n r))
            (setq n (- n 1))
            (go loop) ) )
\end{code:lisp}</p>

<p>Специальная форма \ic{prog} сначала объявляет все используемые локальные
переменные (в~данном случае это~\ic{r}). Далее следуют инструкции
(представляемые списками) и метки (представляемые символами). Инструкции
последовательно вычисляются, как в~\ic{progn}. Результатом вычисления формы
\ic{prog} по умолчанию является \ic{nil}. Но внутри \ic{prog} можно использовать
специальные инструкции. Безусловные переходы выполняются с~помощью \ic{go}
(которая принимает символ "--- имя метки), а вернуть определённое значение из
\ic{prog} можно с~помощью \ic{return}. В~\LISP~1.5 было лишь одно ограничение:
формы \ic{go} и \ic{return} могли появляться только на первом уровне вложенности
или внутри \ic{cond} на том~же первом уровне.</p>

<p>Форма \ic{return} позволяла выйти из \ic{prog}, забрав с~собой результат
вычислений. Ограничение \LISP~1.5 допускало лишь простые переходы, в~более
поздних версиях оно было снято, что позволило реализовать более изощрённые
варианты поведения. Переходы стали обычным способом обработки ошибок. Если
происходила ошибка, то выполнение переходило из ошибочного контекста исполнения
в~безопасный для обработки возникшей ситуации. Теперь можно переписать факториал
следующим образом, поместив \ic{return} глубже:</p>

<p>\begin{code:lisp}
(defun fact2 (n)     |\dialect{\CommonLisp}|
  (prog (r)
            (setq r 1)
       loop (setq r (* (cond ((= n 1) (return r))
                             ('else n) )
                       r ))
            (setq n (- n 1))
            (go loop) ) )
\end{code:lisp}</p>

<p>\indexR{управляющие конструкции}
Если рассматривать формы \ic{prog} и \ic{return} только как управляющие
конструкции, то становится ясно, что они влияют на последовательность вычислений
подобно функциям: выполнение функции начинается переходом в~её тело и
заканчивается возвратом результата в~то место, откуда функция была вызвана.
Только в~нашем случае внутри формы \ic{prog} известно, куда требуется вернуть
значение, "--- она сама связывает \ic{return} с~этим местом. Для перехода
не~требуется знать, откуда мы уходим, но необходимо знать, куда мы хотим
попасть.</p>

<p>Если такой \term{прыжок} будет эффективно реализован, то это порождает
жизнеспособную парадигму программирования. Например, пусть стоит задача
проверить вхождение элемента в~двоичное дерево. В~лоб эта задача решается
примерно таким способом:</p>

<p>\indexCS{find-symbol}{обычная}
\begin{code:lisp}
(define (find-symbol id tree)
  (if (pair? tree)
      (or (find-symbol id (car tree))
          (find-symbol id (cdr tree)) )
      (eq? tree id) ) )
\end{code:lisp}</p>

<p>Допустим, мы ищем \ic{foo} в~следующем дереве: \ic{(((a~.~b) . (foo~.~c))
. (d~.~e))}. Так как поиск идёт слева направо и в~глубину, то после того, как
нужный символ будет найден, нам ещё предстоит подниматься обратно по
вложенным~\ic{or}, неся с~собой вожделенную~\ic{\#t}, которая в~конце концов
станет результатом вычислений. Вот так это происходит:</p>

<p>\begin{code:lisp}
(find-symbol 'foo '(((a . b) . (foo . c)) . (d . e)))
|\Equals|   (or (find-symbol 'foo '((a . b) . (foo . c)))
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or (find-symbol 'foo '(a . b))
           (find-symbol 'foo '(foo . c)) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or (or (find-symbol 'foo 'a)
               (find-symbol 'foo 'b) )
           (find-symbol 'foo '(foo . c)) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or (find-symbol 'foo 'b)
           (find-symbol 'foo '(foo . c)) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (find-symbol 'foo '(foo . c))
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or (find-symbol 'foo 'foo)
           (find-symbol 'foo 'c) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or (or #t
           (find-symbol 'foo 'c) )
       (find-symbol 'foo '(d . e)) )
|\Equals|   (or #t
       (find-symbol 'foo '(d . e)) )
|\is| #t
\end{code:lisp}</p>

<p>Как раз здесь~бы не~помешал эффективно реализованный переход к~последней строке.
Как только мы находим нужный символ, то не~продираемся через~\ic{or} и уж тем
более не~смотрим в~другие ветки, а сразу~же возвращаем результат.</p>

<p>\indexR{исключения}
Другим примером может быть так называемое программирование исключениями. Суть
подхода: пусть в~цикле выполняются какие"~то действия. Данный цикл продолжает
выполняться до тех пор, пока не~возникает исключительная ситуация и
не~происходит выход из цикла, который иначе~бы продолжался вечно.
Нечто подобное реализует функция \ic{better-map}, рассматриваемая позже.
\seePage[escape/forms/catch-vs-block/p:better-map]</p>

<p>\indexR{продолжения (continuations)}
Размышляя дальше над природой сущности, представляющей точку входа в~функцию,
можно прийти к~выводу, что понятие вычислений подразумевает не~только выражение,
которое необходимо вычислить, и окружение, в~котором будут проходить вычисления,
но и нечто, куда необходимо вернуть полученный результат. Это нечто и называется
\term{продолжением} (continuation). Это всё, что ещё осталось вычислить.</p>

<p>У~любого вычисления есть продолжение. Например, в~выражении \ic{(+~3 (*~2~4))}
продолжением подвыражения \ic{(*~2~4)} будет сложение, где первый аргумент
это~\ic{3}, а второй ожидается в~результате вычислений. Здесь можно заметить
параллели и представить продолжения в~более привычной форме "--- как функции.
Ведь продолжения тоже представляют некоторые вычисления и, как и функции, тоже
требуют, чтобы сначала были вычислены все необходимые параметры. Для предыдущего
примера продолжением \ic{(*~2~4)} будет функция \ic{(lambda (\ii{x}) (+~3
\ii{x}))}, подчёркивающая тот факт, что вычисление ожидает второй аргумент для
сложения.</p>

<p>Продолжения можно записывать и проще, в~духе $\lambda$"=исчисления. Мы будем
записывать предыдущее продолжение как \ic{(+~3~[])}, где \ic{[]} означает место,
куда необходимо подставить результат вычислений.</p>

<p>Действительно, у~всего есть продолжение. Вычисление условного выражения в~формах
ветвления проводится для продолжения, которое ожидает это значение, чтобы
выбрать ту или иную ветку условной формы. В~выражении \ic{(if (foo) 1 2)}
продолжением вызова \ic{(foo)} является \ic{(lambda (\ii{x}) (if \ii{x} 1 2))}
или \ic{(if [] 1~2)}.</p>

<p>Переходы, исключения и тому подобные механизмы "--- это лишь частные случаи
манипуляции продолжениями. Имея это в~виду, давайте рассмотрим в~деталях
различные варианты использования продолжений, которые были придуманы за
последние тридцать с~лишним лет.</p>

<p>
\section{Формы, манипулирующие~продолжениями}\label{escape/sect:handling}</p>

<p>Явное использование продолжений даёт нам возможность управлять ходом исполнения
программы. Форма \ic{prog} имеет схожие возможности, но при этом обладает
излишним функционалом~\ic{let}. Оставив только функционал управления потоком
исполнения, мы получим то, для чего (в~первую очередь) были придуманы формы
\ic{catch} и~\ic{throw}.</p>

<p>
\subsection{\texorpdfstring%
{Пара \protect\ic{catch}/\protect\ic{throw}}%
{Пара catch/throw}}%
\label{escape/handling/ssect:catch-throw}</p>

<p>\indexC{catch}
\indexE{catch@\protect\ic{catch}|seealso{\protect\ic{throw}}}
\indexR{специальные формы!catch@\protect\ic{catch}}
\indexR{переходы (escapes)!динамические}
Специальная форма \ic{catch} имеет следующий синтаксис:</p>

<p>\begin{code:lisp}
(catch |\ii{метка}| |\ii{формы}|...)
\end{code:lisp}</p>

<p>\ii{Метка} вычисляется и с~ней связывается продолжение формы \ic{catch}. Раз
связывается, то это значит, что нам необходимо новое пространство имён "---
\emph{динамическое окружение меток}, "--- в~котором и будут храниться эти связи.
Это не~совсем пространство \emph{имён}, так как метки не~обязательно являются
идентификаторами, но вполне на него похоже по смыслу. Правда, произвольность
значений меток может вызвать проблемы с~определением их равенства и,
следовательно, с~поиском в~этом окружении, так как не~все значения можно легко
и однозначно сравнивать. К~этому вопросу мы ещё вернёмся.</p>

<p>Оставшиеся \ii{формы} являются телом \ic{catch} и вычисляются последовательно,
как в~\ic{progn} или \ic{begin}. Если ничего не~произошло, то значением
\ic{catch} является значение последней вычисленной формы. Но мы можем вмешаться
в~это поведение с~помощью \ic{throw}.</p>

<p>\indexC{throw}
\indexE{throw@\protect\ic{throw}|seealso{\protect\ic{catch}}}
Форма \ic{throw} имеет следующий синтаксис:</p>

<p>\begin{code:lisp}
(throw |\ii{метка}| |\ii{форма}|)
\end{code:lisp}</p>

<p>\noindent
Первый аргумент должен вычисляться в~значение, с~которым \ic{catch} динамически
связала продолжение. Если это так, то исполнение переходит в~соответствующее
продолжение, а вместо значения \ic{catch} подставляется значение \ii{формы}
из~\ic{throw}.</p>

<p>Вернёмся к~примеру с~поиском в~двоичном дереве и перепишем его с~использованием
\ic{catch} и \ic{throw}. Мы не~будем здесь бессмысленно передавать по
рекурсивным вызовам значение~\ic{id}, так как оно лексически видимо отовсюду;
такое поведение реализовано с~помощью вспомогательной функции.</p>

<p>\indexCS{find-symbol}{с~переходами}
\begin{code:lisp}
(define (find-symbol id tree)
  (define (find tree)
    (if (pair? tree)
        (or (find (car tree))
            (find (cdr tree)) )
        (if (eq? tree id)
            (throw 'find #t)
            #f ) ) )
  (catch 'find
    (find tree) ) )
\end{code:lisp}</p>

<p>Форма \ic{catch}, оправдывая своё название, ловит значение, которое бросает ей
\ic{throw}. Переход в~данном случае обеспечивается явным указанием значения,
связанного с~сохранённым продолжением. То~есть \ic{catch} "--- это связывающая
форма, которая ассоциирует метку с~текущим продолжением. Тогда форма \ic{throw}
фактически ссылается на это продолжение, используя его для управления потоком
вычислений. Сама по себе она не~возвращает значения, \ic{throw} лишь заставляет
\ic{catch} вернуть указанное значение. Здесь \ic{catch} захватывает продолжение
вызова \ic{find-symbol}, а \ic{throw} выполняет прямой переход к~дальнейшим
вычислениям, которые должны выполняться после вызова \ic{find-symbol}.</p>

<p>\ForLayout{display}{\clearpage}</p>

<p>\indexR{динамическое окружение!окружение меток}
Динамическое окружение меток описывается следующей таблицей свойств:</p>

<p>\begin{envtable}
Ссылка      & \ic{(throw \ii{метка} ...)}             \\
Значение    & отсутствует, это объекты второго класса \\
Изменение   & запрещено                               \\
Расширение  & \ic{(catch \ii{метка} ...)}             \\
Определение & запрещено                               \\
\end{envtable}</p>

<p>Как мы уже говорили, \ic{catch} это не~функция, а специальная форма, вычисляющая
свой первый аргумент (метку), затем связывающая с~ней в~динамическом окружении
своё продолжение, после чего вычисляющая оставшиеся формы подобно \ic{begin}.
Не~обязательно все они будут вычислены. Когда \ic{catch} возвращает значение или
мы выходим из неё с~помощью \ic{throw}, связь между меткой и продолжением
автоматически удаляется.</p>

<p>\indexCS{throw}{варианты реализации}
Форму \ic{throw}~же можно реализовать и~как функцию, и~как специальную форму.
Если это специальная форма, как в~{\CommonLisp}, то она вычисляет метку, затем
ищет соответствующее продолжение \ic{catch}, и, если находит, то вычисляет
значение для передачи и выполняет переход. Если~же \ic{throw} реализована как
функция, то всё происходит немного в~другом порядке: сначала вычисляются оба
аргумента, затем ищется \ic{catch}, после чего выполняется переход.</p>

<p>Эти семантические различия хорошо показывают неточность описания поведения этих
форм естественным языком. И~на этом они не~заканчиваются, можно придумать ещё
множество вопросов, на которые будет сложно дать однозначный ответ. Например,
что делать, если соответствующей \ic{catch}-формы нет? Как именно всё~же
сравнивать метки? Что будет, если написать \ic{(throw $\alpha$ (throw $\beta$
$\pi$))}? Мы попытаемся ответить на эти вопросы немного позже.</p>

<p>
\subsection{\texorpdfstring%
{Пара \protect\ic{block}/\protect\ic{return-from}}%
{Пара block/return-from}}%
\label{escape/forms/ssect:block-return}</p>

<p>\indexR{переходы (escapes)!лексические}
\indexR{специальные формы!block@\protect\ic{block}}
Переходы, которые реализуют \ic{catch} и \ic{throw}, выполняются динамически.
Когда \ic{throw} запрашивает переход, она должна во~время исполнения программы
отыскать соответствующую \ic{catch}-форму и её продолжение. Естественно, это
требует времени, которое можно попытаться сократить, использовав
\emph{лексические} метки, как их называют в~{\CommonLisp}. Специальные формы
\ic{block} и \ic{return-from} слегка напоминают \ic{catch} и~\ic{throw}.</p>

<p>\indexC{block}
\indexE{block@\protect\ic{block}|seealso{\protect\ic{return-from}}}
Форма \ic{block} имеет следующий синтаксис:</p>

<p>\begin{code:lisp}
(block |\ii{метка}| |\ii{формы}|...)
\end{code:lisp}</p>

<p>\indexR{лексическое окружение!окружение меток}
\noindent
Первый аргумент не~вычисляется и должен быть идентификатором. Форма \ic{block}
связывает текущее продолжение с~\ii{меткой} в~\emph{лексическом окружении
меток}. Далее вычисляется тело \ic{block} как в~\ic{progn} и последнее
полученное значение становится значением всей формы~\ic{block}.
Последовательность можно прервать с~помощью \ic{return-from}.</p>

<p>\ForLayout{display}{\clearpage}</p>

<p>\indexC{return-from}
\indexE{return-from@\protect\ic{return-from}|seealso{\protect\ic{block}}}
Форма \ic{return-from} имеет следующий синтаксис:</p>

<p>\begin{code:lisp}
(return-from |\ii{метка}| |\ii{форма}|)
\end{code:lisp}</p>

<p>\noindent
Первый аргумент не~вычисляется и должен быть именем лексически видимой метки;
читай: \ic{return-from} может находиться только внутри \ic{block}
с~одноимённой меткой, как переменная может использоваться только внутри
соответствующей \ic{lambda}-формы. При вычислении \ic{return-from}
соответствующий \ic{block} прерывается и возвращает значение \ii{формы}.</p>

<p>Лексические метки образуют новое пространство имён, чьи свойства описываются
следующей таблицей:</p>

<p>\begin{envtable}
Ссылка      & \ic{(return-from \ii{метка} ...)}       \\
Значение    & отсутствует, это объекты второго класса \\
Изменение   & запрещено                               \\
Расширение  & \ic{(block \ii{метка} ...)}             \\
Определение & запрещено                               \\
\end{envtable}</p>

<p>Перепишем\footnote{Нам пришлось воспользоваться \ic{letrec}, так как в~Scheme
запрещено располагать \ic{define} сразу внутри \ic{block}, а \ic{(let ()
(define~...))} писать тоже нельзя из"~за~\ic{()}.} наш пример с~деревом на новый
лад:</p>

<p>\indexCS{find-symbol}{с~переходами}
\begin{code:lisp}
(define (find-symbol id tree)
  (block find
    (letrec ((find (lambda (tree)
                     (if (pair? tree)
                         (or (find (car tree))
                             (find (cdr tree)) )
                         (if (eq? id tree)
                             (return-from find #t)
                             #f ) ) )))
      (find tree) ) ) )
\end{code:lisp}</p>

<p>Заметьте, мы не~просто поменяли все "`\ic{catch~'find}"' на "`\ic{block~find}"';
нам потребовалось переместить тело функции внутрь \ic{block}, иначе
\ic{return-from} не~находилась~бы в~лексической области видимости
метки~\ic{find}.</p>

<p>\indexCS{block}{эффективность}
Компилятор может генерировать для \ic{block} очень эффективный код. Грубо
говоря, всё, что надо сделать \ic{block}, "--- это сохранить высоту стека
вызовов в~соответствующей метке. А~\ic{return-from} надо лишь положить
возвращаемое значение \ic{\#t} туда, где его ждут (в~регистр, например), после
чего вернуть указатель верхушки стека в~положение, сохранённое в~метке
\ic{find}. Это всего лишь пара-тройка инструкций, а не~поиск среди всех
доступных меток, который устраивает \ic{catch}. Отличие станет более заметным,
когда мы попробуем реализовать \ic{catch}\footnote{Этот вариант \ic{catch}
использует \ic{block} с~меткой \ic{label}. Естественно, система макросов должна
обеспечивать гигиеничность имён (гарантировать отсутствие коллизий) и для
окружения меток.} с~помощью \ic{block}:</p>

<p>\indexC*{active-catchers}{*active-catchers*}
\indexCS{catch}{с~лексическими метками}\indexCS{throw}{c~лексическими метками}
\begin{code:lisp}
(define *active-catchers* '())</p>

<p>(define-syntax throw
  (syntax-rules ()
    ((throw tag value)
     (let* ((label tag)   ; вычисляется единожды
            (escape (assv label *active-catchers*)) ) ; узкое место
       (if (pair? escape)
           ((cdr escape) value)
           (wrong "No associated catch to" label) ) ) ) ) )</p>

<p>(define-syntax catch
  (syntax-rules ()
    ((catch tag . body)
     (let* ((saved-catchers *active-catchers*)
            (result (block label
                      (set! *active-catchers*
                            (cons (cons tag
                                        (lambda (x)
                                          (return-from label x) ) )
                                  *active-catchers* ) )
                      . body )) )
      (set! *active-catchers* saved-catchers)
      result ) ) ) )
\end{code:lisp}</p>

<p>Здесь практически вся стоимость использования \ic{catch}\slash\ic{throw}
сосредоточена в~вызове \ic{assv}\footnote{Кстати, в~этом случае равенство меток
устанавливается предикатом \ic{eqv?}.} при раскрытии макроса \ic{throw}.
Рассмотрим, как работает эта реализация. Глобальная переменная (тут она названа
\ic{*active-catchers*}) хранит все активные \ic{catch}-формы (выполнение которых
ещё не~завершилось). Переменная обновляется при выходе из \ic{catch} (как
нормальном, так и при помощи \ic{throw}). Значением \ic{*active-catchers*}
является~А-список пар «метка "--- продолжение». Этот список фактически
соответствует динамическому окружению, которым пользовались исходные \ic{catch}
и \ic{throw} для обмена информацией о~метках.</p>

<p>
\subsection{Метки с~динамическим~временем~жизни}%
\label{escape/forms/ssect:dynamic}</p>

<p>Однако, эта эмуляция не~совсем хороша, так как если \ic{catch} окажется внутри
\ic{block}, то значение переменной \ic{*active-catchers*} может быть искажено.
Эмулировать неестественный для языка синтаксис непросто \cite{fel90,bak92c}, так
как это часто требует сложных архитектурных решений, которым необходимы ресурсы
в~единоличное пользование (вроде~\ic{*active-catchers*}). Позже мы покажем, как
подружить \ic{catch} и \ic{block}, но уже с~помощью специального приспособления:
\ic{unwind-protect}.\footnote*{Альтернативное решение: эмулировать \ic{block}
и \ic{return-from} с~помощью самих себя таким образом, чтобы они учитывали
\ic{catch} и \ic{throw}. Это сложновато реализовать прямиком в~интерпретаторе,
но вполне возможно.}</p>

<p>\indexR{динамическое связывание}
\indexR{продолжения (continuations)!время жизни!динамическое}
Как и все объекты Лиспа, продолжения тоже имеют своё время жизни. В~эмуляции
\ic{catch} с~помощью \ic{block} видно, что продолжение, захватываемое
\ic{catch}, живёт только во~время вычислений внутри тела \ic{catch}. Это
называется \term{динамическим} временем жизни. Такое поведение напоминает
динамические переменные, которые тоже существуют только во~время вычислений
внутри связывающей формы, что их создала. Поэтому давайте сделаем список
\ic{*active-catchers*} динамической переменной, что позволит использовать
\ic{catch} и \ic{block} одновременно, так как задача поддержания целостности
списка будет передана механизму динамических переменных.</p>

<p>\indexCS{catch}{с~динамическими метками}\indexCS{throw}{с~динамическими метками}
\begin{code:lisp}
(define-syntax throw
  (syntax-rules ()
    ((throw tag value)
     (let* ((label tag)
            (escape (assv label (dynamic *active-catchers*))) )
       (if (pair? escape)
           ((cdr escape) value)
           (wrong "No associated catch to" label) ) ) ) ) )</p>

<p>(define-syntax catch
  (syntax-rules ()
    ((catch tag . body)
     (block label
       (dynamic-let ((*active-catchers*
                      (cons (cons tag (lambda (x)
                                        (return-from label x) ))
                            (dynamic *active-catchers) ) ))
        . body ) ) ) ) )
\end{code:lisp}</p>

<p>\indexR{переходы (escapes)!допустимость}
Время жизни метки, создаваемой \ic{block} в~{\CommonLisp}, динамическое, так что
на метку можно перейти только внутри тела~\ic{block}. Точно такая~же ситуация
и с~\ic{catch}. Однако, лексический характер привязки, создаваемой \ic{block},
является источником проблемы, которая не~возникает с~\ic{catch}: если \ic{throw}
и \ic{return-from} позволяют отбросить оставшиеся вычисления, то эти вычисления
должны существовать в~момент совершения перехода. Рассмотрим следующую
программу:</p>

<p>\begin{code:lisp}
((block foo
   (lambda (x) (return-from foo x)) )
 33 )
\end{code:lisp}</p>

<p>\indexR{замыкания (closures)!и переходы}
Здесь функция-переход на~\ic{foo} применяется к~числу 33, но ведь в~момент
применения этой функции уже нет никакой метки \ic{foo}, так что мы получаем
ошибку. При создании замыкания оно честно захватило своё окружение, в~частности,
метку \ic{foo}. Потом это замыкание возвращается как значение \ic{block} и мы
выходим из этой формы. Нельзя выйти оттуда ещё раз, перейдя на~\ic{foo}, так как
вычисления уже завершены. Поэтому во~время вызова подобных функций необходимо
проверять, не~стало~ли сохранённое продолжение уже неактуальным, и выполнять
переход только при соблюдении этого условия. Кроме того, не~стоит забывать и
о~другом аспекте лексических меток, создаваемых \ic{block}. Например:</p>

<p>\begin{code:lisp}
(block foo
  (let ((f1 (lambda (x) (return-from foo x))))
    (* 2 (block foo
           (f1 1) )) ) ) |\is| 1
\end{code:lisp}</p>

<p>Сравните это с~результатом, который мы получим, сменив "`\ic{block~foo}"' на
"`\ic{catch~'foo}"':</p>

<p>\begin{code:lisp}
(catch 'foo
  (let ((f1 (lambda (x) (throw 'foo x))))
    (* 2 (catch 'foo
           (f1 1) )) ) ) |\is| 2
\end{code:lisp}</p>

<p>Функция~\ic{f1} в~данном случае вызовет выход из ближайшей формы~\ic{catch},
ожидающей \ic{foo}, а не~той, которая была видна ей при определении;
соответственно, умножение будет выполнено и верхняя форма~\ic{catch} получит
значение~\ic{2}.</p>

<p>
\subsection{\texorpdfstring%
{Сравнение \protect\ic{catch}~и~\protect\ic{block}}%
{Сравнение catch и block}}%
\label{escape/forms/ssect:catch-vs-block}</p>

<p>\indexCS{catch}{в~сравнении с~\ic{block}}
\indexCS{block}{в~сравнении с~\ic{catch}}
С~одной стороны, \ic{catch} и \ic{block} похожи: захватываемые ими продолжения
имеют динамическое время жизни "--- ими можно пользоваться только внутри
соответствующих блоков. С~другой стороны, \ic{return-from} всегда обращается
к~нужному продолжению, тогда как \ic{throw} может их перепутать. Форма
\ic{block} более эффективна, так как \ic{return-from} не~требуется проверять,
действительно~ли существует парный ему \ic{block}, "--- это гарантируется
синтаксисом. Тем не~менее, ей приходится проверять, можно~ли воспользоваться
сохранённым продолжением, хотя чаще всего это тоже можно гарантировать по
исходному коду. Видна явная параллель между динамическими и лексическими метками
с~одной стороны и динамическими и лексическими переменными с~другой: возникающие
проблемы схожи в~обоих случаях.</p>

<p>\indexR{конфликт имён}
\indexR{область видимости!конфликт имён}
Динамические метки могут конфликтовать между собой "--- лексические~же
в~принципе не~могут мешать друг другу. Взять хотя~бы возможность использовать
динамические метки где угодно: одна функция может случайно перехватить то, что
предназначалось другой. Например:</p>

<p>\begin{code:lisp}
(define (foo)
  (catch 'foo (* 2 (bar))) )</p>

<p>(define (bar)
  (+ 1 (throw 'foo 5)) )</p>

<p>(foo) |\is| 5
\end{code:lisp}</p>

<p>\ic{block} ограничивает область видимости метки лишь своим телом, тогда как
\ic{catch} отзывается на подходящий \ic{throw} из любого уголка программы.
Поэтому можно будет сделать \ic{(throw 'foo~...)} где угодно в~процессе
вычисления \ic{(*~2 (bar))} и это сработает. Использование "`\ic{catch~'foo}"'
вместо "`\ic{block~foo}"' естественно приведёт к~ошибке, так как
\ic{return-from} понятия не~имеет о~\ic{(block foo~...)} в~функциях, которые
вызывают~\ic{bar}. Но это ещё безобидный пример. Рассмотрим следующую ситуацию.</p>

<p>\begin{code:lisp}[label=escape/forms/catch-vs-block/p:better-map]
(catch 'not-a-pair
  (better-map (lambda (x)
                (or (pair? x)
                    (throw 'not-a-pair x) ) )
              (hack-and-return-list) ) )
\end{code:lisp}</p>

<p>Предположим, мы услышали от~бабушек на лавочке, что \ic{better-map} гораздо
лучше \ic{map}; далее допустим, что мы рискнём использовать именно её, чтобы
быстро проверить, действительно~ли \ic{(hack-and-return-list)} возвращает
список, состоящий из пар; наконец предположим, что мы не~знаем, как реализована
\ic{better-map}, хотя на самом деле она выглядит вот так:</p>

<p>\indexC{better-map}
\begin{code:lisp}
(define (better-map f L)
  (define (loop L1 L2 flag)
    (if (pair? L1)
        (if (eq? L1 L2)
            (throw 'not-a-pair L)
            (cons (F (car L1))
                  (loop (cdr L1)
                        (if flag (cdr L2) L2)
                        (not flag) ) ) ) ) )
  (loop L (cons 'ignore L) #t) )
\end{code:lisp}</p>

<p>Функция \ic{better-map} интересна тем, что в~отличие от \ic{map} она не~зависает
намертво на замкнутых списках (при правильном использовании). Если
\ic{(hack-and-return-list)} возвращает следующий список: \ic{\#1=((foo~.~hack)
. \#1\#)},\footnote*{Здесь используется нотация {\CommonLisp} для рекурсивных
структур данных. Такой список в~Scheme возвращает выражение \ic{(let ((p (list
(cons 'foo~'hack)))) (set-cdr! p p)~p)}.} то \ic{better-map} прыгнет на
ближайшую метку \ic{not-a-pair} и таким образом избежит бесконечного цикла. Но
вот незадача: замыканию, переданному в~\ic{better-map}, эта метка тоже нужна.
Конечно, если в~документации к~\ic{better-map} будет написано, что она
использует такую метку, то конфликт имён можно устранить, использовав
какое-нибудь другое имя для своих целей. Благо, в~случае \ic{catch} можно
использовать что угодно в~качестве метки, в~частности, список, собранный
специально для этого случая:</p>

<p>\begin{code:lisp}
(let ((tag (list 'not-a-pair)))
  (catch tag
    (better-map (lambda (x)
                  (or (pair? x)
                      (throw tag x) ) )
                (hack-and-return-list) ) ) )
\end{code:lisp}</p>

<p>\bigskip</p>

<p>Наконец, рассмотрим, как можно проэмулировать \ic{block} с~помощью \ic{catch}
(естественно, выигрыша в~производительности мы не~получим). Для этого достаточно
обеспечить лексичность используемых меток.</p>

<p>\indexCS{block}{определение через \ic{catch}}
\indexCS{return-from}{определение через \ic{throw}}
\begin{code:lisp}
(define-syntax block
  (syntax-rules ()
    ((block label . body)
     (let ((label (list 'label)))
       (catch label . body) ) ) ) )
(define-syntax return-from
  (syntax-rules ()
    ((return-from label value)
     (throw label value) ) ) )
\end{code:lisp}</p>

<p>Макрос \ic{block} создаёт уникальную метку и лексически связывает её
с~одноимённой переменной. Этим мы гарантируем, что нужную метку будут видеть
только те \ic{return-from}, которые лексически находятся внутри формы
\ic{block}. Правда, для этого используется имя \ic{label}, что опять может
вызвать конфликты. Конечно, можно воспользоваться чем"~то вроде \ic{gensym},
достаточно лишь удостовериться, что \ic{catch} и \ic{throw} используют
одинаковые метки.</p>

<p>
\subsection{Метки с~неограниченным~временем~жизни}%
\label{escape/forms/ssect:immortal}</p>

<p>\indexR{переходы (escapes)!неограниченные}
\indexR{оператор~$J$}
\indexE{J, оператор@$J$, оператор}
Диалект Scheme, появившийся около~1975~года, предложил дать продолжениям,
захватываемым \ic{catch} и \ic{block}, неограниченное время жизни. Это свойство
открыло поразительные возможности их использования. Позже, в~соответствии
с~догматом о~минимальном количестве специальных форм, были предприняты попытки
выразить захват продолжений и сами продолжения как функции. В~\cite{lan65}
Питер~Лэндин предложил оператор~$J$\!, прямым потомком которого является
функция \ic{call/cc} в~Scheme.</p>

<p>\indexCS{call/cc}{определение}
\indexR{продолжения (continuations)!захват}
Мы попробуем объяснить её синтаксис настолько просто, насколько это возможно.
Во-первых, она захватывает продолжения, так что это должна быть форма, где
доступно продолжение её вызова:</p>

<p>\begin{code:lisp}
|\cont*{k}|(...)
\end{code:lisp}</p>

<p>Далее, это должна быть функция. Назовём её \ic{call/cc}:</p>

<p>\begin{code:lisp}
|\cont*{k}|(call/cc ...)
\end{code:lisp}</p>

<p>Теперь, когда мы захватили~\ii{k}, его нужно как"~то передать пользователю.
Но~как? Очевидно, нельзя вернуть \ii{k} как значение \ic{call/cc}, потому что
это бессмысленно. Оно ожидается внутри какого"~то вычисления, так что можно это
вычисление обернуть в~унарную функцию,\footnote*{В~Scheme достаточно, чтобы
функция могла принять как минимум один аргумент. То~есть с~\ic{(call/cc list)}
никаких проблем нет.} принимающую~\ii{k}, которую и передать внутрь
\ic{call/cc}:</p>

<p>\begin{code:lisp}
|\cont*{k}|(call/cc (lambda (k) ...))
\end{code:lisp}</p>

<p>\indexR{полноценные объекты!продолжения}
\indexR{продолжения (continuations)!как полноценные объекты}
\indexR{продолжения (continuations)!как замыкания}
\indexR{реификация}
Продолжение~\ii{k} становится объектом первого класса, к~которому применяется
функция-аргумент \ic{call/cc}. Аналогично, само продолжение~\ii{k} тоже является
унарной функцией, которая неотличима от замыканий, создаваемых \ic{lambda}.
Функция \ic{call/cc} \term{реифицирует} продолжение~\ii{k} в~полноценный объект,
который становится значением переменной~\ic{k}. Достаточно вызвать
функцию~\ic{k}, чтобы передать её аргумент форме, вызвавшей \ic{call/cc}:</p>

<p>\begin{code:lisp}
|\cont*{k}|(call/cc (lambda (k) (+ 1 (k 2)))) |\is| 2
\end{code:lisp}</p>

<p>\indexC{continue}
Можно было~бы создать особый объект «продолжение». Тогда их уже не~получится
вызывать как функции, для этого необходимо специальное средство передачи
управления: функция \ic{continue}. Пример выше записывался~бы тогда так:</p>

<p>\begin{code:lisp}
|\cont*{k}|(call/cc (lambda (k) (+ 1 (continue k 2)))) |\is| 2
\end{code:lisp}</p>

<p>Тем не~менее, даже в~этом случае можно легко сделать продолжение функцией,
обернув его в~\ic{(lambda (v) (continue \ii{k}~v))}. Некоторым людям нравится
использовать развёрнутую форму, так как она делает переход более заметным.</p>

<p>Вот~и~всё. Осталось только самое сложное "--- запомнить полное имя этой функции:
\ic{call-with-current-continuation}. А~теперь давайте перепишем наш пример
с~двоичным деревом, используя \ic{call/cc}:</p>

<p>\indexCS{find-symbol}{с~переходами}
\begin{code:lisp}
(define (find-symbol id tree)
  (call/cc
   (lambda (exit)
     (define (find tree)
       (if (pair? tree)
           (or (find (car tree))
               (find (cdr tree)) )
           (if (eq? tree id) (exit #t) #f) ) )
     (find tree) ) ) )
\end{code:lisp}</p>

<p>Продолжение вызова функции \ic{find-symbol} захватывается и превращается
в~унарную функцию, связываемую с~переменной \ic{exit}. Как только мы находим
нужный символ, поиск прерывается вызовом \ic{exit}, после чего мы никогда уже
не~возвращаемся внутрь \ic{find-symbol}, так как дальше продолжаются вычисления,
следующие после вызова \ic{find-symbol}.</p>

<p>\phantomlabel{escape/forms/immortal/par:reincarnate}
\indexR{продолжения (continuations)!время жизни!неограниченное}
\indexR{присваивание!роль для продолжений}
В~этом примере не~очевидна неограниченность времени жизни продолжения, потому
что оно используется исключительно внутри самой~же формы \ic{call/cc}. Но теперь
мы можем сохранить продолжение в~любой переменной, чего нельзя сделать с~меткой
\ic{block}/\ic{catch}.</p>

<p>\indexC{fact}
\begin{code:lisp}
(define (fact n)
  (let ((r 1) (k 'void))
    (call/cc (lambda (c) (set! k c) 'void))
    (set! r (* r n))
    (set! n (- n 1))
    (if (= n 1) r (k 'recurse)) ) )
\end{code:lisp}</p>

<p>\noindent
Продолжение, которое передаётся через~\ic{c} и сохраняется в~\ic{k}, выглядит
так:</p>

<p>\begin{code:lisp}
|\ii{k}| = (lambda (|\ii{u}|)
      (set! r (* r n))
      (set! n (- n 1))
      (if (= n 1) r (k 'recurse)) )|\begin{where}
                                    \- r {\is} 1
                                    \- k {\is} \ii{k}
                                    \- n
                                    \end{where}|
\end{code:lisp}</p>

<p>Это~же продолжение~\ii{k} связано с~переменной~\ic{k} внутри самого себя.
Рекурсия, как мы знаем, всегда означает какой"~то цикл; в~данном случае \ic{k}
вызывается до тех пор, пока \ic{n} не~достигнет желаемого значения. Всё это
вместе, естественно, вычисляет факториал.</p>

<p>В~этом примере продолжение~\ii{k} используется вне создавшей его формы
\ic{call/cc}. Кстати, можно избавиться от избыточных переменных и аргументов,
просто возвращая это продолжение:</p>

<p>\begin{code:lisp}
(define (fact n)
  (let ((r 1) (k (call/cc (lambda (c) c))))
    (set! r (* r n))
    (set! n (- n 1))
    (if (= n 1) r (k k)) ) )
\end{code:lisp}</p>

<p>\term{Самоприменение} \ic{(k~k)} необходимо, так как нам необходимо поддерживать
правильное значение~\ic{k}. Это продолжение можно записать так:</p>

<p>\begin{code:lisp}
(lambda (|\ii{u}|)
  (let ((k |\ii{u}|))
    (set! r (* r n))
    (set! n (- n 1))
    (if (= n 1) r (k k)) ) )|\begin{where}
                             \- r {\is} 1
                             \- n
                             \end{where}|
\end{code:lisp}</p>

<p>\indexR{продолжения (continuations)!сложность реализации}
\indexR{стек!и продолжения}
Неограниченность времени жизни усложняет реализацию продолжений и в~общем случае
увеличивает стоимость их использования. (См.~\cite{cho88,hdb90,mat92}.) Почему?
Потому, что в~таком случае вложенные вычисления уже нельзя представлять в~виде
стека, здесь требуется дерево. Если продолжения имеют исключительно динамическое
время жизни, то это просто переходы: с~их помощью можно покинуть текущие
вычисления, но только один раз. В~этом случае легко понять, когда вычисление
формы начинается и заканчивается: начинается при входе в~неё, а~заканчивается
с~последним выражением или первым встреченным переходом.</p>

<p>\indexR{возвращаемые значения!многократно}
\indexR{продолжения (continuations)!множественные возвраты}
Если~же продолжения живут неограниченно долго, то всё гораздо усложняется.
Вспомните форму \ic{(call/cc ...)} в~примере с~факториалом: она фактически
возвращает результат несколько раз. Если допускать такую возможность
(многократного возврата значений\footnote{Здесь ударение стоит на слове
«\emph{возврат}», а не~«значений». Функция \ic{values} не~имеет никакого
отношения к~\ic{call/cc}.}), то уже не~получится считать, что выполнение
функции окончено, когда она вернула значение.</p>

<p>\indexR{память!и~\protect\ic{call/cc}}
\ic{call/cc} могущественна и в~некотором смысле может манипулировать временем.
Программа прожила какой"~то промежуток времени, наделала ошибок и решила взять
вторую попытку, перепрыгнув назад в~прошлое (при этом она заранее предусмотрела
такой исход и оставила метку в~нужном ей моменте времени). При этом она забирает
с~собой весь прожитый опыт (свою память), так что вычисления после прыжка пойдут
уже другим путём. Естественно, ничто не~запрещает ей сделать и третью попытку
или использовать эту силу не~только для исправления ошибок, но и для собственной
выгоды.</p>

<p>\indexC{goto}
С~другой стороны, форма \ic{call/cc} очень похожа на оператор \ic{goto}, который
\english{considered harmful}. Однако \ic{call/cc} более ограничена, так как
позволяет лишь \emph{вернуться} в~те места программы, где мы уже были, но
\emph{не~отправиться} туда, где нас никогда не~было.</p>

<p>Вначале бывает нелегко научиться пользоваться \ic{call/cc}, так как и её
аргумент, и продолжение являются унарными функциями. Возможно, в~таком случае
вам поможет понимание \ic{call/cc} следующим образом:</p>

<p>\begin{code:lisp}
|\cont*{k}|(call/cc |$\phi$|) |\is| |\cont*{k}|(|$\phi$| |\ii{k}|)
\end{code:lisp}</p>

<p>\noindent
где \ii{k} является продолжением вызова \ic{call/cc}, а $\phi$ "--- какой"~то
унарной функцией. Вызов \ic{call/cc} лишь превращает~\ii{k} в~объект языка,
который можно передать как аргумент. Заметьте, что продолжением вызова $\phi$
является всё так~же~\ii{k}, поэтому для того, чтобы просто вернуть результат,
не~обязательно пользоваться переданным продолжением:</p>

<p>\begin{code:lisp}
(call/cc (lambda (k) 1515)) |\is| 1515
\end{code:lisp}</p>

<p>Кого"~то такое умолчательное поведение может расстраивать. В~некоторых языках
\ic{call/cc} изымает захватываемое продолжение~\ii{k} из хода вычислений: \ii{k}
больше не~является её собственным продолжением, и для возврата значения
последующим вычислениям его надо обязательно явно передать правильному
продолжению:</p>

<p>\begin{code:lisp}
(call/cc (lambda (k) (k 1615))) |\is| 1615
\end{code:lisp}</p>

<p>\indexR{продолжения (continuations)!терминальное продолжение}
\indexR{терминальное продолжение}
Если этого не~сделать, то продолжением формы \ic{call/cc} будет нечто, подобное
чёрной дыре: $\lambda u.\bullet$. Оно поглощает все вычисления вместе
с~передаваемым значением. Ничто и никогда не~возвращается назад, попав в~чёрную
дыру. Исполнение программы состоит из вызовов функций, а они похожи на дыхание:
вдох-выдох "--- вход-выход. Необходимым условием жизни является
\emph{продолжение} дыхания. Используя \ic{call/cc}, мы вмешиваемся в~нормальный
ход исполнения, так что без определённых предосторожностей можно всерьёз забыть,
как дышать, и~умереть.</p>

<p>
\subsection{Защитные формы}\label{escape/forms/ssect:protection}</p>

<p>\indexC{unwind-protect}
\indexC{car}\indexC{cdr}
Осталось рассмотреть ещё один эффект, относящийся к~продолжениям. Связан он
со~специальной формой \ic{unwind-protect}. Названием она обязана принципу первой
реализации\footnote{Тут та~же ситуация, что и с~\ic{car} и~\ic{cdr}, которые
являются акронимами от «\english{contents of the address register}» и
«\english{contents of the decrement register}» "--- с~помощью данных
примитивов обрабатывались точечные пары в~оригинальной реализации Лиспа для
IBM~704. Это не~имеет ничего общего с~текущими реализациями, но названия
приклеились.} и задуманному функциональному назначению. Вот синтаксис этой
формы:</p>

<p>\begin{code:lisp}
(unwind-protect |\ii{форма}|
  |\ii{формы-уборщики}|... )
\end{code:lisp}</p>

<p>Сначала вычисляется \ii{форма}, её значение станет значением всей формы
\ic{unwind-protect}. Как только значение \ii{формы} получено, вычисляются
\ii{формы-уборщики}, и только потом \ic{unwind-protect} возвращает ранее
вычисленное значение. Она похожа на \ic{prog1} из {\CommonLisp} или \ic{begin0}
из некоторых версий Scheme, которые последовательно вычисляют формы подобно
\ic{begin}, но возвращают значение первой из них, а не~последней. Вот только
\ic{unwind-protect} гарантирует выполнение \ii{уборщиков} даже в~случае, если
вычисление \ii{формы} было прервано переходом. Поэтому:</p>

<p>\begin{code:lisp}
(let ((a 'on))          |\dialect{\CommonLisp}|
  (cons (unwind-protect (list a)
          (setq a 'off) )
        a ) ) |\is| ((on) . off)</p>

<p>(block foo
  (unwind-protect (return-from foo 1)
    (print 2) ) ) |\is| 1 ; и печатает \ic{2}
\end{code:lisp}</p>

<p>Данная форма полезна, когда состояние системы должно быть восстановлено вне
зависимости от результата производимых действий. Например, когда мы читаем файл,
то в~конце он должен быть закрыт в~любом случае. Другим примером является
эмуляция \ic{catch} с~помощью \ic{block}. Если данные формы используются
одновременно, то возможна рассинхронизация состояния \ic{*active-catchers*}.
Этот недостаток можно исправить с~помощью \ic{unwind-protect}, гарантируя
восстановление \ic{*active-catchers*}:</p>

<p>\indexCS{catch}{с~помощью \ic{unwind-protect}}
\begin{code:lisp}
(define-syntax catch
  (syntax-rules ()
    ((catch tag . body)
     (let ((saved-catchers *active-catchers*))
       (unwind-protect
         (block label
           (set! *active-catchers*
                 (cons (cons tag (lambda (x) (return-from label x)))
                       *active-catchers*) )
           . body )
         (set! *active-catchers* saved-catchers) ) ) ) ) )
\end{code:lisp}</p>

<p>Что~бы ни~случилось, теперь \ic{*active-catchers*} будет иметь корректное
состояние при выходе из тела формы. Форму \ic{block} можно использовать внутри
\ic{catch} не~опасаясь, что \ic{catch} не~удалится из \ic{*active-catchers*},
так как теперь за этим следит \ic{unwind-protect}. Это гораздо лучше, хотя всё
ещё не~идеально: \ic{*active-catchers*} доступна не~только \ic{catch} и
\ic{throw}, так что её состояние всё равно можно исказить (случайно или
намеренно).</p>

<p>Форма \ic{unwind-protect} обеспечивает защиту системы от противоречий, выполняя
определённые действия после завершения вычислений. Следовательно, эта форма
обязана знать, когда именно они завершаются. Но в~присутствии продолжений
с~неограниченным временем жизни \ic{unwind-protect} не~может легко ответить на
этот вопрос.\footnote*{Правильно работающий аналог \ic{unwind-protect} для
Scheme "--- \ic{dynamic-wind}, "--- был описан ещё в~\cite{fwh92};
см.~также~\cite{que93c}.}</p>

<p>Как мы уже не~раз говорили, семантика управляющих структур далека от точного
определения. Рассмотрим лишь несколько примеров, где нельзя однозначно сказать,
какой мы получим результат:</p>

<p>\begin{code:lisp}
(block foo
  (unwind-protect (return-from foo 1)
    (return-from foo 2) ) )                          |\is| |\ii{?}|</p>

<p>(catch 'bar
  (block foo
    (unwind-protect (return-from foo (throw 'bar 1))
      (throw 'something (return-from foo 2)) ) ) )   |\is| |\ii{?}|
\end{code:lisp}</p>

<p>\indexCS{unwind-protect}{проблемы семантики}
Конечно, стремление к~более точным определениям управляющих структур
естественно, однако нельзя игнорировать очевидную неопределённость, привносимую
продолжениями в~понятие «после вычислений». Не~всё можно выяснить только по
исходному коду. Продолжения по определению \emph{динамичны}, так как являются
воплощением потока исполнения. Рассмотрим следующий пример:</p>

<p>\begin{code:lisp}
(block bar
  (unwind-protect (return-from bar 1)
    (block foo |$\pi$|) ) )
\end{code:lisp}</p>

<p>\phantomlabel{escape/forms/protection/p:discard}
\ic{unwind-protect} вклинивается в~поток исполнения и не~даёт завершить переход,
который выполняется в~охраняемой ей форме. Вместо этого данный переход
становится продолжением формы \ic{(block foo~...)}. Если она просто вернёт
результат, то это продолжение активируется и форма \ic{(block bar~...)}
передаст~\ic{1} своему продолжению. Если~же внутри $\pi$ будет выполнен переход,
то данное продолжение должно быть отброшено и заменено продолжением перехода.
В~этом случае из"~за \ic{unwind-protect} «после вычислений \ic{(return-from
bar~1)}» не~наступает вообще. (Мы обсудим этот феномен позже вместе деталями
реализации данной формы.)</p>

<p>\bigskip</p>

<p>Конечно~же, есть и другие управляющие формы. Особенно их жалует {\CommonLisp},
в~котором реализована даже старая \ic{prog}, только под названием \ic{tagbody}.
Её можно легко проэмулировать с~помощью \ic{labels} и \ic{block}.
\seeEx[escape/ex:tagbody] Интересным фактом является то, что если продолжения
имеют исключительно динамическое время жизни, то для реализации любого
управления потоком исполнения достаточно форм \ic{block}, \ic{return-from} и
\ic{unwind-protect}. Аналогично, для продолжений с~неограниченным временем жизни
достаточно одной \ic{call/cc}. Очевидно, что мы не~сможем легко реализовать
\ic{call/cc}, имея лишь продолжения с~динамическим временем жизни. Обратное
вполне возможно, хотя это и стрельба из пушки по воробьям. Способ станет вполне
очевидным после рассмотрения реализации интерпретатора с~явными продолжениями.</p>

<p>
\subsubsection{Защита и динамические~переменные}</p>

<p>\indexC{fluid-let}
\indexCS{unwind-protect}{динамические переменные}
\indexR{динамические переменные!\protect\ic{unwind-protect}}
Некоторые реализации Scheme обеспечивают динамическое время жизни переменных
не~так, как мы показывали ранее. Они делают это с~помощью \ic{unwind-protect}
или аналогичного механизма. Идея состоит в~том, чтобы «одолжить» нужную
лексическую переменную, восстановив впоследствии её значение обратно. Подобные
динамические переменные реализуются с~помощью формы \ic{fluid-let}:</p>

<p>{\def\A{\hbox to 0pt{$\alpha$}}
\def\B{\hbox to 0pt{$\beta$}}
\def\E{\hbox to 0pt{\kern0.15em$\equiv$}}
\def\T{\hbox to 0pt{\ii{tmp}}}
\begin{code:lisp}
(fluid-let ((x |$\alpha$|)) |\E|   (let ((|\T|    x))
  |\B| ... )                (set! x |\A| )
                        (unwind-protect
                          (begin |\B| ...)
                          (set! x |\T|   ) ) )
\end{code:lisp}}</p>

<p>В~процессе вычисления $\beta$ будет видна переменная~\ic{x}
со~значением~$\alpha$; предыдущее значение \ic{x} сохраняется на время
вычислений в~локальной переменной \ii{tmp} и восстанавливается после их
завершения. Это подразумевает, что есть такая лексическая переменная~\ic{x},
которой можно воспользоваться. Обычно она глобальная, чтобы её было видно
отовсюду. Если она будет локальной, то её поведение будет (значительно)
отличаться от должного поведения динамической переменной в~{\CommonLisp}: ведь
тогда она будет правильно работать внутри \ic{fluid-let}, но не~в~связывающих
формах, вложенных во~\ic{fluid-let}. Далее, очевидно, что такие переменные тоже
не~дружат с~\ic{call/cc}. В~итоге получается нечто ещё более хитрое, нежели
обычные динамические переменные {\CommonLisp}.</p>

<p>
\section{Участники вычислений}\label{escape/sect:actors}</p>

<p>\indexR{вычисления!контекст}
\indexR{контекст вычислений}
Сейчас мы считаем, что для проведения вычислений необходимы три вещи: выражение,
окружение и продолжение. Тактическая цель вычислений: определить значение
выражения в~окружении. Стратегическая "--- передать это значение продолжению.</p>

<p>\indexR{записи активации}
\indexR{фреймы стека}
\indexR{стековые фреймы}
Мы определим новый интерпретатор, чтобы показать, какие продолжения нужны на
каждом этапе вычислений. Так как обычно продолжения представляются снимками
фреймов стека (или записей активаций), то мы будем использовать объекты для
представления этих сущностей внутри разрабатываемого интерпретатора.</p>

<p>
\subsection{Краткий обзор~объектов}\label{escape/actors/ssect:review}</p>

<p>\indexR{объекты}
\indexE{Meroon@\protect\MeroonMeroonet!вводное описание}
В~этом разделе мы не~будем детально разбирать устройство объектной системы,
отложив эту задачу до одиннадцатой главы. Здесь рассматриваются лишь три~макроса
и несколько правил именования. Такие макросы выражают суть объектов и в~том
или~ином виде присутствуют в~любой объектной системе любого языка. Объекты~же
используются для того, чтобы подсказать удобный вариант реализации продолжений.
Уж очень хорошо понятие записи активации, инкапсулирующей различные данные,
связанные с~вызовами подпрограмм, укладывается в~концепцию объектов с~полями.
Также у~нас будет в~распоряжении наследование, которое поможет вынести общие
части реализации за скобки, уменьшая таким образом размер интерпретатора.</p>

<p>Я полагаю, что вы знакомы с~философией, терминологией и подходами
объектно"=ориентированного программирования, так что будет достаточно показать,
как здесь записываются известные вам идиомы, которые мы будем использовать.</p>

<p>\indexR{классы}
\indexR{методы}
\indexR{обобщённые функции}
\indexR{функции!обобщённые}
Объекты группируются в~\term{классы}; объекты одного класса имеют одинаковые
\term{методы}; сообщения посылаются с~помощью \term{обобщённых функций},
популяризованных Common Loops~\cite{bkk+86}, CLOS~\cite{bdg+88} и
\TELOS~\cite{pnb93}. Для нас важнейшей возможностью объектно"=ориентированного
программирования является отделение обработки различных специальных форм и
примитивных функций от ядра интерпретатора. Но всё имеет свою цену: в~этом
случае будет сложнее увидеть картину целиком, так как обработка будет размазана
по нескольким местам.</p>

<p>
\subsubsection{Определение классов}</p>

<p>\indexC{define-class}
Классы определяется с~помощью \ic{define-class} следующим образом:</p>

<p>\begin{code:lisp}
(define-class |\ii{класс}| |\ii{суперкласс}|
  (|\ii{поля}|...) )
\end{code:lisp}</p>

<p>\indexR{поля}
\indexR{аксессоры}
Эта форма определяет класс с~именем \ii{класс}, который наследует поля и методы
\ii{суперкласса}, а также имеет свои собственные \ii{поля}. Вместе с~классом
создаётся набор вспомогательных функций. Функция \ic{make-\ii{класс}} создаёт
объекты этого класса; количество и порядок её аргументов соответствуют порядку
указания полей при определении класса. Названия аксессоров чтения состоят из
имени класса и имени поля, разделённых дефисом. Названия аксессоров записи
аналогичны аксессорам чтения, только с~\ic{set-} в~начале и восклицательным
знаком в~конце. Возвращаемое значение аксессоров записи не~определено. Предикат
\ic{\ii{класс}?} проверяет, является~ли объект экземпляром данного класса.</p>

<p>\indexC{Object}
Корнем иерархии наследования является класс \ic{Object}, не~имеющий полей.</p>

<p>Например, определение</p>

<p>\begin{code:lisp}
(define-class continuation Object (k))
\end{code:lisp}</p>

<p>\noindent
создаст следующие функции:</p>

<p>\begin{code:lisp}
(make-continuation k)         ; конструктор
(continuation-k c)            ; аксессор чтения
(set-continuation-k! c k)     ; аксессор записи
(continuation? k)             ; предикат принадлежности
\end{code:lisp}</p>

<p>
\subsubsection{Определение обобщённых~функций}</p>

<p>\indexC{define-generic}
\indexR{обобщённые функции}
Обобщённые функции определяются следующим образом:</p>

<p>\begin{code:lisp}
(define-generic (|\ii{функция}| |\ii{аргументы}|)
  |\textrm{$[$\ic{\ii{трактовка-по-умолчанию}...}$]$}|)
\end{code:lisp}</p>

<p>\indexR{дискриминант}
\indexR{обобщённые функции!дискриминант}
Эта форма определяет обобщённую \ii{функцию}; формы
\ii{трак\-товки-по-умол\-чанию} станут её телом, если при вызове функции
не~найдётся подходящего специализированного варианта. Список аргументов
указывается как обычно, за исключением того, что один из них является
\term{дискриминантом}; дискриминант записывается в~скобках:</p>

<p>\begin{code:lisp}
(define-generic (invoke (f) v* r k)
  (wrong "Not a function" f r k) )
\end{code:lisp}</p>

<p>Таким образом определяется обобщённая функция \ic{invoke}, для которой можно
в~последующем задать специализированные варианты. Данная функция имеет четыре
аргумента, первый из них "--- \ic{f} "--- это дискриминант. Если для
класса~\ic{f} не~найдётся специализированного варианта функции (метода
класса~\ic{f}), то будет выбран вариант по умолчанию: вызов~\ic{wrong}.</p>

<p>
\subsubsection{Определение методов}</p>

<p>\indexC{define-method}
Форма \ic{define-method} используется для специализации обобщённых функций
конкретными методами.</p>

<p>\begin{code:lisp}
(define-method (|\ii{функция}| |\ii{аргументы}|)
  |\ii{тело}|... )
\end{code:lisp}</p>

<p>Аргументы указываются аналогично \ic{define-generic}. Класс дискриминанта, для
которого создаётся метод, указывается после него. Например, мы можем создать
метод \ic{invoke} для класса \ic{primitive} следующим образом:</p>

<p>\begin{code:lisp}
(define-method (invoke (f primitive) v* r k)
  ((primitive-address f) v* r k) )
\end{code:lisp}</p>

<p>На этом мы заканчиваем обзор объектной системы и переходим к~написанию
интерпретатора. Детали реализации, а также другие возможности объектов будут
рассмотрены в~одиннадцатой главе. Здесь мы ограничимся наиболее простыми и
известными из них, чтобы облегчить понимание и уменьшить количество возможных
проблем.</p>

<p>
\subsection{Интерпретатор}\label{escape/actors/ssect:interpreter}</p>

<p>\indexR{соглашения именования}
\indexE{e @\protect\ic{e} (выражения)}
\indexE{r @\protect\ic{r} (лексическое окружение)}
\indexE{k @\protect\ic{k} (продолжения)}
\indexE{v @\protect\ic{v} (значения)}
\indexE{f @\protect\ic{f} (функции)}
\indexE{n @\protect\ic{n} (идентификаторы)}
Функция \ic{evaluate} имеет три аргумента: выражение, окружение и продолжение.
Начинает она свою работу с~выяснения смысла выражения, чтобы выбрать правильный
метод его вычисления, который хранится в~специализированной функции. Перед тем,
как продолжить, давайте договоримся о~правилах именования переменных, которых
теперь будет довольно много. Первое правило: сущность «список~\ii{x}» будем
называть \ic{\ii{x}*}. Второе: сущности интерпретатора будем называть
одной-двумя буквами для краткости:</p>

<p>\begin{center}\begin{tabular}{>{\raggedleft}p{0.3\textwidth}p{0.6\textwidth}}
\ic{e}, \ic{et}, \ic{ec}, \ic{ef} & выражения, формы                          \\
                           \ic{r} & окружения                                 \\
                  \ic{k}, \ic{kk} & продолжения                               \\
                           \ic{v} & значения (числа, пары, замыкания {\itd})\\
                           \ic{f} & функции                                   \\
                           \ic{n} & идентификаторы
\end{tabular}\end{center}</p>

<p>
Всё, теперь принимаемся за интерпретатор. Для простоты он считает все атомы,
кроме переменных, автоцитированными значениями.</p>

<p>\indexC{evaluate}
\begin{code:lisp}
(define (evaluate e r k)
  (if (atom? e)
      (cond ((symbol? e) (evaluate-variable e r k))
            (else        (evaluate-quote e r k)) ) 
      (case (car e)
        ((quote)  (evaluate-quote (cadr e) r k))
        ((if)     (evaluate-if (cadr e) (caddr e) (cadddr e) r k))
        ((begin)  (evaluate-begin (cdr e) r k))
        ((set!)   (evaluate-set! (cadr e) (caddr e) r k))
        ((lambda) (evaluate-lambda (cadr e) (cddr e) r k))
        (else     (evaluate-application (car e) (cdr e) r k)) ) ) )
\end{code:lisp}</p>

<p>Собственно интерпретатор состоит из трёх функций: \ic{evaluate}, \ic{invoke} и
\ic{resume}. Две последние являются обобщёнными и знают, как вызывать вызываемое
и продолжать продолжаемое. Все вычисления в~конечном счёте сводятся к~обмену
значениями между этими функциями. Вдобавок мы введём ещё две полезные обобщённые
функции для работы с~переменными: \ic{lookup} и~\ic{update!}.</p>

<p>\indexC{invoke}
\indexC{resume}
\indexC{lookup}
\indexC{update"!}
\begin{code:lisp}
(define-generic (invoke (f) v* r k)
  (wrong "Not a function" f r k) )</p>

<p>(define-generic (resume (k continuation) v)
  (wrong "Unknown continuation" k) )</p>

<p>(define-generic (lookup (r environment) n k)
  (wrong "Not an environment" r n k) )</p>

<p>(define-generic (update! (r environment) n k v)
  (wrong "Not an environment" r n k) )
\end{code:lisp}</p>

<p>Все сущности, которыми мы будем оперировать, наследуются от трёх базовых
классов:</p>

<p>\indexC{value}
\indexC{environment}
\indexC{continuation}
\begin{code:lisp}
(define-class value        Object ())
(define-class environment  Object ())
(define-class continuation Object (k))
\end{code:lisp}</p>

<p>Классы значений являются наследниками \ic{value}, классы окружений "---
наследники \ic{environment}, классы продолжений "--- \ic{continuation}.</p>

<p>
\subsection{Цитирование}\label{escape/actors/ssect:quoting}</p>

<p>Специальная форма цитирования всё так~же является наиболее простой, её задача
сводится к~передаче значения в~неизменной форме текущему продолжению:</p>

<p>\indexC{evaluate-quotation}
\begin{code:lisp}
(define (evaluate-quotation v r k)
  (resume k v) )
\end{code:lisp}</p>

<p>
\subsection{Ветвление}\label{escape/actors/ssect:alternatives}</p>

<p>Условный оператор использует два продолжения: текущее и продолжение вычисления
условия, которое выберет и вычислит необходимую ветку. Для этого продолжения мы
создадим отдельный класс. После вычисления условия ещё остаётся вычисление той
или иной ветки, а~значит, в~продолжении необходимо хранить сами ветки и
окружение для их вычисления. Результат вычисления одной из веток надо будет
передать продолжению условной формы, которое тоже надо где"~то хранить. Таким
образом, мы пишем:</p>

<p>\indexC{if-cont}
\indexC{evaluate-if}
\indexCS{resume}{\ic{if-cont}}
\begin{code:lisp}
(define-class if-cont continuation (et ef r))</p>

<p>(define (evaluate-if ec et ef r k)
  (evaluate ec r (make-if-cont k et ef r)) )</p>

<p>(define-method (resume (k if-cont) v)
  (evaluate (if v (if-cont-et k) (if-cont-ef k))
            (if-cont-r k)
            (if-cont-k k) ) )
\end{code:lisp}</p>

<p>Форма вначале вычисляет условие~\ic{ec} в~своём окружении~\ic{r}, но с~новым
продолжением. Как только мы заканчиваем вычислять условие, результат передаётся
\ic{resume}, которая вызывает специализацию для нашего класса продолжений.
В~этом продолжении мы выполняем собственно выбор, вычисляем одну их сохранённых
веток в~сохранённом окружении и передаём результат сохранённому продолжению всей
условной формы.\footnote*{С~точки зрения реализации можно считать, что
\ic{make-if-cont} кладёт в~стек \ic{et} и \ic{ef}, а также \ic{r}; под ними
в~стеке лежат аналогичные группы выражений и окружений, которые фактически и
есть ничем иным, как продолжением~\ic{k}. А~вызовы вроде \ic{(if-cont-et k)}
лишь снимают с~верхушки стека нужные данные.}</p>

<p>
\subsection{Последовательность}\label{escape/actors/ssect:sequence}</p>

<p>Здесь нам тоже потребуются два продолжения: текущее и продолжение вычисления
оставшихся форм.</p>

<p>\indexC{begin-cont}
\indexC{evaluate-begin}
\indexCS{resume}{\ic{begin-cont}}
\begin{code:lisp}
(define-class begin-cont continuation (e* r))</p>

<p>(define (evaluate-begin e* r k)
  (if (pair? e*)
    (if (pair? (cdr e*))
        (evaluate (car e*) r (make-begin-cont k e* r))
        (evaluate (car e*) r k) )
    (resume k empty-begin-value) ) )</p>

<p>(define-method (resume (k begin-cont) v)
  (evaluate-begin (cdr (begin-cont-e* k))
                  (begin-cont-r k)
                  (begin-cont-k k) ) )
\end{code:lisp}</p>

<p>Случаи \ic{(begin)} и \ic{(begin~$\pi$)} тривиальны. Если~же \ic{begin}
передано больше выражений, то вычисление первого из них продолжается
\ic{(make-begin-cont k~e*~r)}. Это продолжение принимает значение~\ic{v}
с~помощью \ic{resume}, игнорирует его и продолжает оставшиеся вычисления
в~том~же окружении и с~тем~же продолжением.\footnote*{Внимательный читатель
наверняка заметил странную форму \ic{(cdr (begin-cont-e* k))} в~методе
\ic{resume}. Конечно, мы могли~бы отбросить уже вычисленное выражение ещё
в~\ic{evaluate-begin}: \ic{(make-begin-cont k (cdr~e*) r)}, и получить тот~же
результат. Причина такого решения в~том, что если случится ошибка, то у~нас
будет на руках её источник.}</p>

<p>
\subsection{Окружения}\label{escape/actors/ssect:variables}</p>

<p>Значения переменных хранятся в~окружениях. Они тоже представляются объектами:</p>

<p>\indexC{null-env}
\indexC{full-env}
\indexC{variable-env}
\begin{code:lisp}
(define-class null-env environment ())
(define-class full-env environment (others name))
(define-class variable-env full-env (value))
\end{code:lisp}</p>

<p>Нам потребуются два типа окружений: пустое начальное окружение \ic{null-env} и
окружения с~переменными \ic{variable-env}. Последние хранят одну привязку имени
\ic{name} к~значению \ic{value}, а также ссылку на остальные привязки этого
окружения в~поле \ic{others}. То~есть это обычный А-список, разве что для
хранения каждой привязки используется объект с~тремя полями, а не~две точечных
пары.</p>

<p>Для нахождения значения переменной мы делаем следующее:</p>

<p>\indexC{evaluate-variable}
\begin{code:lisp}
(define (evaluate-variable n r k)
  (lookup r n k) )</p>

<p>(define-method (lookup (r null-env) n k)
  (wrong "Unknown variable" n r k) )</p>

<p>(define-method (lookup (r full-env) n k)
  (lookup (full-env-others r) n k) )</p>

<p>(define-method (lookup (r variable-env) n k)
  (if (eqv? n (variable-env-name r))
      (resume k (variable-env-value r))
      (lookup (variable-env-others r) n k) ) )
\end{code:lisp}</p>

<p>Обобщённая функция \ic{lookup} проходит по окружению, пока не~найдёт подходящую
привязку: с~совпадающим именем и~хранящую значение переменной. Найденное
значение передаётся исходному продолжению с~помощью \ic{resume}.</p>

<p>Изменение значения происходит похожим образом:</p>

<p>\indexC{set"!-cont}
\indexC{evaluate-set"!}
\indexCS{resume}{\ic{set"!-cont}}
\indexCS{update"!}{\ic{null-env}}
\indexCS{update"!}{\ic{full-env}}
\indexCS{update"!}{\ic{variable-env}}
\begin{code:lisp}
(define-class set!-cont continuation (n r))</p>

<p>(define (evaluate-set! n e r k)
  (evaluate e r (make-set!-cont k n r)) )</p>

<p>(define-method (resume (k set!-cont) v)
  (update! (set!-cont-r k) (set!-cont-n k) (set!-cont-k k) v) )</p>

<p>(define-method (update! (r null-env) n k v)
  (wrong "Unknown variable" n r k) )</p>

<p>(define-method (update! (r full-env) n k v)
  (update! (full-env-others r) n k v) )</p>

<p>(define-method (update! (r variable-env) n k v)
  (if (eqv? n (variable-env-name r))
      (begin (set-variable-env-value! r v)
             (resume k v) )
      (update! (variable-env-others r) n k v) ) )
\end{code:lisp}</p>

<p>Нам потребовалось вспомогательное продолжение, так как присваивание проходит
в~два этапа: сначала надо вычислить присваиваемое значение, потом присвоить его
переменной. Класс \ic{set!-cont} представляет необходимые продолжения, его метод
\ic{resume} лишь вызывает \ic{update!} для установки значения, после чего
продолжает дальнейшие вычисления.</p>

<p>
\subsection{Функции}\label{escape/actors/ssect:functions}</p>

<p>Создать функцию легко, с~этим справится \ic{make-function}:</p>

<p>\indexC{function}
\indexC{evaluate-lambda}
\begin{code:lisp}
(define-class function value (variables body env))</p>

<p>(define (evaluate-lambda n* e* r k)
  (resume k (make-function n* e* r)) )
\end{code:lisp}</p>

<p>Чуть сложнее будет вызвать созданную функцию. Обратите внимание на неявное
использование \ic{progn}/\ic{begin} для тела функций.</p>

<p>\indexCS{invoke}{\ic{function}}
\begin{code:lisp}
(define-method (invoke (f function) v* r k)
  (let ((env (extend-env (function-env f)
                         (function-variables f)
                         v* )))
    (evaluate-begin (function-body f) env k) ) )
\end{code:lisp}</p>

<p>Может показаться странным, что функция принимает текущее окружение~\ic{r}, но
никак не~использует его. Это сделано по нескольким причинам. Во-первых, обычно
при компиляции текущие окружение и продолжение считаются чем"~то вроде
глобальных динамических переменных и передаются через жёстко заданные регистры,
которые никак не~выкинуть из реализации. Во-вторых, некоторые функции (о~них
поговорим позже, когда будем рассматривать рефлексию) могут изменять текущее
окружение; например, отладочные функции по запросу пользователя могут изменять
значения произвольных переменных.</p>

<p>Следующая функция расширяет окружение переменных. И~выполняет проверку
согласованности количества имён и связываемых с~ними значений.</p>

<p>\indexC{extend-env}
\begin{code:lisp}
(define (extend-env env names values)
  (cond ((and (pair? names) (pair? values))
         (make-variable-env
          (extend-env env (cdr names) (cdr values))
          (car names)
          (car values) ) )
        ((and (null? names) (null? values)) env)
        ((symbol? names) (make-variable-env env names values))
        (else (wrong "Arity mismatch")) ) )
\end{code:lisp}</p>

<p>Осталось только определить собственно применение функций. Здесь надо помнить
о~том, что функция применяется к~списку аргументов.</p>

<p>\indexC{evfun-cont}\indexC{apply-cont}
\indexC{argument-cont}\indexC{gather-cont}
\indexC{evaluate-application}
\indexCS{resume}{\ic{evfun-cont}}
\indexC{no-more-arguments}
\indexC{evaluate-arguments}
\indexCS{resume}{\ic{argument-cont}}
\indexCS{resume}{\ic{gather-cont}}
\indexCS{resume}{\ic{apply-cont}}
\begin{code:lisp}
(define-class evfun-cont    continuation (e* r))
(define-class apply-cont    continuation (f  r))
(define-class argument-cont continuation (e* r))
(define-class gather-cont   continuation (v))</p>

<p>(define (evaluate-application e e* r k)
  (evaluate e r (make-evfun-cont k e* r)) )</p>

<p>(define-method (resume (k evfun-cont) f)
  (evaluate-arguments (evfun-cont-e* k)
                      (evfun-cont-r k)
                      (make-apply-cont (evfun-cont-k k) f
                                       (evfun-cont-r k) ) ) )
(define no-more-arguments '())</p>

<p>(define (evaluate-arguments e* r k)
  (if (pair? e*)
      (evaluate (car e*) r (make-argument-cont k e* r))
      (resume k no-more-arguments) ) )</p>

<p>(define-method (resume (k argument-cont) v)
  (evaluate-arguments (cdr (argument-cont-e* k))
                      (argument-cont-r k)
                      (make-gather-cont (argument-cont-k k) v) ) )</p>

<p>(define-method (resume (k gather-cont) v*)
  (resume (gather-cont-k k) (cons (gather-cont-v k) v*)) )</p>

<p>(define-method (resume (k apply-cont) v)
  (invoke (apply-cont-f k) v
          (apply-cont-r k)
          (apply-cont-k k) ) )
\end{code:lisp}</p>

<p>На первый взгляд, здесь всё слишком сложно, но только на первый. Вычисления
проводятся слева направо, так что первой вычисляется сама функция с~продолжением
\ic{evfun-cont}. Это продолжение должно вычислить аргументы функции и передать
их продолжению, которое применит функцию к~списку значений аргументов.
В~процессе вычисления аргументов мы обращаемся к~продолжениям \ic{gather-cont},
которые последовательно собирают вычисленные аргументы в~список.</p>

<p>\indexR{продолжения (continuations)!иллюстрация стека}
Давайте рассмотрим на примере, что происходит при вычислении \ic{(cons
foo~bar)}. Пусть переменная \ic{foo} имеет значение~$33$, а \ic{bar}
равна~$-77$. Стек продолжений показан справа, а вычисляемое выражение слева.
\ii{k} "--- это текущее продолжение, \ii{r} "--- текущее окружение.
Функция-значение переменной \ic{cons} записывается как \ii{cons}.</p>

<p>{\def\EV{\ii{evaluate}} \def\RE{\ii{resume}} \def\IV{\ii{invoke}}
 \def\EA{\ii{evaluate-arguments}}
 \def\EC{\icc{evfun-cont}}
 \def\PC{\icc{apply-cont}}
 \def\GC{\icc{gather-cont}}
 \def\AC{\icc{argument-cont}}
 \def\iv#1{\textsf{#1}}
 \def\X{\kern0.75em}
%
\begin{eval-stack}
  {\EV} (cons foo bar) \ii{r} \-                                        \ii{k}\\
  {\EV} cons \ii{r}           \-                 {\EC} (foo bar) \ii{r} \ii{k}\\
  {\RE} \ii{cons}             \-                 {\EC} (foo bar) \ii{r} \ii{k}\\
  {\EA} (foo bar) \ii{r}      \-                        {\PC} \ii{cons} \ii{k}\\
  {\EV} foo \ii{r}            \- {\AC} (foo bar) \ii{r} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{33}               \- {\AC} (foo bar) \ii{r} {\PC} \ii{cons} \ii{k}\\
  {\EA} (bar) \ii{r}         \-           {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\EV} bar \ii{r}      \-{\AC} () \ii{r} {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{--77}      \- {\AC} () \ii{r} {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\EA} () \ii{r}      \- {\GC} \iv{--77} {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{(\,)}       \-{\GC} \iv{--77} {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{(--77)}        \-             {\GC} \iv{33} {\PC} \ii{cons} \ii{k}\\
  {\RE} \iv{(33\X--77)}      \-                         {\PC} \ii{cons} \ii{k}\\
  {\IV} \ii{cons} \iv{(33\X--77)}\-                                     \ii{k}
\end{eval-stack}}</p>

<p>
\section{Инициализация интерпретатора}\label{escape/sect:init}</p>

<p>Перед погружением в~сокровенные тайны устройства управляющих форм, давайте
сначала подготовим наш интерпретатор к~запуску. Этот раздел похож на
раздел~\ref{basics/sect:global-environment}.
\seePage[basics/sect:global-environment] Неплохо было~бы вначале научить наш
интерпретатор нескольким полезным вещам вроде \ic{car}, поэтому объявим
пару макросов, которые помогут нам наполнить его глобальное окружение.</p>

<p>\indexC{definitial}
\indexC{defprimitive}
\indexC{primitive}
\indexC{r.init}
\indexC{cons}
\indexC{car}
\begin{code:lisp}
(define-syntax definitial
  (syntax-rules ()
    ((definitial name)
     (definitial name 'void) )
    ((definitial name value)
     (begin (set! r.init (make-variable-env r.init 'name value))
            'name ) ) ) )</p>

<p>(define-class primitive value (name address))</p>

<p>(define-syntax defprimitive
  (syntax-rules ()
    ((defprimitive name value arity)
     (definitial name
       (make-primitive
        'name (lambda (v* r k)
                (if (= arity (length v*))
                    (resume k (apply value v*))
                    (wrong "Incorrect arity" 'name v*) ) ) ) ) ) ) )</p>

<p>(define r.init (make-null-env))</p>

<p>(defprimitive cons cons 2)
(defprimitive car car 1)
\end{code:lisp}</p>

<p>Создаваемые примитивные функции должны вызываться той~же функцией \ic{invoke},
которая обрабатывает обычные функции. Каждый примитив имеет два поля. Первое из
них служит для упрощения отладки: оно хранит имя примитива. Естественно, это
лишь подсказка, так как ничто не~мешает в~дальнейшем связать один и тот~же
примитив с~разными именами.\footnote*{Эта подсказка позволяет также копировать
примитивы по значению: выражение \ic{(begin (set!~foo~car) (set!~car~3) foo)}
возвращает \ic{\#<car>} "--- собственное имя примитива, связанного с~глобальной
переменной.} Второе поле хранит «адрес» примитива, ссылку на соответствующую
функцию языка реализации интерпретатора. В~итоге примитивы вызываются с~помощью
\ic{invoke} следующим образом:</p>

<p>\indexCS{invoke}{\ic{primitive}}
\begin{code:lisp}
(define-method (invoke (f primitive) v* r k)
  ((primitive-address f) v* r k) )
\end{code:lisp}</p>

<p>Для запуска нашего прекрасного интерпретатора остаётся лишь определить начальное
продолжение-заглушку. Это продолжение будет печатать на экран всё, что ему
передают.</p>

<p>\indexC{bottom-cont}
\indexCS{resume}{\ic{bottom-cont}}
\indexC{chapter3-interpreter}
\begin{code:lisp}
(define-class bottom-cont continuation (f))</p>

<p>(define-method (resume (k bottom-cont) v)
  ((bottom-cont-f k) v) )</p>

<p>(define (chapter3-interpreter)
  (define (toplevel)
    (evaluate (read)
              r.init
              (make-bottom-cont 'void display) )
    (toplevel) )
  (toplevel) )
\end{code:lisp}</p>

<p>Заметьте, что мы могли~бы легко написать похожий интерпретатор на истинно
объектно"=ориентированном языке, например на Smalltalk~\cite{gr83}, получив
заодно доступ к~его хвалёному отладчику и среде разработки. Для полного счастья
останется только добавить те несколько строчек, что открывают гору маленьких
окошек с~контекстными подсказками.</p>

<p>
\section{Реализация управляющих~форм}\label{escape/sect:implementation}</p>

<p>Начнём с~самой мощной формы "--- \ic{call/cc}. Парадоксально, но факт: это самая
простая форма, если смотреть на количество кода. Благодаря используемому нами
объектному подходу и явному присутствию продолжений в~интерпретаторе,
преобразование их в~полноценные объекты языка становится тривиальным.</p>

<p>
\subsection{\texorpdfstring%
{Реализация \protect\ic{call/cc}}%
{Реализация call/cc}}%
\label{escape/implementation/ssect:call/cc}</p>

<p>\indexCS{call/cc}{реализация}
Функция \ic{call/cc} берёт текущее продолжение~\ii{k}, превращает его в~объект,
понятный \ic{invoke}, и применяет к~нему свой аргумент "--- унарную функцию.
Следующий код чуть~ли не~буквально записывает это определение:</p>

<p>\indexC{call/cc}
\begin{code:lisp}
(definitial call/cc
  (make-primitive
   'call/cc
   (lambda (v* r k)
     (if (= 1 (length v*))
         (invoke (car v*) (list k) r k)
         (wrong "Incorrect arity" 'call/cc v*) ) ) ) )
\end{code:lisp}</p>

<p>Хоть тут и немного строчек, всё~же стоит кое"~что объяснить. \ic{call/cc} это
функция, но мы определяем её с~помощью \ic{defprimitive}, так как это
единственный способ для функции добраться до~\ic{k}. Переменная \ic{call/cc}
(это всё~же \Lisp1) связывается с~объектом класса \ic{primitive}. Для вызова
объектов этого класса необходим «адрес» функции, которому у~нас соответствуют
функции языка определения вида \ic{(lambda (v*~r~k) ...)}. После проверки на
арность первый аргумент \ic{call/cc} применяется к~захваченному продолжению.
Само продолжение мы никак не~трогаем, оно остаётся объектом языка определения.
Так как сохранённые «сырые» продолжения могут быть впоследствии переданы
\ic{invoke} напрямую, то её надо научить обращаться с~ними:</p>

<p>\indexCS{invoke}{\ic{continuation}}
\begin{code:lisp}
(define-method (invoke (f continuation) v* r k)
  (if (= 1 (length v*))
      (resume f (car v*))
      (wrong "Continuations expect one argument" v* r k) ) )
\end{code:lisp}</p>

<p>
\subsection{\texorpdfstring{Реализация \protect\ic{catch}}{Реализация catch}}%
\label{escape/implementation/ssect:catch}</p>

<p>\indexCS{catch}{реализация}
\indexCS{throw}{реализация}
Форма \ic{catch} по-своему интересна, так как требует разительно иного подхода,
нежели форма~\ic{block}, которую мы рассмотрим чуть позже. Как обычно, начнём
с~добавления анализа \ic{catch} и~\ic{throw} в~\ic{evaluate}:</p>

<p>\begin{code:lisp}
...
((catch) (evaluate-catch (cadr e) (cddr e) r k))
((throw) (evaluate-throw (cadr e) (caddr e) r k))
...
\end{code:lisp}</p>

<p>Здесь решено сделать \ic{throw} специальной формой, а не~функцией. В~первую
очередь с~целью походить на {\CommonLisp}. Далее определим правила обработки
формы \ic{catch}:</p>

<p>\indexC{catch-cont}
\indexC{labeled-cont}
\indexC{evaluate-catch}
\indexCS{resume}{\ic{catch-cont}}
\begin{code:lisp}
(define-class catch-cont   continuation (body r))
(define-class labeled-cont continuation (tag))</p>

<p>(define (evaluate-catch tag body r k)
  (evaluate tag r (make-catch-cont k body r)) )</p>

<p>(define-method (resume (k catch-cont) v)
  (evaluate-begin (catch-cont-body k)
                  (catch-cont-r k)
                  (make-labeled-cont (catch-cont-k k) v) ) )
\end{code:lisp}</p>

<p>Как видите, \ic{catch} вычисляет первый аргумент (метку), связывает с~ней своё
продолжение, создавая таким образом помеченный блок, и, наконец, последовательно
вычисляет формы, составляющие её тело. Когда продолжение этого блока получает
значение, оно просто перебрасывает его сохранённому продолжению самой формы 
\ic{catch}. Форма \ic{throw} чуть более сложная:</p>

<p>\indexC{throw-cont}
\indexC{throwing-cont}
\indexC{evaluate-throw}
\indexCS{resume}{\ic{throw-cont}}
\indexC{catch-lookup}
\indexCS{resume}{\ic{throwing-cont}}
\indexC{eqv"?}
\begin{code:lisp}
(define-class throw-cont    continuation (form r))
(define-class throwing-cont continuation (tag cont))</p>

<p>(define (evaluate-throw tag form r k)
  (evaluate tag r (make-throw-cont k form r)) )</p>

<p>(define-method (resume (k throw-cont) tag)
  (catch-lookup k tag k) )</p>

<p>(define-generic (catch-lookup (k) tag kk)
  (wrong "Not a continuation" k tag kk) )</p>

<p>(define-method (catch-lookup (k continuation) tag kk)
  (catch-lookup (continuation-k k) tag kk) )</p>

<p>(define-method (catch-lookup (k bottom-cont) tag kk)
  (wrong "No associated catch" k tag kk) )</p>

<p>(define-method (catch-lookup (k labeled-cont) tag kk)
  (if (eqv? tag (labeled-cont-tag k))  ; внимание на компаратор
      (evaluate (throw-cont-form kk)
                (throw-cont-r kk)
                (make-throwing-cont kk tag k) )
      (catch-lookup (labeled-cont-k k) tag kk) ) )</p>

<p>(define-method (resume (k throwing-cont) v)
  (resume (throwing-cont-cont k) v) )
\end{code:lisp}</p>

<p>\indexR{переходы (escapes)!вложенные}
Форма \ic{throw} вычисляет первый аргумент и пытается найти продолжение
с~совпадающей меткой. Если в~процессе поиска она добирается до начального
продолжения, то сигнализирует об~ошибке. Если~же нет, то вычисляется второй
аргумент \ic{throw} и его значение передаётся найденному продолжению. Но
передаётся оно по-хитрому: через \ic{throwing-cont}. Дело в~том, что в~процессе
вычисления этого значения тоже может возникнуть переход. Если~бы продолжением
данного вычисления было продолжение, сохранённое в~метке внешней формы
\ic{throw}, то вложенная форма \ic{throw} начинала~бы поиски \ic{catch} так, как
будто~бы переход на внешнюю метку уже произошёл. Но это не~так, так что поиск
следует вести от текущей формы \ic{throw}, потому и создаётся специальное
промежуточное продолжение. В~итоге, когда мы пишем:</p>

<p>\begin{code:lisp}
(catch 2
  (* 7 (catch 1
         (* 3 (catch 2
                (throw 1 (throw 2 5)) )) )) )
\end{code:lisp}</p>

<p>\noindent
то получаем \ic{(*~7~3~5)}, а не~\ic{5}.</p>

<p>Кроме того, реализация \ic{throw} как специальной формы позволяет отлавливать
больше ошибок.</p>

<p>\begin{code:lisp}
(catch 2 (* 7 (throw 1 (throw 2 3))))
\end{code:lisp}</p>

<p>\noindent
Эта форма гарантированно вернёт не~\ic{3}, а ошибку \ic{"No~associated catch"},
так как действительно нет \ic{catch} с~меткой~\ic{1} и не~важно, что она
вроде~бы как не~используется.</p>

<p>
\subsection{\texorpdfstring{Реализация \protect\ic{block}}{Реализация block}}%
\label{escape/implementation/ssect:block}</p>

<p>\indexCS{block}{реализация}
\indexCS{return-from}{реализация}
Для реализации лексических меток переходов необходимо решить две проблемы.
Первая: гарантировать динамическое время жизни продолжений. Вторая: обеспечить
лексическую видимость меток. Для решения второй задачи мы, естественно,
воспользуемся лексическими окружениями, где лексическая область видимости есть
«из~коробки». Над первой~же придётся немного поработать самостоятельно. Чтобы
не~было путаницы, у~\ic{block} будет личный класс окружений для хранения
привязок меток к~продолжениям.</p>

<p>Начинаем как обычно: добавляем распознавание формы \ic{block} в~\ic{evaluate} и
описываем необходимые функции-обработчики.</p>

<p>\indexC{block-cont}
\indexC{block-env}
\indexC{evaluate-block}
\indexCS{resume}{\ic{block-cont}}
\begin{code:lisp}
(define-class block-cont continuation (label))
(define-class block-env full-env (cont))</p>

<p>(define (evaluate-block label body r k)
  (let ((k (make-block-cont k label)))
    (evaluate-begin body
                    (make-block-env r label k)
                    k ) ) )</p>

<p>(define-method (resume (k block-cont) v)
  (resume (block-cont-k k) v) )
\end{code:lisp}</p>

<p>С~нормальным поведением закончили, переходим к~\ic{return-from}. Сначала
добавляем её в~\ic{evaluate}:</p>

<p>\begin{code:lisp}
...
((block)       (evaluate-block (cadr e) (cddr e) r k))
((return-from) (evaluate-return-from (cadr e) (caddr e) r k))
...
\end{code:lisp}</p>

<p>\noindent
Затем описываем обработку:</p>

<p>\indexC{return-from-cont}
\indexC{evaluate-return-from}
\indexCS{resume}{\ic{return-from-cont}}
\indexC{block-lookup}
\indexC{unwind}
\indexCS{unwind}{\ic{continuation}}
\indexCS{unwind}{\ic{bottom-cont}}
\begin{code:lisp}
(define-class return-from-cont continuation (r label))</p>

<p>(define (evaluate-return-from label form r k)
  (evaluate form r (make-return-from-cont k r label)) )</p>

<p>(define-method (resume (k return-from-cont) v)
  (block-lookup (return-from-cont-r k)
                (return-from-cont-label k)
                (return-from-cont-k k)
                v ) )</p>

<p>(define-generic (block-lookup (r) n k v)
  (wrong "Not an environment" r n k v) )</p>

<p>(define-method (block-lookup (r block-env) n k v)
  (if (eq? n (block-env-name r))
      (unwind k v (block-env-cont r))
      (block-lookup (block-env-others r) n k v) ) )</p>

<p>(define-method (block-lookup (r full-env) n k v)
  (block-lookup (variable-env-others r) n k v) )</p>

<p>(define-method (block-lookup (r null-env) n k v)
  (wrong "Unknown block label" n r k v) )</p>

<p>(define-generic (unwind (k) v ktarget))</p>

<p>(define-method (unwind (k continuation) v ktarget)
  (if (eq? k ktarget)
      (resume k v)
      (unwind (continuation-k k) v ktarget) ) )</p>

<p>(define-method (unwind (k bottom-cont) v ktarget)
  (wrong "Obsolete continuation" v) )
\end{code:lisp}</p>

<p>После вычисления необходимого значения функция \ic{block-lookup} отправляется
на поиски продолжения, связанного с~меткой \ic{tag} в~лексическом окружении
формы \ic{return-from}. Если такое продолжение существует, то дальше с~помощью
\ic{unwind} она убеждается в~том, что оно является частью текущего продолжения.</p>

<p>Поиск именованного блока, хранящего нужное продолжение, реализуется обобщённой
функцией \ic{block-lookup}. Она обучена пропускать ненужные окружения с~обычными
переменными, останавливаясь только на экземплярах \ic{block-env}, хранящих
нужные нам \ic{block-cont}. Аналогично и \ic{lookup} пропускает экземпляры
\ic{block-env}, останавливаясь лишь на \ic{variable-env}. Именно с~этой целью
данные классы наследуются от общего предка: \ic{full-env}. Это позволяет
безболезненно добавлять новые классы окружений, которые не~будут мешать уже
существующим.</p>

<p>Наконец, обобщённая функция \ic{unwind} передаёт вычисленное значение найденному
продолжению, но только если оно ещё актуально "--- то~есть доступно из текущего
продолжения.</p>

<p>
\subsection{\texorpdfstring%
{Реализация \protect\ic{unwind-protect}}%
{Реализация unwind-protect}}%
\label{escape/implementation/ssect:unwind-protect}</p>

<p>\indexCS{unwind-protect}{реализация}
Форма \ic{unwind-protect} является самой сложной для реализации; нам понадобится
изменить определения форм \ic{catch} и \ic{block}, чтобы они вели себя
правильно, когда находятся внутри \ic{unwind-protect}. Это хороший пример
возможности, чьё введение требует переработки всего, что уже написано до этого.
Но отсутствие \ic{unwind-protect} приводит к~другим сложностям в~будущем, так
что оно того стоит.</p>

<p>Начнём с~определения поведения самой формы \ic{unwind-protect} (которая, как мы
уже говорили, мало чем отличается от~\ic{prog1}):</p>

<p>\indexC{unwind-protect-cont}
\indexC{protect-return-cont}
\indexC{evaluate-unwind-protect}
\indexCS{resume}{\ic{unwind-protect-cont}}
\indexCS{resume}{\ic{protect-return-cont}}
\begin{code:lisp}
(define-class unwind-protect-cont continuation (cleanup r))
(define-class protect-return-cont continuation (value))</p>

<p>(define (evaluate-unwind-protect form cleanup r k)
  (evaluate form r
            (make-unwind-protect-cont k cleanup r) ) )</p>

<p>(define-method (resume (k unwind-protect-cont) v)
  (evaluate-begin (unwind-protect-cont-cleanup k)
                  (unwind-protect-cont-r k)
                  (make-protect-return-cont
                   (unwind-protect-cont-k k) v ) ) )</p>

<p>(define-method (resume (k protect-return-cont) v)
  (resume (protect-return-cont-k k) (protect-return-cont-value k)) )
\end{code:lisp}</p>

<p>Далее необходимо доработать \ic{catch} и \ic{block}, чтобы они выполняли
действия, предписанные \ic{unwind-protect}, даже в~случае выхода из них
с~помощью \ic{throw} или \ic{return-from}. Для \ic{catch} необходимо изменить
обработку \ic{throwing-cont}:</p>

<p>\indexCS{resume}{\ic{throwing-cont}}
\begin{code:lisp}
(define-method (resume (k throwing-cont) v)
  (unwind (throwing-cont-k k) v (throwing-cont-cont k)) )
\end{code:lisp}</p>

<p>\noindent
И~научить \ic{unwind} выполнять сохранённые действия в~процессе обхода стека:</p>

<p>\indexC{unwind-cont}
\indexCS{unwind}{\ic{unwind-protect-cont}}
\indexCS{resume}{\ic{unwind-cont}}
\begin{code:lisp}
(define-class unwind-cont continuation (value target))</p>

<p>(define-method (unwind (k unwind-protect-cont) v target)
  (evaluate-begin (unwind-protect-cont-cleanup k)
                  (unwind-protect-cont-r k)
                  (make-unwind-cont
                   (unwind-protect-cont-k k) v target ) ) )</p>

<p>(define-method (resume (k unwind-cont) v)
  (unwind (unwind-cont-k k)
          (unwind-cont-value k)
          (unwind-cont-target k) ) )
\end{code:lisp}</p>

<p>\indexR{раскрутка стека (unwinding)}
Теперь, чтобы передать значение при переходе, нам недостаточно просто его отдать
нужному продолжению. Нам необходимо подняться по стеку продолжений с~помощью
\ic{unwind} (\term{раскрутить} стек) от текущего до целевого продолжения,
выполняя по пути соответствующую уборку. Продолжения форм-уборщиков имеют тип
\ic{unwind-cont}. Их обработка с~помощью \ic{resume} вызывает продолжение уборки
до достижения цели на~случай вложенных форм \ic{unwind-protect}, а также
устанавливает правильное продолжение на случай переходов внутри самих
форм-уборщиков (тот самый процесс отбрасывания продолжений, который
рассматривался на странице~\pageref{escape/forms/protection/p:discard}).</p>

<p>Что касается \ic{block}, то тут даже делать ничего не~надо. Как вы помните,
\ic{block-lookup} уже вызывает \ic{unwind} для раскрутки стека с~целью проверки
актуальности перехода:</p>

<p>\begin{code:lisp}
(define-method (block-lookup (r block-env) n k v)
  (if (eq? n (block-env-name r))
      (unwind k v (block-env-cont r))
      (block-lookup (block-env-others r) n k v) ) )
\end{code:lisp}</p>

<p>\noindent
Так что остаётся только сказать спасибо обобщённым функциям.</p>

<p>\indexCS{block}{и~\ic{unwind-protect}}
Может показаться, что с~появлением \ic{unwind-protect} форма \ic{block}
перестала быть быстрее \ic{catch}, ведь они обе вынуждены пользоваться медленной
\ic{unwind}. В~общем случае, конечно, да, но в~частностях, коих большинство, это
не~так: \ic{unwind-protect} является специальной формой, так что она не~может
быть спутана с~обычной функцией, её всегда надо использовать явно. А~если
\ic{return-from} прямо видит метку соответствующего~\ic{block} (то~есть когда
между ними нет \ic{lambda}- или \ic{unwind-protect}-форм), то \ic{unwind} будет
работать так~же быстро, как и раньше.</p>

<p>\bigskip</p>

<p>\indexCS{unwind-protect}{ограничения \CommonLisp}
В~{\CommonLisp} (CLtL2~\cite{ste90}) присутствует ещё одно интересное
ограничение, касающееся переходов из форм-уборщиков. Эти переходы не~могут вести
внутрь той формы, из которой в~теле \ic{unwind-protect} был вызван выход.
Введено такое ограничение с~целью недопущения бесконечных циклов из переходов,
любые попытки выбраться из которых пресекаются \ic{unwind-protect}.
\seeEx[escape/ex:eternal] Следовательно, следующая программа выдаст ошибку, так
как форма-уборщик хочет прыгнуть ближе, чем прыжок на~\ic{1}, который уже
в~процессе.</p>

<p>\begin{code:lisp}
(catch 1                  |\dialect{\CommonLisp}|
  (catch 2
    (unwind-protect (throw 1 'foo)
      (throw 2 'bar) ) ) )         |\is| |\ii{ошибка!}|
\end{code:lisp}</p>

<p>
\section{\texorpdfstring%
{Сравнение \protect\ic{call/cc}~и~\protect\ic{catch}}%
{Сравнение call/cc и catch}}%
\label{escape/sect:comparing}</p>

<p>Благодаря объектам, продолжения можно представлять связным списком блоков.
Некоторые из этих блоков доступны прямо в~лексическом окружении; до других
необходимо пробираться, проходя через несколько промежуточных продолжений;
третьи вызывают выполнение определённых действий, когда через них проходят.</p>

<p>\indexR{продолжения (continuations)!время жизни!динамическое}
В~языках вроде Лиспа, где есть продолжения с~динамическим временем жизни, стек
вызовов и продолжения являются синонимами. Когда мы пишем \ic{(evaluate ec r
(make-if-cont k et ef r))}, мы явно кладём в~стек блок кода, который будет
обрабатывать значение, которое вернёт условие \ic{if}-формы. И~наоборот, когда
мы пишем \ic{(evaluate-begin (cdr (begin-cont-e*~k)) (begin-cont-r~k)
(begin-cont-k~k))}, то это значит, что текущий блок~\ic{k} надо выбросить и
поставить на его место \ic{(begin-cont-k k)}. Можно легко убедиться в~том, что
такие блоки действительно выбрасываются, в~стеке не~остаются недовыполненные
куски продолжений. Таким образом, когда мы выходим из блока, все продолжения,
указывающие на него и, возможно, сохранённые в~других блоках, становятся
недействительными. Обычно продолжения неявно хранятся в~стеке или даже
в~нескольких стеках, согласованных между собой, а переходы между ними
компилируются в~примитивы языка~Си: \ic{setjmp}/\ic{longjmp}.
\seePage[cc/sect:call/cc]</p>

<p>\indexC{let/cc}
В~диалекте {\EuLisp}~\cite{pe92} есть специальная форма \ic{let/cc} со~следующим
синтаксисом:</p>

<p>\begin{code:lisp}
(let/cc |\ii{переменная}| |\ii{формы}|...)  |\dialect{\EuLisp}|
\end{code:lisp}</p>

<p>\phantomlabel{escape/comparing/par:bind-exit}
\indexC{bind-exit}
В~диалекте Dylan~\cite{app92b} тоже есть подобная форма:</p>

<p>\begin{code:lisp}
(bind-exit (|\ii{переменная}|) |\ii{формы}|...)  |\dialect{Dylan}|
\end{code:lisp}</p>

<p>\noindent
Эта форма связывает текущее продолжение с~\ii{переменной}, имеющей область
видимости, ограниченную телом \ic{let/cc} или~\ic{bind-exit}. В~этом случае
продолжение несомненно является полноценным объектом, имеющим интерфейс унарной
функции. Но его \emph{полезное} время жизни динамическое, его можно использовать
лишь во~время вычисления тела формы \ic{let/cc} или \ic{bind-exit}. Точнее, само
продолжение, хранящееся в~\ii{переменной}, имеет неограниченное время жизни, но
становится бесполезным при выходе из связывающей формы. Это характерная для
{\EuLisp} и Dylan черта, но её нет как в~Scheme (где продолжения истинно
неограниченны), так и в~{\CommonLisp} (где они вообще объекты второго класса).
Тем не~менее, такое поведение можно проэмулировать в~Scheme:</p>

<p>\begin{code:lisp}
(define-syntax let/cc
  (syntax-rules ()
    ((let/cc variable . body)
     (block variable
       (let ((variable (lambda (x) (return-from variable x))))
         . body ) ) ) ) )
\end{code:lisp}</p>

<p>\indexR{продолжения (continuations)!варианты представления}
В~мире Scheme продолжения больше нельзя считать неявной частью стека, так как
они могут храниться во~внешних структурах данных. Поэтому приходится применять
другую модель: древовидную, которую иногда называют \term{стек-кактус} или
\term{спагетти-стек}. Наиболее простой способ её реализовать: вообще
не~пользоваться аппаратным стеком, размещая все фреймы в~куче.</p>

<p>Такой подход унифицирует выделение памяти под структуры данных и, по
мнению~\cite{as94}, облегчает портирование. Тем не~менее, он приводит
к~фрагментации, что вынуждает явно хранить ссылки между продолжениями. (Хотя
в~\cite{mb93} приведено несколько вариантов решения этих проблем.) Как правило,
ради эффективности в~аппаратный стек стараются поместить максимум данных о~ходе
исполнения программы, так что каноническая реализация \ic{call/cc} делает снимки
стека и сохраняет в~куче именно их; таким образом, продолжения "--- это как раз
такие снимки стека. Конечно, существуют и другие варианты реализации,
рассмотренные, например, в~\cite{cho88, hdb90}, где используются разделяемые
копии, отложенное копирование, частичное копирование {\itd} Естественно,
каждый из этих вариантов даёт свои преимущества, но за определённую плату.</p>

<p>Форма \ic{call/cc} больше похожа на \ic{block}, нежели на~\ic{catch}. Оба типа
продолжений имеют лексическую область видимости, они различаются только временем
жизни. В~некоторых диалектах, вроде~\cite{im89}, есть урезанный вариант
\ic{call/cc}. Называется он \ic{call/ep} (от \term{call with exit procedure});
эта \emph{процедура выхода} хорошо видна в~\ic{block}/\ic{return-from}, равно
как и в~\ic{let/cc}. Интерфейс у~\ic{call/ep} такой~же, как и~у~\ic{call/cc}:</p>

<p>\indexC{call/ep}
\begin{code:lisp}
(call/ep (lambda (exit) ...))
\end{code:lisp}</p>

<p>\indexR{объекты!второго класса}
Переменная \ic{exit} унарной функции-аргумента связывается с~продолжением формы
\ic{call/ep} на время вычисления тела этой функции. Схожесть с~\ic{block}
налицо, разве что мы используем обычное окружение переменных, а не~отдельное
окружение лексических меток. Основное их отличие в~том, что \ic{call/ep} делает
продолжение полноценным объектом, который можно использовать так~же, как любой
другой объект вроде чисел, замыканий или списков. Имея \ic{block}, мы тоже можем
создать функционально аналогичный объект, написав \ic{(lambda (x) (return-from
\ii{метка} x))}. Но все возможные места выхода из \ic{block} известны статически
(это соответствующие формы \ic{return-from}), тогда как в~\ic{call/ep} совсем
по-другому: например, по выражению \ic{(call/ep foo)} нельзя понять, может~ли
произойти переход или нет. Единственный способ это узнать "--- проанализировать
\ic{foo}, но эта функция может быть определена в~совершенно другом месте, а то и
вовсе генерироваться динамически. Следовательно, функция \ic{call/ep} более
сложна для компилятора, чем специальная форма \ic{block}, но вместе с~тем имеет
и~больше возможностей.</p>

<p>Продолжая сравнивать \ic{call/ep} и~\ic{block}, мы замечаем больше отличий.
Например, для формы \ic{call/ep}, в~которой аргумент записан в~виде явной
\ic{lambda}-формы, можно не~создавать замыкание. Следовательно, эффективный
компилятор должен отделять случай \ic{(call/ep (lambda~...))} от остальных. Это
похоже на специальные формы, так как они тоже трактуются по-особенному. В~Scheme
принято использовать функции как основной инструмент построения абстракций,
тогда как специальные формы являются чем"~то вроде подсказок компилятору. Они
часто одинаково мощны, вопрос лишь в~балансе сложности "--- кому важнее
облегчить жизнь: пользователю или, наоборот, разработчику языка.</p>

<p>\bigskip</p>

<p>Подводя итог, если вам нужна мощь за адекватную цену, то \ic{call/cc} к~вашим
услугам, так как она позволяет реализовать все мыслимые управляющие конструкции:
переходы, сопрограммы, частичные продолжения и~так~далее. Если~же вам нужны
только «нормальные» вещи (а~Лисп уже не~раз показывал, что можно писать
удивительные программы и~без~\ic{call/cc}), то используйте управляющие формы
{\CommonLisp}, простые и компилирующиеся в~эффективный машинный~код.</p>

<p>
\section{Продолжения в~программировании}\label{escape/sect:pr-cont}</p>

<p>\indexE{CPS}
\indexR{стиль передачи продолжений (CPS)}
\indexR{продолжения (continuations)|seealso{стиль передачи продолжений (CPS)}}
Существует стиль программирования, называемый «\term{стилем передачи
продолжений}» (\english{continuation passing style}, CPS). В~нём во~главу угла
ставится явное указание не~только того, что возвращать в~качестве результата
функции, но и~кому. После завершения вычислений функция не~возвращает результат
абстрактному получателю куда"~то «наверх», а применяет конкретного получателя,
представленного продолжением, к~результату. В~общем, если у~нас есть вычисление
\ic{(foo (bar))}, то оно выворачивается наизнанку, преобразуясь в~следующий вид:
\ic{(new-bar foo)}, где \ic{foo} и является продолжением, которому \ic{new-bar}
передаст результат вычислений. Давайте рассмотрим данное преобразование
на~примере многострадального факториала. Пусть мы хотим вычислить~$n(n!)$:</p>

<p>\indexC{fact}
\begin{code:lisp}
(define (fact n k)
  (if (= n 0) (k 1)
      (fact (- n 1) (lambda (r) (k (* n r)))) ) )</p>

<p>(fact n (lambda (r) (* n r))) |\is| |$n(n!)$|
\end{code:lisp}</p>

<p>Факториал теперь принимает дополнительный аргумент~\ic{k}: получателя
вычисленного факториала. Если результат равен единице, то к~ней просто
применяется~\ic{k}. Если~же результат сразу сказать нельзя, то следует ожидаемый
рекурсивный вызов. Проблема состоит в~том, что хорошо было~бы сначала умножить
факториал~$(\ic{n} - 1)$ на~\ic{n} и только потом уже передавать произведение
получателю, а форма \ic{(k (*~n (fact (-~n~1) k)))} делает всё наоборот! Поэтому
и мы всё сделаем шиворот-навыворот: пусть получатель сам умножает результат
на~\ic{n}. Настоящий получатель оборачивается в~функцию: \ic{(lambda (r) (k
(*~n~r)))}, и передаётся следующему рекурсивному вызову.</p>

<p>Такое определение факториала даёт возможность вычислять различные величины
с~помощью одного и того~же определения. Например, обычный факториал: \ic{(fact
\ii{n} (lambda (x) x))}, или удвоенный: \ic{(fact \ii{n} (lambda (x) (*~2~x)))},
или что"~то более сложное.</p>

<p>
\subsection{Составные значения}\label{escape/pr-cont/ssect:multiple}</p>

<p>\indexR{возвращаемые значения!множественные}
\indexR{множественные значения}
Продолжения очень удобно использовать для обработки составных величин.
Существуют вычисления, результатом которых является не~одна величина, а
несколько. Например, в~{\CommonLisp} целочисленное деление (\ic{truncate})
одновременно возвращает частное и остаток. Пусть у~нас тоже есть подобная
функция "--- назовём её \ic{divide}, "--- которая принимает два числа и
продолжение, вычисляет частное и остаток от деления, а затем применяет
переданное продолжение к~этим величинам. Например, вот так можно проверить
правильность выполнения деления этой функцией:</p>

<p>\begin{code:lisp}
(let* ((p (read)) (q (read)))
  (divide p q (lambda (quotient remainder)
                (= p (+ (* quotient q) remainder)) )) )
\end{code:lisp}</p>

<p>Менее тривиальный пример "--- вычисление коэффициентов~Безу.\footnote*{Фух!
Наконец"~то мне удалось опубликовать эту функцию! Она с~1981~года валяется
у~меня без дела.} Соотношение Безу утверждает, что для любых целых чисел $n$
и~$p$ можно найти такую пару целых $u$ и~$v$, что $un + vp = \NOD(n, p)$. Для
вычисления коэффициентов $u$ и~$v$ можно использовать расширенный алгоритм
Евклида.</p>

<p>\indexC{bezout}
\begin{code:lisp}
(define (bezout n p k)  ; пусть $n > p$
  (divide
   n p (lambda (q r)
         (if (= r 0)
             (k 0 1)    ; т.\,к. $0 \cdot qp + 1 \cdot p = p$
             (bezout
              p r (lambda (u v)
                    (k v (- u (* v q))) ) ) ) ) ) )
\end{code:lisp}</p>

<p>Функция \ic{bezout} использует \ic{divide}, чтобы сохранить в~\ic{q} и~\ic{r}
частное и остаток от деления \ic{n} на~\ic{p}. Если $n$ делится нацело на~$p$,
то очевидно, что их наибольший общий делитель равен~$p$ и есть тривиальное
решение: $0$~и~$1$. Если остаток не~равен нулю, то\textdots\ попробуйте доказать
правильность этого алгоритма самостоятельно; для этого не~надо быть экспертом
в~теории чисел, достаточно знать свойства~НОД. А~здесь мы ограничимся простой
проверкой:</p>

<p>\begin{code:lisp}
(bezout 1991 1960 list) |\is| (-569 578)
\end{code:lisp}</p>

<p>
\subsection{Хвостовая рекурсия}\label{escape/pr-cont/ssect:tail-recusion}</p>

<p>В~примере с~вычислением факториала с~помощью продолжений вызов \ic{fact} в~конце
концов приводил к~ещё одному вызову \ic{fact}. Если мы проследим за вычислением
\ic{(fact~3~list)}, то, отбрасывая очевидные шаги, получим следующую картину:</p>

<p>\begin{code:lisp}
(fact 3 list)
|\eq| (fact 2 (lambda (r) (k (* n r))))|\begin{where}
                                        \- n {\is} 3
                                        \- k {\eq} list
                                        \end{where}|
|\eq| (fact 1 (lambda (r) (k (* n r))))|\begin{where}
                                \- n {\is} 2
                                \- k {\is} (lambda (r) (k (* n r)))\begin{where}
                                                                  \- n {\is} 3
                                                                  \- k {\eq} list
                                                                  \end{where}
                                        \end{where}|
|\eq| (k (* n 1))|\begin{where}
                  \- n {\is} 2
                  \- k {\is} (lambda (r) (k (* n r)))\begin{where}
                                                    \- n {\is} 3
                                                    \- k {\eq} list
                                                    \end{where}
                  \end{where}|
|\eq| (k (* n 2))|\begin{where}
                  \- n {\is} 3
                  \- k {\eq} list
                  \end{where}|
|\is| (6)
\end{code:lisp}</p>

<p>\indexR{рекурсия!хвостовая}
\indexR{хвостовые вызовы!рекурсивные}
\indexR{вызов!хвостовой}
Когда \ic{fact} вызывает \ic{fact}, вторая функция вычисляется с~тем~же
продолжением, что и первая. Такое явление называется \term{хвостовой рекурсией}
"--- почему рекурсия, понятно, а хвостовая, потому что этот вызов выполняется
в~«хвосте» вычислений: сразу~же после него следует выход из функции. Хвостовая
рекурсия "--- это частный случай хвостового вызова. Хвостовой вызов происходит
тогда, когда текущее вычисление может быть полностью заменено вызываемым.
То~есть вызов происходит из \term{хвостовой позиции}, если он выполняется
с~\emph{неизменным продолжением}.</p>

<p>В~примере с~вычислением коэффициентов Безу функция \ic{bezout} вызывает
\ic{divide} из хвостовой позиции. Функция \ic{divide} вызывает своё продолжение
из хвостовой позиции. Это продолжение рекурсивно вызывает \ic{bezout} опять-таки
из хвостовой позиции.</p>

<p>Но в~классическом факториале \ic{(*~n (fact (-~n~1)))} рекурсивный вызов
\ic{fact} происходит не~из хвостовой позиции. Он \emph{завёрнут} в~продолжение,
так как значение~\ic{(fact (-~n~1))} ещё ожидается для умножения на~\ic{n};
вызов тут не~является последней необходимой операцией, всё вычисление нельзя
свести к~нему.</p>

<p>Хвостовые вызовы позволяют отбрасывать ненужные окружения и фреймы стека, так
как при таких вызовах они больше никогда не~будут использоваться. Следовательно,
их можно не~сохранять, экономя таким образом драгоценную стековую память.
Подобные оптимизации были детально изучены французским лисп-сообществом, что
позволило существенно ускорить интерпретацию \cite{gre77,cha80,sj87};
см.~также~\cite{han90}.</p>

<p>\bigskip</p>

<p>\indexCS{evaluate-begin}{хвостовая рекурсия}
Оптимизация хвостовой рекурсии "--- это очень желанное свойство интерпретатора;
не~только для пользователя, но и для самого интерпретатора. Самое очевидное
место, где она была~бы полезной, "--- это форма \ic{begin}. До сих пор она
определялась следующим образом:</p>

<p>\begin{code:lisp}
(define (evaluate-begin e* r k)
  (if (pair? e)
      (if (pair? (cdr e*))
          (evaluate (car e*) r (make-begin-cont k e* r))
          (evaluate (car e*) r k) )
      (resume k empty-begin-value) ) )</p>

<p>(define-method (resume (k begin-cont) v)
  (evaluate-begin (cdr (begin-cont-e* k))
                  (begin-cont-r k)
                  (begin-cont-k k) ) )
\end{code:lisp}</p>

<p>Заметьте, здесь каждый вызов является хвостовым. Также здесь используется одна
небольшая оптимизация. Можно определить эту форму проще:</p>

<p>\begin{code:lisp}
(define (evaluate-begin e* r k)
  (if (pair? e*)
      (evaluate (car e*) r (make-begin-cont k e* r))
      (resume k empty-begin-value) ) )</p>

<p>(define-method (resume (k begin-cont) v)
  (let ((e* (cdr (begin-cond-e* k))))
    (if (pair? e*)
        (evaluate-begin e* (begin-cont-r k) (begin-cont-k k))
        (resume (begin-cont-k k) v) ) ) )
\end{code:lisp}</p>

<p>Но первый вариант предпочтительнее, так как в~этом случае при вычислении
последнего оставшегося выражения мы не~тратим время на создание лишнего
продолжения \ic{(make-begin-cont k e* r)}, которое фактически равно~\ic{k}, а
сразу~же переходим в~нужное продолжение. Конечно, в~Лиспе есть сборка мусора, но
это не~означает, что можно мусорить ненужными объектами на каждом шагу. Это
небольшая, но важная оптимизация, ведь каждый \ic{begin} когда-нибудь
заканчивается!</p>

<p>\indexCS{evaluate-arguments}{хвостовая рекурсия}
Аналогично можно оптимизировать и вычисление аргументов функции, переписав его
следующим образом:</p>

<p>\begin{code:lisp}
(define-class no-more-argument-cont continuation ())</p>

<p>(define (evaluate-arguments e* r k)
  (if (pair? e*)
      (if (pair? (cdr e*))
          (evaluate (car e*) r (make-argument-cont k e* r))
          (evaluate (car e*) r (make-no-more-argument-cont k)) )
      (resume k no-more-arguments) ) )</p>

<p>(define-method (resume k (make-no-more-argument-cont) v)
  (resume (no-more-argument-cont-k k) (list v)) )
\end{code:lisp}</p>

<p>Это новое продолжение, хранящее список из последнего вычисленного значения,
избавляет нас от необходимости передавать окружение~\ic{r} целиком. Данный приём
впервые использован Митчеллом~Уондом и Дэниелом~Фридманом в~\cite{wan80b}.</p>

<p>
\section{Частичные продолжения}\label{escape/sect:partial}</p>

<p>\indexR{продолжения (continuations)!частичные продолжения}
Среди прочих вопросов, поднимаемых продолжениями, есть ещё один довольно
интересный: что именно случается с~отбрасываемым при переходе кодом? Другими
словами, с~тем куском продолжения (или~стека), который находится между
положениями до прыжка и после. Мы говорили, что такой \term{срез} стека
не~сохраняется при переходе. Но он вовсе не~является бесполезным: ведь если~бы
через него не~перешагнули, то он~бы принял какое"~то значение, выполнил
определённые действия и передал~бы полученное значение своему продолжению.
То~есть вёл~бы себя как обычная функция. Во~многих работах, вроде
\cite{ffdm87,ff87,fel88,df90,hd90,qs91,mq94}, приводятся способы сохранения и
приёмы использования этих срезов "--- \term{частичных продолжений}
(\english{partial/delimited continuations}).</p>

<p>Рассмотрим следующий простой пример:</p>

<p>\begin{code:lisp}
(+ 1 (call/cc (lambda (k) (set! foo k) 2))) |\is| 3
(foo 3)                                     |\is| 4
\end{code:lisp}</p>

<p>\noindent
Какое именно продолжение хранится в~\ic{foo}? Казалось~бы $\lambda u . 1 + u$,
но чему тогда равно \ic{(foo~(foo~4))}?</p>

<p>\begin{code:lisp}
(foo (foo 4))                               |\is| 5
\end{code:lisp}</p>

<p>\indexR{композициональность!продолжений}
\indexR{продолжения (continuations)!композициональность}
Получается~\ic{5}, а не~ожидаемое значение~\ic{6}, которое~бы получилось при
правильной композиции функций. Дело в~том, что вызов продолжения означает
отбрасывание всех последующих вычислений ради продолжения других вычислений.
Таким образом, вызов продолжения внутри \ic{foo} приводит к~вычислению значения
$\lambda u. 1 + u$ при $u = 4$, которое становится значением всего выражения, и
второй вызов \ic{foo} вообще не~происходит "--- он не~нужен, ведь значение
выражения уже вычислено и передано продолжению! Именно в~этом проблема: мы
захватили обычное продолжение, а не~частичное. Обычные продолжения
\term{активируются} и полностью заменяют стек собой, а \emph{не~вызываются}
как функции.</p>

<p>Возможно, так будет понятнее. В~\ic{foo} мы сохранили \ic{(+~1~[])}. Это всё,
что ещё осталось вычислить. Так как аргументы передаются по значению, то
вычисление аргумента"=продолжения в~\ic{(foo (foo 4))} фактически завершает
вычисления, отбрасывает \ic{(foo~[])} и возвращает значение формы \ic{(+~1~4)},
которое, очевидно, равно~\ic{5}.</p>

<p>\indexR{продолжения (continuations)!и интерактивная сессия}
\indexR{интерактивная сессия (REPL)!продолжения}
\indexE{REPL!продолжения}
Частичные продолжения представляют собой лишь часть оставшихся вычислений, тогда
как обычные продолжения "--- это \emph{все} оставшиеся вычисления.
В~статьях \cite{fwfd88,df90,hd90,qs91} приводятся способы захвата частичных и,
следовательно, поддающихся композиции продолжений. Предположим, теперь
с~\ic{foo} связано продолжение \ic{[(+~1~[])]}, где внешние квадратные скобки
означают, что оно ведёт себя как функция. Тогда \ic{(foo (foo~4))} будет
эквивалентно уже \ic{(foo [(+~1~[4])])}, что превращается в~\ic{(+~1~5)},
которое в~итоге даёт~\ic{6}. Захваченное продолжение \ic{[(+~1~[])]} определяет
не~все последующие вычисления, которые когда-либо произойдут, а только их часть
вплоть до момента возврата значения. Для интерактивной сессии продолжением
обычных продолжений является \term{главный цикл} (он~же \ic{toplevel}), именно
ему продолжения передают своё значение, а он выводит его на экран, читает
следующее выражение из входного потока, вычисляет его и~так~далее. Продолжение
частичных продолжений неизвестно, именно поэтому они конечны и ведут себя как
обычные функции "--- ведь функции тоже не~знают, кому они вернут значение.</p>

<p>Давайте взглянем на наш пример с~\ic{(set! foo~k)} с~другой стороны. Оставим всё
по-прежнему, но объединим эти два выражения в~явную последовательность:</p>

<p>\begin{code:lisp}
(begin (+ 1 (call/cc (lambda (k) (set! foo k) 2)))
       (foo 3) )
\end{code:lisp}</p>

<p>Бабах! Мы получили бесконечный цикл, так как \ic{foo} оказывается теперь
связанной с~\ic{(begin (+~1~[]) (foo~3))}, что приводит к~рекурсии. Как видим,
главный цикл "--- это не~только последовательное вычисление выражений. Если мы
хотим правильно его проэмулировать, то вдобавок необходимо изменять продолжение
каждого вычисляемого в~главном цикле выражения:</p>

<p>\begin{code:lisp}
(let (foo sequel print?)
  (define-syntax toplevel
    (syntax-rules ()
      ((toplevel e) (toplevel-eval (lambda () e))) ) )
  (define (toplevel-eval thunk)
    (call/cc (lambda (k)
               (set! print? #t)
               (set! sequel k)
               (let ((v (thunk)))
                 (when print? (display v) (set! print? #f))
                 (sequel v) ) )) )
  (toplevel (+ 1 (call/cc (lambda (k) (set! foo k) 2))))
  (toplevel (foo 3))
  (toplevel (foo (foo 4))) )
\end{code:lisp}</p>

<p>Каждый раз, когда мы хотим вычислить выражение с~помощью \ic{toplevel}, его
продолжение "--- \emph{продолжение} работы \ic{toplevel} "--- сохраняется
в~переменной \ic{sequel}. Любое продолжение, захватываемое внутри \ic{thunk},
теперь будет ограничено текущей вычисляемой формой. Аналогичным образом применяя
присваивание, можно сохранить любой срез стека в~виде частичного продолжения.
Как видим, все продолжения с~неограниченным временем жизни для своего создания
требуют побочных эффектов.</p>

<p>\indexR{присваивание!роль для продолжений}
Частичные продолжения явно указывают, когда необходимо остановить вычисления.
Этот эффект может быть полезен в~некоторых случаях, а также интересен сам по
себе. Мы вполне можем даже переписать нашу \ic{call/cc} так, чтобы она
захватывала именно частичные продолжения вплоть до \ic{toplevel}. Естественно,
кроме них потребуются также и переходы на тот случай, когда мы действительно
не~заинтересованы в~сохранении срезов стека. Но, с~другой стороны, частичные
продолжения в~реальности используются довольно редко; сложно привести пример
программы, где частичные продолжения были~бы действительно полезны, но при этом
не~усложняли~бы её сильнее обычных. Тем не~менее, они важны как ещё один пример
управляющей формы, которую можно реализовать на~Scheme с~помощью \ic{call/cc}
и~присваивания.</p>

<p>
\section{Заключение}\label{escape/sect:conclusions}</p>

<p>Продолжения вездесущи. Если вы понимаете продолжения, вы одновременно овладели
ещё одним стилем программирования, получили широчайшие возможности управления
ходом вычислений и знаете, во~что вам обойдётся это управление. Продолжения
тесно связаны с~потоком исполнения, так как они динамически определяют всё, что
ещё осталось сделать. Поэтому они так важны и полезны для обработки исключений.</p>

<p>Интерпретатор, определённый в~этой главе, довольно мощный, но легко понятный
только по частям. Это обычное дело для объектно"=ориентированного стиля: есть
много маленьких и простых кусочков, но не~так просто составить понимание цельной
картины того, как они работают вместе. Интерпретатор модульный и легко
расширяется новыми возможностями. Он не~особо быстрый, так как в~процессе работы
создаёт целую гору объектов, которые удаляются тут~же после использования.
Конечно, это является одной из задач компилятора: выяснить, какие из объектов
действительно стоит создавать и сохранять.</p>

<p>
\section{Упражнения}\label{escape/sect:exercises}</p>

<p>\begin{exercise}\label{escape/ex:cc-cc}
Что вернёт \ic{(call/cc call/cc)}? Зависит~ли ответ от порядка вычислений?
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:cc-cc-cc-cc}
А~что вернёт \ic{((call/cc call/cc) (call/cc call/cc))}?
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:tagbody}
\indexC{tagbody}\indexC{go}
Реализуйте пару \ic{tagbody}/\ic{go} с~помощью \ic{block}, \ic{catch} и
\ic{labels}. Напомним синтаксис этой формы из~{\CommonLisp}:</p>

<p>\begin{code:lisp}
(tagbody
          |\ii{выражения\sub{0}}|...
  |\hbox to 0pt{\ii{метка\sub{1}}}|        |\ii{выражения\sub{1}}|...
          ...
  |\hbox to 0pt{\ii{метка\sub{i}}}|        |\ii{выражения\sub{i}}|...
          ... )
\end{code:lisp}</p>

<p>Все \ii{выражения\sub{i}} (и~только они) могут содержать безусловные переходы
\ic{(go~\ii{метка})} и возвраты \ic{(return~\ii{значение})}. Если \ic{return}
не~будет, то форма \ic{tagbody} возвращает~\ic{nil}.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:arity-optimize}
Вы скорее всего заметили, что функции при вызове проверяют фактическую арность:
количество переданных им аргументов. Измените механизм создания функций так,
чтобы правильная арность рассчитывалась только один раз. Можете считать, что
функции бывают только фиксированной арности.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:apply}
Определите функцию \ic{apply} для интерпретатора из этой главы.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:dotted}
Реализуйте поддержку функций переменной арности для интерпретатора из этой
главы.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:evaluate}
Измените функцию запуска интерпретатора так, чтобы она вызывала \ic{evaluate}
только единожды.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:cc-value}
Способ реализации продолжений из
раздела~\ref{escape/implementation/ssect:call/cc} отделяет продолжения от других
значений. Поэтому мы вынуждены реализовывать метод \ic{invoke} лично для класса
продолжений, представляемых функциями языка определения. Переопределите
\ic{call/cc} так, чтобы она возвращала объекты определяемого языка, являющиеся
экземплярами класса-наследника \ic{value}, соответствующего продолжениям.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:eternal}
\indexR{бесконечный цикл}
Напишите на {\CommonLisp} функцию \ic{eternal-return}, принимающую замыкание и
вызывающую его в~бесконечном цикле. Этот цикл должен быть истинно бесконечным:
перекройте абсолютно все выходы из него.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:crazy-cc}
Рассмотрим следующую хитроумную функцию (спасибо за неё Алану~Бодену):</p>

<p>\indexR{коробки}
\indexC{make-box}
\begin{code:lisp}
(define (make-box value)
  (let ((box
         (call/cc
          (lambda (exit)
            (letrec
             ((behavior
               (call/cc
                (lambda (store)
                  (exit (lambda (msg . new)
                          (call/cc
                           (lambda (caller)
                             (case msg
                               ((get) (store (cons (car behavior)
                                                   caller )))
                               ((set)
                                (store
                                 (cons (car new)
                                       caller ) ) ) ) ) ) )) ) ) ))
             ((cdr behavior) (car behavior)) ) ) ) ))
    (box 'set value)
    box ) )
\end{code:lisp}</p>

<p>Предположим, в~\ic{box1} лежит значение \ic{(make-box~33)}, тогда что получится
в~результате следующих вычислений?</p>

<p>\begin{code:lisp}
(box1 'get)
(begin (box1 'set 44) (box1 'get))
\end{code:lisp}
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:generic-evaluate}
Среди всех наших функций только \ic{evaluate} не~является обобщённой. Можно
создать класс программ, от которого будут наследоваться подклассы программ
с~различным синтаксисом. Правда, в~этом случае мы не~сможем хранить программы
как S-выражения, они должны быть объектами. Соответственно, функция
\ic{evaluate} уже должна быть обобщённой. Это позволит легко вводить новые
специальные формы (возможно, даже прямо из определяемого языка). Воплотите эту
идею в~жизнь.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:throw}
Реализуйте оператор \ic{throw} как функцию, а не~специальную форму.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:cps-speed}
Сравните скорость выполнения обычного кода и переписанного в~стиле передачи
продолжений.
\end{exercise}</p>

<p>
\begin{exercise}\label{escape/ex:the-current-cc}
\indexC{the-current-continuation}
Реализуйте \ic{call/cc} с~помощью функции \ic{the-current-continuation}, которая
определяется следующим образом:</p>

<p>\begin{code:lisp}
(define (the-current-continuation)
  (call/cc (lambda (k) k)) )
\end{code:lisp}
\end{exercise}</p>

<p>
\section*{Рекомендуемая литература}\label{escape/sect:recommended-reading}</p>

<p>Годный, нетривиальный пример использования продолжений приведён в
\cite{wan80a}. Также стоит почитать~\cite{hfw84} об~эмуляции сопрограмм.
В~\cite{dr87} прекрасно рассказано о~развитии понимания важности рефлексии
для управляющих форм.</p>

<p></body>
</html>
